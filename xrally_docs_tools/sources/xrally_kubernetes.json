{
    "changelog": "# Changelog\n\n<!-- \n  Changelogs are for humans, not machines. The end users of Rally project are\n  human beings who care about what's is changing, why and how it affects them.\n  Please leave these notes as much as possible human oriented.\n\n  Each release can use the next sections:\n   - **Added** for new features.\n   - **Changed** for changes in existing functionality.\n   - **Deprecated** for soon-to-be removed features/plugins.\n   - **Removed** for now removed features/plugins.\n   - **Fixed** for any bug fixes.\n\n  Release notes for existing releases are MUTABLE! If there is something that\n  was missed or can be improved, feel free to change it!\n \n-->\n\n## [1.0.0] - 2018-06-26\n\nThe start. Initial release. Have fun! ;)\n", 
    "name": "xrally-kubernetes", 
    "repository": "https://github.com/xrally/xrally-kubernetes", 
    "title": "Kubernetes", 
    "pkg_info": {
        "Name": "xrally-kubernetes", 
        "License": "Apache License, Version 2.0", 
        "Author": "xRally Team", 
        "Metadata-Version": "2.1", 
        "Home-page": "https://xrally.org/plugins/kubernetes/overview", 
        "Summary": "A set of xRally plugins to run workloads against Kubernetes platform.", 
        "Platform": "UNKNOWN", 
        "Version": "1.0.0", 
        "Description-Content-Type": "text/markdown", 
        "Classifier": "Programming Language :: Python :: 3.6", 
        "Description": "# xrally-kubernetes\n        \n        xRally plugins for [Kubernetes](https://kubernetes.io/) platform.\n        \n        ## Status ot this package\n        \n        Work in progress. The active phase of development.\n        \n        ## Getting started\n        \n        First of all, you need to create rally env for Kubernetes. There are two main\n        ways to communicate to Kubernetes cluster - specifying auth-token or\n        certifications. Choose what is suitable for your case and use one of the\n        following samples.\n        \n        To create env using certifications, use spec `samples/platforms/cert-spec.yaml`:\n        \n        ```console\n        rally env create --name kubernetes --spec samples/platforms/cert-spec.yaml\n        ```\n        \n        For using Kubernetes token authentication, you need to get API key and use\n        `samples/platforms/apikey-spec.yaml` spec to create env:\n        \n        ```console\n        rally env create --name kubernetes --spec samples/platforms/apikey-spec.yaml\n        ``` \n        \n        For initialization `Rally environment` to communicate to existing Kubernetes\n        cluster you can also use system environment variables instead of making\n        specification json/yaml file. See the list of available options:\n        \n        * As like regular kubernetes client (kubectl) Rally can read kubeconfig file.\n          Call `rally env create --name kubernetes-created --from-sys-env` and Rally\n          with check `$HOME/.kube/config` file to the available configuration. Also,\n          you can specify `KUBECONFIG` variable with a path different to the default\n          `$HOME/.kube/config`.\n        \n        * Despite the fact that `kubectl` doesn't support specifying Kubernetes\n          credentials via separated system environment variables per separate option\n          (auth_url, api_key, etc) like other platforms support (OpenStack, Docker,\n          etc), Rally team provides this way. Check [existing@kubernetes plugin documentation](https://xrally.org/plugins/kubernetes/plugins/#existing-platform)\n          for the list of all available variables. Here is a simple example of this feature:\n        \n          ```console\n          # the URL to the Kubernetes host.\n          export KUBERNETES_HOST=\"https://example.com:3030\" \n          #  a path to a file containing TLS certificate to use when connecting to the Kubernetes host.\n          export KUBERNETES_CERT_AUTH=\"~/.kube/cert_auth_file\"\n          # client API key to use as token when connecting to the Kubernetes host.\n          export KUBERNETES_API_KEY=\"foo\"\n          # client API key prefix to use in token when connecting to the Kubernetes host.\n          export KUBERNETES_API_KEY_PREFIX=\"bar\"\n          \n          # finally create a Rally environment\n          rally env create --name my-kubernetes --from-sysenv\n          ```\n        Check env availbility by the following command:\n        \n        ```console\n        rally env check\n        ```\n         \n        ## Where the tasks and bugs are tracked ?!\n        \n        The primary tracking system is\n        [Issues at GitHub](https://github.com/xrally/xrally-kubernetes/issues).\n        \n        For Rally framework related issues look at\n        [Launchpad](https://bugs.launchpad.net/rally).\n        "
    }, 
    "versions": [
        "1.0.0", 
        "1.0.0"
    ], 
    "changelog_file": "CHANGELOG.md", 
    "plugins": {
        "existing@kubernetes": {
            "introduced_in": null, 
            "name": "existing", 
            "parameters": [], 
            "title": "Default plugin for Kubernetes.", 
            "description": "**Create a spec based on system environment.**\n\nThe environment variables could be defined with two mutually exclusive\nmandatory ways: check kubeconfig file or kubeconfig envvar, defining\ncertificates or defining auth token.\n\nTo search configuration in kubeconfig file, rally checks standard\n`$HOME/.kube/config` file or get `KUBECONFIG` envvar.\n\nTo define certificates to connect next variables used:\n\n.. envvar:: KUBERNETES_HOST\nThe URL to the Kubernetes host.\n.. envvar:: KUBERNETES_TLS_INSECURE\nNot to verify the host against a CA certificate.\n.. envvar:: KUBERNETES_CERT_AUTH\nA path to a file containing TLS certificate to use when\nconnecting to the Kubernetes host.\n.. envvar:: KUBERNETES_CLIENT_CERT\nA path to a file containing client certificate to use when\nconnecting to the Kubernetes host.\n.. envvar:: KUBERNETES_CLIENT_KEY\nA path to a file containing client key to use when connecting to\nthe Kubernetes host.\n\nTo define auth token to connect next variables used:\n\n.. envvar:: KUBERNETES_HOST\nThe URL to the Kubernetes host.\n.. envvar:: KUBERNETES_CERT_AUTH\nA path to a file containing TLS certificate to use when\nconnecting to the Kubernetes host.\n.. envvar:: KUBERNETES_API_KEY\nClient API key to use as token when connecting to the Kubernetes\nhost.\n.. envvar:: KUBERNETES_API_KEY_PREFIX\nClient API key prefix to use in token when connecting to the\nKubernetes host.", 
            "module": "xrally_kubernetes.env.platforms.existing", 
            "platform": "kubernetes", 
            "returns": "", 
            "base": "Platform", 
            "schema": {
                "oneOf": [
                    {
                        "additionalProperties": false, 
                        "required": [
                            "server", 
                            "certificate-authority", 
                            "api_key"
                        ], 
                        "description": "The auth-token authentication", 
                        "properties": {
                            "certificate-authority": {
                                "type": "string", 
                                "description": "Path to certificate authority"
                            }, 
                            "api_key_prefix": {
                                "type": "string", 
                                "description": "API key prefix. Defaults to 'Bearer'."
                            }, 
                            "api_key": {
                                "type": "string", 
                                "description": "API key for API key authorization"
                            }, 
                            "server": {
                                "type": "string", 
                                "description": "An endpoint of Kubernetes API."
                            }
                        }
                    }, 
                    {
                        "additionalProperties": false, 
                        "required": [
                            "server", 
                            "certificate-authority", 
                            "client-certificate", 
                            "client-key"
                        ], 
                        "description": "The authentication via client certificates.", 
                        "properties": {
                            "certificate-authority": {
                                "type": "string", 
                                "description": "Path to certificate authority"
                            }, 
                            "client-certificate": {
                                "type": "string", 
                                "description": "Path to client's certificate."
                            }, 
                            "tls_insecure": {
                                "type": "boolean", 
                                "description": "Whether skip or not tls verification. Defaults to False."
                            }, 
                            "client-key": {
                                "type": "string", 
                                "description": "Path to client's key."
                            }, 
                            "server": {
                                "type": "string", 
                                "description": "An endpoint of Kubernetes API."
                            }
                        }
                    }
                ], 
                "type": "object"
            }
        }, 
        "required_kubernetes_platform@kubernetes": {
            "introduced_in": null, 
            "name": "required_kubernetes_platform", 
            "parameters": [], 
            "title": "Check for kubernetes platform in selected environment.", 
            "description": "", 
            "module": "xrally_kubernetes.tasks.validators", 
            "platform": "kubernetes", 
            "returns": "", 
            "base": "Validator", 
            "schema": null
        }, 
        "Kubernetes.create_and_delete_namespace@kubernetes": {
            "introduced_in": null, 
            "name": "Kubernetes.create_and_delete_namespace", 
            "parameters": [
                {
                    "doc": "namespace custom name\n", 
                    "name": "name"
                }, 
                {
                    "doc": "wait namespace status after creation", 
                    "name": "status_wait"
                }
            ], 
            "title": "Create namespace, wait until it won't be active and then delete it.", 
            "description": "", 
            "module": "xrally_kubernetes.tasks.scenarios.namespaces", 
            "platform": "kubernetes", 
            "returns": "", 
            "base": "Scenario", 
            "schema": null
        }, 
        "Kubernetes.list_namespaces@kubernetes": {
            "introduced_in": null, 
            "name": "Kubernetes.list_namespaces", 
            "parameters": [], 
            "title": "List cluster namespaces.", 
            "description": "", 
            "module": "xrally_kubernetes.tasks.scenarios.namespaces", 
            "platform": "kubernetes", 
            "returns": "", 
            "base": "Scenario", 
            "schema": null
        }
    }, 
    "options": {
        "kubernetes": [
            {
                "default": 0.0, 
                "help": "Time to sleep before polling for status", 
                "type": "floating point value", 
                "name": "start_prepoll_delay", 
                "deprecated_opts": []
            }, 
            {
                "default": 50, 
                "help": "Kubernetes total retries to read resource status", 
                "type": "integer value", 
                "name": "status_total_retries", 
                "deprecated_opts": []
            }, 
            {
                "default": 1.0, 
                "help": "Kubernetes status poll interval", 
                "type": "floating point value", 
                "name": "status_poll_interval", 
                "deprecated_opts": []
            }
        ]
    }, 
    "plugins_bases": {
        "Platform": "", 
        "Validator": "A base class for all validators.", 
        "Scenario": "This is base class for any scenario.\n\nAll Scenario Plugins should be subclass of this class.\n"
    }
}