{
    "rally": {
        "name": "rally", 
        "repository": "https://github.com/openstack/rally", 
        "title": "In-tree", 
        "pkg_info": {
            "Provides-Extra": "test", 
            "Name": "rally", 
            "License": "Apache License, Version 2.0", 
            "Author": "OpenStack", 
            "Metadata-Version": "2.1", 
            "Home-page": "https://docs.openstack.org/rally/latest/", 
            "Summary": "Generic Testing Framework & Tool that unifies all types of testing.", 
            "Platform": "UNKNOWN", 
            "Version": "0.12.1", 
            "Classifier": "Programming Language :: Python :: 3.5", 
            "Author-email": "openstack-dev@lists.openstack.org", 
            "Description": "=====\n        Rally\n        =====\n        \n        Team and repository tags\n        ========================\n        \n        .. image:: https://governance.openstack.org/tc/badges/rally.svg\n            :target: https://governance.openstack.org/tc/reference/tags/index.html\n        \n        .. image:: https://img.shields.io/pypi/v/rally.svg\n            :target: https://pypi.org/project/rally/\n            :alt: Latest Version\n        \n        .. image:: https://img.shields.io/badge/gitter-join_chat-ff69b4.svg\n            :target: https://gitter.im/rally-dev/Lobby\n            :alt: Gitter Chat\n        \n        .. image:: https://img.shields.io/badge/tasks-trello_board-blue.svg\n            :target: https://trello.com/b/DoD8aeZy/rally\n            :alt: Trello Board\n        \n        .. image:: https://img.shields.io/github/license/openstack/rally.svg\n            :target: https://www.apache.org/licenses/LICENSE-2.0\n            :alt: Apache License, Version 2.0\n        \n        \n        What is Rally\n        =============\n        \n        Rally is a Benchmark-as-a-Service project for OpenStack.\n        \n        Rally is intended to provide the community with a benchmarking tool that is capable of performing **specific**, **complicated** and **reproducible** test cases on **real deployment** scenarios.\n        \n        If you are here, you are probably familiar with OpenStack and you also know that it's a really huge ecosystem of cooperative services. When something fails, performs slowly or doesn't scale, it's really hard to answer different questions on \"what\", \"why\" and \"where\" has happened. Another reason why you could be here is that you would like to build an OpenStack CI/CD system that will allow you to improve SLA, performance and stability of OpenStack continuously.\n        \n        The OpenStack QA team mostly works on CI/CD that ensures that new patches don't break some specific single node installation of OpenStack. On the other hand it's clear that such CI/CD is only an indication and does not cover all cases (e.g. if a cloud works well on a single node installation it doesn't mean that it will continue to do so on a 1k servers installation under high load as well). Rally aims to fix this and help us to answer the question \"How does OpenStack work at scale?\". To make it possible, we are going to automate and unify all steps that are required for benchmarking OpenStack at scale: multi-node OS deployment, verification, benchmarking & profiling.\n        \n        \n        **Rally** workflow can be visualized by the following diagram:\n        \n        .. image:: doc/source/images/Rally-Actions.png\n           :alt: Rally Architecture\n        \n        \n        Who Is Using Rally\n        ==================\n        \n        .. image:: doc/source/images/Rally_who_is_using.png\n           :alt: Who is Using Rally\n        \n        \n        Documentation\n        =============\n        \n        `Rally documentation on ReadTheDocs <https://rally.readthedocs.org/en/latest/>`_ is a perfect place to start learning about Rally. It provides you with an **easy** and **illustrative** guidance through this benchmarking tool. For example, check out the `Rally step-by-step tutorial <https://rally.readthedocs.io/en/latest/quick_start/tutorial.html>`_ that explains, in a series of lessons, how to explore the power of Rally in benchmarking your OpenStack clouds.\n        \n        \n        Architecture\n        ------------\n        \n        In terms of software architecture, Rally is built of 4 main components:\n        \n        1. **Server Providers** - provide servers (virtual servers), with ssh access, in one L3 network.\n        2. **Deploy Engines** - deploy OpenStack cloud on servers that are presented by **Server Providers**\n        3. **Verification** - component that runs tempest (or another specific set of tests) against a deployed cloud, collects results & presents them in human readable form.\n        4. **Benchmark engine** - allows to write parameterized benchmark scenarios & run them against the cloud.\n        \n        Use Cases\n        ---------\n        \n        There are 3 major high level Rally Use Cases:\n        \n        .. image:: doc/source/images/Rally-UseCases.png\n           :alt: Rally Use Cases\n        \n        \n        Typical cases where Rally aims to help are:\n        \n        - Automate measuring & profiling focused on how new code changes affect the OS performance;\n        - Using Rally profiler to detect scaling & performance issues;\n        - Investigate how different deployments affect the OS performance:\n        \t- Find the set of suitable OpenStack deployment architectures;\n        \t- Create deployment specifications for different loads (amount of controllers, swift nodes, etc.);\n        - Automate the search for hardware best suited for particular OpenStack cloud;\n        - Automate the production cloud specification generation:\n        \t- Determine terminal loads for basic cloud operations: VM start & stop, Block Device create/destroy & various OpenStack API methods;\n        \t- Check performance of basic cloud operations in case of different loads.\n        \n        \n        Links\n        ----------------------\n        \n        * Free software: Apache license\n        * Documentation: https://rally.readthedocs.org/en/latest/\n        * Source: https://git.openstack.org/cgit/openstack/rally\n        * Bugs: https://bugs.launchpad.net/rally\n        * Step-by-step tutorial: https://rally.readthedocs.io/en/latest/quick_start/tutorial.html\n        * RoadMap: https://docs.google.com/a/mirantis.com/spreadsheets/d/16DXpfbqvlzMFaqaXAcJsBzzpowb_XpymaK2aFY2gA2g\n        * Launchpad page: https://launchpad.net/rally\n        * Gitter chat: https://gitter.im/rally-dev/Lobby\n        * Trello board: https://trello.com/b/DoD8aeZy/rally\n        \n        "
        }, 
        "versions": [
            "0.11.0", 
            "0.12.1"
        ], 
        "plugins": {
            "NovaAggregates.create_and_delete_aggregate@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates an aggregate and then delete it.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_delete_aggregate"
            }, 
            "GnocchiArchivePolicyRule.create_archive_policy_rule@openstack": {
                "introduced_in": "0.11.1", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Pattern for matching metrics\n", 
                        "name": "metric_pattern"
                    }, 
                    {
                        "doc": "Archive policy name", 
                        "name": "archive_policy_name"
                    }
                ], 
                "title": "Create archive policy rule.", 
                "module": "rally.plugins.openstack.scenarios.gnocchi.archive_policy_rule", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicyRule.create_archive_policy_rule"
            }, 
            "neutron_network@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Neutron network ID by it's name.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "neutron_network"
            }, 
            "nova@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for NovaClient which returns a authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "nova"
            }, 
            "VMTasks.runcommand_heat@openstack": {
                "introduced_in": null, 
                "description": "Workload can be either file or resource:\n\n   .. code-block:: json\n\n     {\"file\": \"/path/to/file.sh\"}\n     {\"resource\": [\"package.module\", \"workload.py\"]}\n\n\n Also it should contain \"username\" key.\n\n Given file will be uploaded to `gate_node` and started. This script\n should print `key` `value` pairs separated by colon. These pairs will\n be presented in results.\n\n Gate node should be accessible via ssh with keypair `key_name`, so\n heat template should accept parameter `key_name`.", 
                "parameters": [
                    {
                        "doc": "workload to run\n", 
                        "name": "workload"
                    }, 
                    {
                        "doc": "path to heat template file\n", 
                        "name": "template"
                    }, 
                    {
                        "doc": "additional template files\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "parameters for heat template", 
                        "name": "parameters"
                    }
                ], 
                "title": "Run workload on stack deployed by heat.", 
                "module": "rally.plugins.openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "VMTasks.runcommand_heat"
            }, 
            "CinderVolumes.create_and_list_volume_backups@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "True if detailed information about backup\nshould be listed\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "if True, a volume backup will be deleted\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Create and then list a volume backup.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_list_volume_backups"
            }, 
            "CinderVolumes.create_and_delete_volume@openstack": {
                "introduced_in": null, 
                "description": "Good for testing a maximal bandwidth of cloud. Optional 'min_sleep'\nand 'max_sleep' parameters allow the scenario to simulate a pause\nbetween volume creation and deletion (of random duration from\n[min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "minimum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and then delete a volume.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_delete_volume"
            }, 
            "HeatStacks.list_stacks_and_events@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List events from tenant stacks.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.list_stacks_and_events"
            }, 
            "NovaServers.boot_and_update_server@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a server, then update it.\nAssumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "update the server description\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, then update its name and description.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_update_server"
            }, 
            "NovaServers.boot_server_associate_and_dissociate_floating_ip@openstack": {
                "introduced_in": null, 
                "description": "The scenario first boot a server and create a floating IP. then\nassociate the floating IP to the server.Finally dissociate the floating\nIP.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for\nfloating ip creation\n", 
                        "name": "create_floating_ip_args"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server associate and dissociate a floating IP from it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_associate_and_dissociate_floating_ip"
            }, 
            "cinder@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for CinderClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "cinder"
            }, 
            "DesignateBasic.create_and_delete_recordsets@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting recordsets\nwith different level of load.", 
                "parameters": [
                    {
                        "doc": "recordsets to create pr zone.", 
                        "name": "recordsets_per_zone"
                    }
                ], 
                "title": "Create and then delete recordsets.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_recordsets"
            }, 
            "NovaServers.boot_server_from_volume_and_resize@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and then a server.\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between volume creation and deletion\n(of random duration from [min_sleep, max_sleep]).\n\nThis test will confirm the resize by default,\nor revert the resize if confirm is set to false.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "True if need to confirm resize else revert resize\n", 
                        "name": "confirm"
                    }, 
                    {
                        "doc": "True if resources needs to be deleted explicitly\nelse use rally cleanup to remove resources\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation", 
                        "name": "create_volume_kwargs"
                    }
                ], 
                "title": "Boot a server from volume, then resize and delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_and_resize"
            }, 
            "Watcher.list_audit_templates@openstack": {
                "introduced_in": null, 
                "description": "Audit templates are being created by Audit Template Context.", 
                "parameters": [
                    {
                        "doc": "Name of the audit template\n", 
                        "name": "name"
                    }, 
                    {
                        "doc": "Name of the goal\n", 
                        "name": "goal"
                    }, 
                    {
                        "doc": "Name of the strategy\n", 
                        "name": "strategy"
                    }, 
                    {
                        "doc": "The maximum number of results to return per\nrequest, if:\n\n  1) limit > 0, the maximum number of audit templates to return.\n  2) limit == 0, return the entire list of audit_templates.\n  3) limit param is NOT specified (None), the number of items\n     returned respect the maximum imposed by the Watcher API\n    (see Watcher's api.max_limit option).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "Optional, field used for sorting.\n", 
                        "name": "sort_key"
                    }, 
                    {
                        "doc": "Optional, direction of sorting, either 'asc' (the\ndefault) or 'desc'.\n", 
                        "name": "sort_dir"
                    }, 
                    {
                        "doc": "Optional, boolean whether to return detailed information\nabout audit_templates.\n", 
                        "name": "detail"
                    }
                ], 
                "title": "List existing audit templates.", 
                "module": "rally.plugins.openstack.scenarios.watcher.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Watcher.list_audit_templates"
            }, 
            "Gnocchi.get_status@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "get detailed output", 
                        "name": "detailed"
                    }
                ], 
                "title": "Get the status of measurements processing.", 
                "module": "rally.plugins.openstack.scenarios.gnocchi.status", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "Gnocchi.get_status"
            }, 
            "NovaServerGroups.create_and_list_server_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova server-group-create\" and \"nova server-group-list\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Server group policy\n", 
                        "name": "policies"
                    }, 
                    {
                        "doc": "If True, display server groups from all\nprojects(Admin only)\n", 
                        "name": "all_projects"
                    }, 
                    {
                        "doc": "The server group specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server group, then list all server groups.", 
                "module": "rally.plugins.openstack.scenarios.nova.server_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServerGroups.create_and_list_server_groups"
            }, 
            "KeystoneBasic.create_and_list_tenants@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone tenant with random name and list all tenants.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_tenants"
            }, 
            "watcher_goal@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Watcher goal ID by it's name.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "watcher_goal"
            }, 
            "Dummy.openstack@openstack": {
                "introduced_in": null, 
                "description": "Dummy.dummy can be used for testing performance of different\nScenarioRunners and of the ability of rally to store a large\namount of results.", 
                "parameters": [
                    {
                        "doc": "idle time of method (in seconds).", 
                        "name": "sleep"
                    }
                ], 
                "title": "Do nothing and sleep for the given number of seconds (0 by default).", 
                "module": "rally.plugins.openstack.scenarios.dummy", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.openstack"
            }, 
            "KeystoneBasic.create_and_list_users@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters to create users like\n\"tenant_id\", \"enabled\".\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user with random name and list all users.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_users"
            }, 
            "Pie@default": {
                "introduced_in": null, 
                "description": "This plugin processes additive data and calculate average values.\nBoth additive and complete data are displayed in HTML report as pie chart.\n\nExamples of using this plugin in Scenario, for saving output data:\n\n.. code-block:: python\n\n    self.add_output(\n        additive={\"title\": \"Additive output\",\n                  \"description\": (\"Pie with average data \"\n                                  \"from all iterations values\"),\n                  \"chart_plugin\": \"Pie\",\n                  \"data\": [[\"foo\", 12], [\"bar\", 34], [\"spam\", 56]]},\n        complete={\"title\": \"Complete output\",\n                  \"description\": \"Displayed as a pie, as-is\",\n                  \"chart_plugin\": \"Pie\",\n                  \"data\": [[\"foo\", 12], [\"bar\", 34], [\"spam\", 56]]})", 
                "parameters": [], 
                "title": "Display results as pie, calculate average values for additive data.", 
                "module": "rally.task.processing.charts", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "Pie"
            }, 
            "murano_environments@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for creating murano environments.", 
                "module": "rally.plugins.openstack.context.murano.murano_environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "environments_per_tenant"
                    ], 
                    "type": "object", 
                    "properties": {
                        "environments_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "murano_environments"
            }, 
            "CeilometerQueries.create_and_query_alarm_history@openstack": {
                "introduced_in": null, 
                "description": "This scenario tests POST /v2/query/alarms/history\nAn alarm is first created and then its alarm_id is used to fetch the\nhistory of that specific alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "optional param for specifying ordering of results\n", 
                        "name": "orderby"
                    }, 
                    {
                        "doc": "optional param for maximum number of results returned\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional parameters for alarm creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm and then query for its history.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.queries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerQueries.create_and_query_alarm_history"
            }, 
            "HeatStacks.create_stack_and_show_output@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-show", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "the stack output key that corresponds to\nthe scaling webhook\n", 
                        "name": "output_key"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and show output by using new algorithm.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_show_output"
            }, 
            "CeilometerAlarms.create_and_get_alarm@openstack": {
                "introduced_in": null, 
                "description": "These scenarios test GET /v2/alarms/(alarm_id)\nInitially an alarm is created and then its detailed information is\nfetched using its alarm_id. meter_name and threshold are required\nparameters for alarm creation. kwargs stores other optional parameters\nlike 'ok_actions', 'project_id' etc. that may be passed while creating\nan alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and get the newly created alarm.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_get_alarm"
            }, 
            "check_constant@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Additional schema validation for constant runner", 
                "module": "rally.plugins.common.runners.constant", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "check_constant"
            }, 
            "NeutronSubnets.delete_subnets@openstack": {
                "introduced_in": "0.11.2", 
                "description": "Each runner instance picks a specific subnet from the list based on its\npositional location in the list of users. By doing so, we can start\nmultiple threads with sufficient number of users created and spread\ndelete requests across all of them, so that they hit different subnets\nconcurrently.\n\nConcurrent execution of this scenario should help reveal any race\nconditions and other concurrency issues in Neutron IP allocation layer,\namong other things.", 
                "parameters": [], 
                "title": "Delete a subnet that belongs to each precreated network.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSubnets.delete_subnets"
            }, 
            "ManilaShares.create_and_delete_share@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between share creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "share protocol, valid values are NFS, CIFS,\nGlusterFS and HDFS\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "share size in GB, should be greater than 0\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a share", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and delete a share.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_delete_share"
            }, 
            "NeutronLoadbalancerV1.create_and_update_healthmonitors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-healthmonitor-create\" and \"neutron\nlb-healthmonitor-update\" command performance. The scenario creates\nhealthmonitors and then updates them.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/healthmonitors request\noptions\n", 
                        "name": "healthmonitor_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/healthmonitors update\noptions\n", 
                        "name": "healthmonitor_update_args"
                    }
                ], 
                "title": "Create a healthmonitor(v1) and update healthmonitors(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_update_healthmonitors"
            }, 
            "ManilaShares.create_and_shrink_share@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "share protocol for new share\navailable values are NFS, CIFS, CephFS, GlusterFS and HDFS.\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "size in GiB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "new size of the share in GiB\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "ID of the snapshot\n", 
                        "name": "snapshot_id"
                    }, 
                    {
                        "doc": "description of a share\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "optional metadata to set on share creation\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "either instance of ShareNetwork or text with ID\n", 
                        "name": "share_network"
                    }, 
                    {
                        "doc": "either instance of ShareType or text with ID\n", 
                        "name": "share_type"
                    }, 
                    {
                        "doc": "whether to set share as public or not.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "availability zone of the share\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "ID of the share group to which the share\nshould belong\n", 
                        "name": "share_group_id"
                    }
                ], 
                "title": "Create and shrink a share", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_shrink_share"
            }, 
            "TextArea@default": {
                "introduced_in": null, 
                "description": "This plugin processes complete data and displays of output in HTML report.\n\nExamples of using this plugin in Scenario, for saving output data:\n\n.. code-block:: python\n\n    self.add_output(\n        complete={\"title\": \"Script Inline\",\n                  \"chart_plugin\": \"TextArea\",\n                  \"data\": [\"first output\", \"second output\",\n                           \"third output\"]]})", 
                "parameters": [], 
                "title": "Arbitrary text", 
                "module": "rally.task.processing.charts", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "TextArea"
            }, 
            "Gnocchi.list_capabilities@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List supported aggregation methods.", 
                "module": "rally.plugins.openstack.scenarios.gnocchi.capabilities", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Gnocchi.list_capabilities"
            }, 
            "Authenticate.validate_glance@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.\nIn following we are checking for non-existent image.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Glance Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_glance"
            }, 
            "es_exporter_destination@default": {
                "introduced_in": null, 
                "description": "In case when the destination is ElasticSearch cluster, the version of it\nshould be 2.* or 5.*", 
                "parameters": [], 
                "title": "Validates the destination for ElasticSearch exporter.", 
                "module": "rally.plugins.common.exporters.elastic.exporter", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "es_exporter_destination"
            }, 
            "NeutronBGPVPN.create_and_delete_bgpvpns@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\" and neutron bgpvpn-delete\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Create bgpvpn and delete the bgpvpn.", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_delete_bgpvpns"
            }, 
            "NovaServers.boot_and_live_migrate_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a VM on a compute node available in\nthe availability zone and then migrates the VM to another\ncompute node on the same availability zone.\n\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between VM booting and running live migration\n(of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Specifies the migration type\n", 
                        "name": "block_migration"
                    }, 
                    {
                        "doc": "Specifies whether to allow overcommit\non migrated instance or not\n", 
                        "name": "disk_over_commit"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Live Migrate a server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_live_migrate_server"
            }, 
            "KeystoneBasic.create_tenant_with_users@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "number of users to create for the tenant\n", 
                        "name": "users_per_tenant"
                    }, 
                    {
                        "doc": "Other optional parameters for tenant creation\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone tenant and several users belonging to it.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "keystone tenant instance", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_tenant_with_users"
            }, 
            "required_contexts@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of strings and tuples with context names that\nshould be specified. Tuple represent 'at least one\nof the'.\n", 
                        "name": "contexts"
                    }
                ], 
                "title": "Validator checks if required contexts are specified.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_contexts"
            }, 
            "NeutronLoadbalancerV1.create_and_update_pools@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-pool-create\" and \"neutron lb-pool-update\"\ncommand performance. The scenario creates a pool for every subnet\nand then update those pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options\n", 
                        "name": "pool_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/pools update options", 
                        "name": "pool_update_args"
                    }
                ], 
                "title": "Create pools(v1) and update pools(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_update_pools"
            }, 
            "neutron@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for NeutronClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "neutron"
            }, 
            "CeilometerStats.create_meter_and_get_stats@openstack": {
                "introduced_in": null, 
                "description": "Meter is first created and then statistics is fetched for the same\nusing GET /v2/meters/(meter_name)/statistics.", 
                "parameters": [
                    {
                        "doc": "contains optional arguments to create a meter", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a meter and fetch its statistics.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.stats", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerStats.create_meter_and_get_stats"
            }, 
            "SenlinClusters.create_and_delete_cluster@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"senlin cluster-create\" and \"senlin cluster-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "The capacity or initial number of nodes\nowned by the cluster\n", 
                        "name": "desired_capacity"
                    }, 
                    {
                        "doc": "The minimum number of nodes owned by the cluster\n", 
                        "name": "min_size"
                    }, 
                    {
                        "doc": "The maximum number of nodes owned by the cluster.\n-1 means no limit\n", 
                        "name": "max_size"
                    }, 
                    {
                        "doc": "The timeout value in seconds for cluster creation\n", 
                        "name": "timeout"
                    }, 
                    {
                        "doc": "A set of key value pairs to associate with the cluster", 
                        "name": "metadata"
                    }
                ], 
                "title": "Create a cluster and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.senlin.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "SenlinClusters.create_and_delete_cluster"
            }, 
            "zones@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context to add `zones_per_tenant` zones for each tenant.", 
                "module": "rally.plugins.openstack.context.designate.zones", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "zones_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "zones"
            }, 
            "elastic@default": {
                "introduced_in": null, 
                "description": "The exported data includes:\n\n* Task basic information such as title, description, status,\n  deployment uuid, etc.\n  See rally_task_v1_data index.\n\n* Workload information such as scenario name and configuration, runner\n  type and configuration, time of the start load, success rate, sla\n  details in case of errors, etc.\n  See rally_workload_v1_data index.\n\n* Separate documents for all atomic actions.\n  See rally_atomic_action_data_v1 index.\n\nThe destination can be a remote server. In this case specify it like:\n\n    https://elastic:changeme@example.com\n\nOr we can dump documents to the file. The destination should look like:\n\n    /home/foo/bar.txt\n\nIn case of an empty destination, the http://localhost:9200 destination\nwill be used.", 
                "parameters": [], 
                "title": "Exports task results to the ElasticSearch 2.x or 5.x clusters.", 
                "module": "rally.plugins.common.exporters.elastic.exporter", 
                "platform": "default", 
                "returns": "", 
                "base": "Task Exporter", 
                "schema": null, 
                "name": "elastic"
            }, 
            "ManilaShares.set_and_delete_metadata@openstack": {
                "introduced_in": null, 
                "description": "This requires a share to be created with the shares\ncontext. Additionally, ``sets * set_size`` must be greater\nthan or equal to ``deletes * delete_size``.", 
                "parameters": [
                    {
                        "doc": "how many set_metadata operations to perform\n", 
                        "name": "sets"
                    }, 
                    {
                        "doc": "number of metadata keys to set in each\nset_metadata operation\n", 
                        "name": "set_size"
                    }, 
                    {
                        "doc": "number of metadata keys to delete in each\ndelete_metadata operation\n", 
                        "name": "delete_size"
                    }, 
                    {
                        "doc": "minimal size of metadata key to set\n", 
                        "name": "key_min_length"
                    }, 
                    {
                        "doc": "maximum size of metadata key to set\n", 
                        "name": "key_max_length"
                    }, 
                    {
                        "doc": "minimal size of metadata value to set\n", 
                        "name": "value_min_length"
                    }, 
                    {
                        "doc": "maximum size of metadata value to set", 
                        "name": "value_max_length"
                    }
                ], 
                "title": "Sets and deletes share metadata.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.set_and_delete_metadata"
            }, 
            "CinderVolumes.create_and_delete_snapshot@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between snapshot creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "when set to True, allows snapshot of a volume when\nthe volume is attached to an instance\n", 
                        "name": "force"
                    }, 
                    {
                        "doc": "minimum sleep time between snapshot creation and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between snapshot creation and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a snapshot", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and then delete a volume-snapshot.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_delete_snapshot"
            }, 
            "NeutronBGPVPN.create_and_list_networks_associations@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\",\n\"neutron bgpvpn-net-assoc-create\" and\n\"neutron bgpvpn-net-assoc-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a network and list networks associations.", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_list_networks_associations"
            }, 
            "check_api_versions@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Additional validation for api_versions context", 
                "module": "rally.plugins.openstack.context.api_versions", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "check_api_versions"
            }, 
            "GlanceImages.list_images@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the glance image-list command by listing\nall the images.\n\nSuppose if we have 2 users in context and each has 2 images\nuploaded for them we will be able to test the performance of\nglance image-list command in this case.", 
                "parameters": [], 
                "title": "List all images.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.list_images"
            }, 
            "Authenticate.validate_monasca@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Monasca Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_monasca"
            }, 
            "CeilometerMeters.list_matched_meters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "count of resources in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Get meters that matched fields from context and args.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.meters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerMeters.list_matched_meters"
            }, 
            "NovaHypervisors.statistics_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova hypervisor-stats\" command performance.", 
                "parameters": [], 
                "title": "Get hypervisor statistics over all compute nodes.", 
                "module": "rally.plugins.openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.statistics_hypervisors"
            }, 
            "NeutronNetworks.create_and_update_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then updating all routers.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/routers update options\n", 
                        "name": "router_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and update a given number of routers.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_routers"
            }, 
            "murano_packages@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for uploading applications for murano.", 
                "module": "rally.plugins.openstack.context.murano.murano_packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "app_package"
                    ], 
                    "type": "object", 
                    "properties": {
                        "app_package": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "murano_packages"
            }, 
            "image_command_customizer@openstack": {
                "introduced_in": null, 
                "description": "Run a command specified by configuration to prepare image.\n\nUse this script e.g. to download and install something.", 
                "parameters": [], 
                "title": "Context class for generating image customized by a command execution.", 
                "module": "rally.plugins.openstack.context.vm.image_command_customizer", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "required": [
                        "image", 
                        "flavor"
                    ], 
                    "additionalProperties": false, 
                    "definitions": {
                        "commandPath": {
                            "additionalProperties": false, 
                            "required": [
                                "remote_path"
                            ], 
                            "type": "object", 
                            "properties": {
                                "local_path": {
                                    "type": "string"
                                }, 
                                "command_args": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "remote_path": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }
                            }
                        }, 
                        "scriptInline": {
                            "additionalProperties": false, 
                            "required": [
                                "script_inline", 
                                "interpreter"
                            ], 
                            "type": "object", 
                            "properties": {
                                "interpreter": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "command_args": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "script_inline": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "commandDict": {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/scriptFile"
                                }, 
                                {
                                    "$ref": "#/definitions/scriptInline"
                                }, 
                                {
                                    "$ref": "#/definitions/commandPath"
                                }
                            ]
                        }, 
                        "stringOrStringList": {
                            "anyOf": [
                                {
                                    "type": "string", 
                                    "description": "just a string"
                                }, 
                                {
                                    "items": {
                                        "type": "string"
                                    }, 
                                    "type": "array", 
                                    "description": "just a list of strings"
                                }
                            ]
                        }, 
                        "scriptFile": {
                            "additionalProperties": false, 
                            "required": [
                                "script_file", 
                                "interpreter"
                            ], 
                            "type": "object", 
                            "properties": {
                                "interpreter": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "script_file": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "command_args": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }
                            }
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "username": {
                            "type": "string"
                        }, 
                        "floating_network": {
                            "type": "string"
                        }, 
                        "workers": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "userdata": {
                            "type": "string"
                        }, 
                        "internal_network": {
                            "type": "string"
                        }, 
                        "image": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "command": {
                            "$ref": "#/definitions/commandDict"
                        }, 
                        "flavor": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "password": {
                            "type": "string"
                        }, 
                        "port": {
                            "minimum": 1, 
                            "type": "integer", 
                            "maximum": 65535
                        }
                    }
                }, 
                "name": "image_command_customizer"
            }, 
            "CinderVolumes.create_and_list_snapshots@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "when set to True, allows snapshot of a volume when\nthe volume is attached to an instance\n", 
                        "name": "force"
                    }, 
                    {
                        "doc": "True if detailed information about snapshots\nshould be listed\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "optional args to create a snapshot", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and then list a volume-snapshot.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_list_snapshots"
            }, 
            "NovaServers.resize_server@openstack": {
                "introduced_in": null, 
                "description": "This test will confirm the resize by default,\nor revert the resize if confirm is set to false.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, then resize and delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.resize_server"
            }, 
            "Authenticate.validate_neutron@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Neutron Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_neutron"
            }, 
            "Dummy.failure@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "float iteration sleep time in seconds\n", 
                        "name": "sleep"
                    }, 
                    {
                        "doc": "int iteration number which starts range\nof failed iterations\n", 
                        "name": "from_iteration"
                    }, 
                    {
                        "doc": "int iteration number which ends range of\nfailed iterations\n", 
                        "name": "to_iteration"
                    }, 
                    {
                        "doc": "int cyclic number of iteration which actually raises\nan error in selected range. For example, each=3 will\nraise error in each 3rd iteration.\n", 
                        "name": "each"
                    }
                ], 
                "title": "Raise errors in some iterations.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.failure"
            }, 
            "NeutronNetworks.create_and_update_ports@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron port-create\" and \"neutron port-update\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/ports update request options\n", 
                        "name": "port_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create and update a given number of ports.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_ports"
            }, 
            "KeystoneBasic.create_user_set_enabled_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Initial state of user 'enabled' flag. The user\nwill be created with 'enabled' set to this\nvalue, and then it will be toggled.\n", 
                        "name": "enabled"
                    }, 
                    {
                        "doc": "Other optional parameters to create user.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user, enable or disable it, and delete it.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_user_set_enabled_and_delete"
            }, 
            "NeutronNetworks.set_and_clear_router_gateway@openstack": {
                "introduced_in": null, 
                "description": "create an external network and a router, set external network\ngateway for the router, remove the external network gateway from\nthe router.", 
                "parameters": [
                    {
                        "doc": "True if enable snat\n", 
                        "name": "enable_snat"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Set and Remove the external network gateway from a router.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.set_and_clear_router_gateway"
            }, 
            "CeilometerAlarms.create_alarm_and_get_history@openstack": {
                "introduced_in": null, 
                "description": "This scenario makes following queries:\n\n  *  GET /v2/alarms/{alarm_id}/history\n  *  GET /v2/alarms/{alarm_id}/state\n  *  PUT /v2/alarms/{alarm_id}/state\n\nInitially alarm is created and then get the state of the created alarm\nusing its alarm_id. Then get the history of the alarm. And finally the\nstate of the alarm is updated using given state. meter_name and\nthreshold are required parameters for alarm creation. kwargs stores\nother optional parameters like 'ok_actions', 'project_id' etc that may\nbe passed while alarm creation.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "an alarm state to be set\n", 
                        "name": "state"
                    }, 
                    {
                        "doc": "The number of seconds for which to attempt a\nsuccessful check of the alarm state\n", 
                        "name": "timeout"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm, get and set the state and get the alarm history.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_alarm_and_get_history"
            }, 
            "OSProfiler@default": {
                "introduced_in": null, 
                "description": "This plugin complete data of osprofiler", 
                "parameters": [], 
                "title": "osprofiler content", 
                "module": "rally.plugins.openstack.embedcharts.osprofilerchart", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "OSProfiler"
            }, 
            "NeutronBGPVPN.create_and_list_routers_associations@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\",\n\"neutron bgpvpn-router-assoc-create\" and\n\"neutron bgpvpn-router-assoc-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a router and list routers associations.", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_list_routers_associations"
            }, 
            "NovaAggregates.list_aggregates@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova aggregate-list\" command performance.", 
                "parameters": [], 
                "title": "List all nova aggregates.", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.list_aggregates"
            }, 
            "cluster_templates@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates Magnum cluster template.", 
                "module": "rally.plugins.openstack.context.magnum.cluster_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "image_id", 
                        "external_network_id", 
                        "coe"
                    ], 
                    "type": "object", 
                    "properties": {
                        "docker_storage_driver": {
                            "type": "string"
                        }, 
                        "http_proxy": {
                            "type": "string"
                        }, 
                        "docker_volume_size": {
                            "type": "integer"
                        }, 
                        "https_proxy": {
                            "type": "string"
                        }, 
                        "no_proxy": {
                            "type": "string"
                        }, 
                        "external_network_id": {
                            "type": "string"
                        }, 
                        "labels": {
                            "type": "string"
                        }, 
                        "dns_nameserver": {
                            "type": "string"
                        }, 
                        "server_type": {
                            "type": "string"
                        }, 
                        "network_driver": {
                            "type": "string"
                        }, 
                        "fixed_network": {
                            "type": "string"
                        }, 
                        "image_id": {
                            "type": "string"
                        }, 
                        "tls_disabled": {
                            "type": "boolean"
                        }, 
                        "registry_enabled": {
                            "type": "boolean"
                        }, 
                        "coe": {
                            "type": "string"
                        }, 
                        "flavor_id": {
                            "type": "string"
                        }, 
                        "volume_driver": {
                            "type": "string"
                        }, 
                        "master_lb_enabled": {
                            "type": "boolean"
                        }, 
                        "public": {
                            "type": "boolean"
                        }, 
                        "fixed_subnet": {
                            "type": "string"
                        }, 
                        "master_flavor_id": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "cluster_templates"
            }, 
            "GlanceImages.create_image_and_boot_instances@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }, 
                    {
                        "doc": "Nova flavor to be used to launch an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "number of Nova servers to boot\n", 
                        "name": "number_instances"
                    }, 
                    {
                        "doc": "optional parameters to boot server\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional parameters to create server (deprecated)", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an image and boot several instances from it.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_image_and_boot_instances"
            }, 
            "ManilaShares.attach_security_service_to_share_network@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "type of security service to use.\nShould be one of following: 'ldap', 'kerberos' or\n'active_directory'.\n", 
                        "name": "security_service_type"
                    }
                ], 
                "title": "Attaches security service to share network.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.attach_security_service_to_share_network"
            }, 
            "monasca@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MonascaClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "monasca"
            }, 
            "HeatStacks.create_stack_and_show_output_via_API@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-show", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "the stack output key that corresponds to\nthe scaling webhook\n", 
                        "name": "output_key"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and show output by using old algorithm.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_show_output_via_API"
            }, 
            "periodic@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Periodically triggers hook with specified range and step.", 
                "module": "rally.plugins.common.hook.triggers.periodic", 
                "platform": "default", 
                "returns": "", 
                "base": "Hook Trigger", 
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "oneOf": [
                        {
                            "additionalProperties": false, 
                            "required": [
                                "unit", 
                                "step"
                            ], 
                            "description": "Periodically triage hook based on elapsed time after start of workload.", 
                            "properties": {
                                "start": {
                                    "minimum": 0, 
                                    "type": "integer"
                                }, 
                                "step": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "end": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "unit": {
                                    "enum": [
                                        "time"
                                    ]
                                }
                            }
                        }, 
                        {
                            "additionalProperties": false, 
                            "required": [
                                "unit", 
                                "step"
                            ], 
                            "description": "Periodically triage hook based on iterations.", 
                            "properties": {
                                "start": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "step": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "end": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "unit": {
                                    "enum": [
                                        "iteration"
                                    ]
                                }
                            }
                        }
                    ]
                }, 
                "name": "periodic"
            }, 
            "CinderVolumes.create_and_restore_volume_backup@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "if True, the volume and the volume backup will\nbe deleted after creation.\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Restore volume backup.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_restore_volume_backup"
            }, 
            "CinderVolumes.create_from_volume_and_delete_volume@openstack": {
                "introduced_in": null, 
                "description": "Scenario for testing volume clone.Optional 'min_sleep' and 'max_sleep'\nparameters allow the scenario to simulate a pause between volume\ncreation and deletion (of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "volume size (in GB), or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\nShould be equal or bigger source volume size\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "minimum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create volume from volume and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_from_volume_and_delete_volume"
            }, 
            "required_clients@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of client components names\n", 
                        "name": "components"
                    }, 
                    {
                        "doc": "optional parameters:\nadmin - bool, whether to use admin clients\n", 
                        "name": "**kwargs"
                    }
                ], 
                "title": "Validator checks if specified OpenStack clients are available.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_clients"
            }, 
            "NeutronLoadbalancerV1.create_and_list_pools@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-pool-list\" command performance.\nThe scenario creates a pool for every subnet and then lists pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options", 
                        "name": "pool_create_args"
                    }
                ], 
                "title": "Create a pool(v1) and then list pools(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_list_pools"
            }, 
            "NovaFlavors.create_and_list_flavor_access@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a non-public flavor and list its access rules", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_and_list_flavor_access"
            }, 
            "CinderVolumes.create_and_get_volume@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder show\" command performance.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume and get the volume.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_get_volume"
            }, 
            "check_cleanup_resources@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "describes access level to resource", 
                        "name": "admin_required"
                    }
                ], 
                "title": "Validates that openstack resource managers exist", 
                "module": "rally.plugins.openstack.context.cleanup.base", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "check_cleanup_resources"
            }, 
            "glance@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for GlanceClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "glance"
            }, 
            "NovaServers.boot_server_from_volume@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and then a server.\nAssumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "True if NICs should be assigned\n", 
                        "name": "auto_assign_nic"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from volume.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume"
            }, 
            "NeutronLoadbalancerV2.create_and_list_loadbalancers@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lbaas-loadbalancer-list\" command performance.\nThe scenario creates a loadbalancer for every subnet and then lists\nloadbalancers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lbaas/loadbalancers\nrequest options\n", 
                        "name": "lb_create_args"
                    }
                ], 
                "title": "Create a loadbalancer(v2) and then list loadbalancers(v2).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v2", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV2.create_and_list_loadbalancers"
            }, 
            "NovaFlavors.create_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a flavor.", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_flavor"
            }, 
            "NovaImages.list_images@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova image-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the image listing\nshould contain detailed information\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Optional additional arguments for image listing", 
                        "name": "kwargs"
                    }
                ], 
                "title": "[DEPRECATED] List all images.", 
                "module": "rally.plugins.openstack.scenarios.nova.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaImages.list_images"
            }, 
            "sahara_output_data_sources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up Output Data Sources for an EDP job.", 
                "module": "rally.plugins.openstack.context.sahara.sahara_output_data_sources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "output_type", 
                        "output_url_prefix"
                    ], 
                    "type": "object", 
                    "properties": {
                        "output_type": {
                            "enum": [
                                "swift", 
                                "hdfs"
                            ]
                        }, 
                        "output_url_prefix": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_output_data_sources"
            }, 
            "NeutronSecurityGroup.create_and_show_security_group@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }
                ], 
                "title": "Create and show Neutron security-group.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_show_security_group"
            }, 
            "Quotas.cinder_update_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update and Delete quotas for Cinder.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.cinder_update_and_delete"
            }, 
            "SwiftObjects.create_container_and_object_then_list_objects@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int, number of objects to upload\n", 
                        "name": "objects_per_container"
                    }, 
                    {
                        "doc": "int, temporary local object size\n", 
                        "name": "object_size"
                    }, 
                    {
                        "doc": "dict, optional parameters to create container", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create container and objects then list all objects.", 
                "module": "rally.plugins.openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.create_container_and_object_then_list_objects"
            }, 
            "Quotas.nova_update_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update and delete quotas for Nova.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.nova_update_and_delete"
            }, 
            "K8sPods.create_rcs@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "manifest files use to create the rcs", 
                        "name": "manifests"
                    }
                ], 
                "title": "create rcs and wait for them to be ready.", 
                "module": "rally.plugins.openstack.scenarios.magnum.k8s_pods", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "K8sPods.create_rcs"
            }, 
            "CinderVolumeTypes.create_volume_type_and_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates a volume type, then creates an encryption\ntype for the volume type.", 
                "parameters": [
                    {
                        "doc": "The encryption type specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "create_specs"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }, 
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create encryption type", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_volume_type_and_encryption_type"
            }, 
            "CinderVolumes.create_and_extend_volume@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "volume new size (in GB) or\ndictionary, must contain two values:\n     min - minimum size volumes will be created as;\n     max - maximum size volumes will be created as.\nto extend.\nNotice: should be bigger volume size\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "minimum sleep time between volume extension and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between volume extension and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to extend the volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and extend a volume and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_extend_volume"
            }, 
            "NovaServers.boot_and_rebuild_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a VM, then rebuilds that VM with a\ndifferent image.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "from_image"
                    }, 
                    {
                        "doc": "image to be used to rebuild the instance\n", 
                        "name": "to_image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Rebuild a server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_rebuild_server"
            }, 
            "NeutronNetworks.create_and_list_ports@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create and a given number of ports and list all ports.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_ports"
            }, 
            "check_rps@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Additional schema validation for rps runner", 
                "module": "rally.plugins.common.runners.rps", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "check_rps"
            }, 
            "StackedArea@default": {
                "introduced_in": null, 
                "description": "This plugin processes additive data and displays it in HTML report\nas stacked area with X axis bound to iteration number.\nComplete output data is displayed as stacked area as well, without\nany processing.\n\nKeys \"description\", \"label\" and \"axis_label\" are optional.\n\nExamples of using this plugin in Scenario, for saving output data:\n\n.. code-block:: python\n\n    self.add_output(\n        additive={\"title\": \"Additive data as stacked area\",\n                  \"description\": \"Iterations trend for foo and bar\",\n                  \"chart_plugin\": \"StackedArea\",\n                  \"data\": [[\"foo\", 12], [\"bar\", 34]]},\n        complete={\"title\": \"Complete data as stacked area\",\n                  \"description\": \"Data is shown as stacked area, as-is\",\n                  \"chart_plugin\": \"StackedArea\",\n                  \"data\": [[\"foo\", [[0, 5], [1, 42], [2, 15], [3, 7]]],\n                           [\"bar\", [[0, 2], [1, 1.3], [2, 5], [3, 9]]]],\n                  \"label\": \"Y-axis label text\",\n                  \"axis_label\": \"X-axis label text\"})", 
                "parameters": [], 
                "title": "Display results as stacked area.", 
                "module": "rally.task.processing.charts", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "StackedArea"
            }, 
            "ec2@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for EC2Client which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "ec2"
            }, 
            "CinderVolumeTypes.create_and_get_volume_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a volume Type, then get the details of the type.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_get_volume_type"
            }, 
            "nova_flavor@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Nova's flavor ID by name or regexp.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "nova_flavor"
            }, 
            "event@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Triggers hook on specified event and list of values.", 
                "module": "rally.plugins.common.hook.triggers.event", 
                "platform": "default", 
                "returns": "", 
                "base": "Hook Trigger", 
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "oneOf": [
                        {
                            "additionalProperties": false, 
                            "required": [
                                "unit", 
                                "at"
                            ], 
                            "description": "Triage hook based on specified seconds after start of workload.", 
                            "properties": {
                                "at": {
                                    "minItems": 1, 
                                    "uniqueItems": true, 
                                    "type": "array", 
                                    "items": {
                                        "minimum": 0, 
                                        "type": "integer"
                                    }
                                }, 
                                "unit": {
                                    "enum": [
                                        "time"
                                    ]
                                }
                            }
                        }, 
                        {
                            "additionalProperties": false, 
                            "required": [
                                "unit", 
                                "at"
                            ], 
                            "description": "Triage hook based on specific iterations.", 
                            "properties": {
                                "at": {
                                    "minItems": 1, 
                                    "uniqueItems": true, 
                                    "type": "array", 
                                    "items": {
                                        "minimum": 1, 
                                        "type": "integer"
                                    }
                                }, 
                                "unit": {
                                    "enum": [
                                        "iteration"
                                    ]
                                }
                            }
                        }
                    ]
                }, 
                "name": "event"
            }, 
            "MuranoPackages.import_and_delete_package@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"murano import-package\" and \"murano package-delete\"\ncommands performance.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared) and deletes it.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }
                ], 
                "title": "Import Murano package and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.import_and_delete_package"
            }, 
            "DesignateBasic.create_and_list_records@openstack": {
                "introduced_in": null, 
                "description": "If you have only 1 user in your context, you will\nadd 1 record on every iteration. So you will have more\nand more records and will be able to measure the\nperformance of the \"designate record-list\" command depending on\nthe number of domains/records owned by users.", 
                "parameters": [
                    {
                        "doc": "Records to create pr domain.", 
                        "name": "records_per_domain"
                    }
                ], 
                "title": "Create and then list records.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_records"
            }, 
            "CinderVolumeTypes.create_and_delete_volume_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create and delete a volume Type.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_delete_volume_type"
            }, 
            "CinderVolumeTypes.create_volume_type_add_and_list_type_access@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates a private volume type, then add project\naccess and list project access to it.", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Add and list volume type access for the given project.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_volume_type_add_and_list_type_access"
            }, 
            "NovaHosts.list_and_get_hosts@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova host-describe\" command performance.", 
                "parameters": [
                    {
                        "doc": "List nova hosts in an availability-zone.\nNone (default value) means list hosts in all\navailability-zones\n", 
                        "name": "zone"
                    }
                ], 
                "title": "List all nova hosts, and get detailed information for compute hosts.", 
                "module": "rally.plugins.openstack.scenarios.nova.hosts", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "removed_in": "0.12.1", 
                "name": "NovaHosts.list_and_get_hosts"
            }, 
            "CinderVolumeTypes.create_get_and_delete_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates an encryption type for a volome\ntype created in the context, then gets detailed information of\nthe created encryption type, finally deletes the created\nencryption type.", 
                "parameters": [
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }
                ], 
                "title": "Create get and delete an encryption type", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_get_and_delete_encryption_type"
            }, 
            "KeystoneBasic.get_entities@openstack": {
                "introduced_in": null, 
                "description": "An ephemeral tenant, user, and role are each created. By\ndefault, fetches the 'keystone' service. This can be\noverridden (for instance, to get the 'Identity Service'\nservice on older OpenStack), or None can be passed explicitly\nto service_name to create a new service and then query it by\nID.", 
                "parameters": [
                    {
                        "doc": "The name of the service to get by ID; or\nNone, to create an ephemeral service and\nget it by ID.\n", 
                        "name": "service_name"
                    }
                ], 
                "title": "Get instance of a tenant, user, role and service by id's.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.get_entities"
            }, 
            "CinderVolumes.create_snapshot_and_attach_volume@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Name of volume type to use\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "Volume size - dictionary, contains two values:\n   min - minimum size volumes will be created as;\n   max - maximum size volumes will be created as.\ndefault values: {\"min\": 1, \"max\": 5}\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "create_vm_params"
                    }, 
                    {
                        "doc": "Optional parameters used during volume\nsnapshot creation.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create vm, volume, snapshot and attach/detach volume.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_snapshot_and_attach_volume"
            }, 
            "watcher_strategy@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Watcher strategy ID by it's name.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "watcher_strategy"
            }, 
            "HeatStacks.create_snapshot_restore_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat stack-snapshot\nheat stack-restore\nheat stack-delete", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create, snapshot-restore and then delete a stack.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_snapshot_restore_delete_stack"
            }, 
            "NovaServers.shelve_and_unshelve_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server, shelve, unshelve and then delete it", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.shelve_and_unshelve_server"
            }, 
            "NeutronLoadbalancerV1.create_and_list_healthmonitors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-healthmonitor-list\" command performance. This\nscenario creates healthmonitors and lists them.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/healthmonitors request\noptions\n", 
                        "name": "healthmonitor_create_args"
                    }
                ], 
                "title": "Create healthmonitors(v1) and list healthmonitors(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_list_healthmonitors"
            }, 
            "CeilometerAlarms.create_and_delete_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test DELETE /v2/alarms/(alarm_id)\nInitially alarm is created and then the created alarm is deleted using\nits alarm_id. meter_name and threshold are required parameters\nfor alarm creation. kwargs stores other optional parameters like\n'ok_actions', 'project_id' etc that may be passed while alarm creation.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and delete the newly created alarm.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_delete_alarm"
            }, 
            "Quotas.nova_get@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Get quotas for nova.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.nova_get"
            }, 
            "GlanceImages.create_and_deactivate_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images", 
                        "name": "min_ram"
                    }
                ], 
                "title": "Create an image, then deactivate it.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_deactivate_image"
            }, 
            "senlin@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for SenlinClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "senlin"
            }, 
            "html-static@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Generates task report in HTML format with embedded JS/CSS.", 
                "module": "rally.plugins.common.exporters.html", 
                "platform": "default", 
                "returns": "", 
                "base": "Task Exporter", 
                "schema": null, 
                "name": "html-static"
            }, 
            "workbook_contains_workflow@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "parameter containing the workbook definition\n", 
                        "name": "workbook_param"
                    }, 
                    {
                        "doc": "parameter containing the workflow name", 
                        "name": "workflow_param"
                    }
                ], 
                "title": "Validate that workflow exist in workbook when workflow is passed", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "workbook_contains_workflow"
            }, 
            "sys_call@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Performs system call.", 
                "module": "rally.plugins.common.hook.sys_call", 
                "platform": "default", 
                "returns": "", 
                "base": "Hook Action", 
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "string", 
                    "description": "Command to execute."
                }, 
                "name": "sys_call"
            }, 
            "NovaFlavors.create_and_delete_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create flavor and delete the flavor.", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_and_delete_flavor"
            }, 
            "quotas@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Sets OpenStack Tenants quotas.", 
                "module": "rally.plugins.openstack.context.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "neutron": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "subnet": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "network": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "floatingip": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "health_monitor": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_group_rule": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "vip": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_group": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "router": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "port": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "pool": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "cinder": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "backups": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "backup_gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "volumes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "snapshots": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "manila": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "snapshot_gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "snapshots": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "shares": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "share_networks": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "nova": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "metadata_items": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "injected_file_content_bytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "server_group_members": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "server_groups": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "ram": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "floating_ips": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "key_pairs": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "instances": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_group_rules": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "injected_files": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "cores": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "fixed_ips": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "injected_file_path_bytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_groups": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "designate": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "domains": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "domain_recordsets": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "recordset_records": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "domain_records": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }, 
                "name": "quotas"
            }, 
            "CinderVolumeTypes.create_and_update_volume_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "if True, can update name by generating random name.\nif False, don't update name.\n", 
                        "name": "update_name"
                    }, 
                    {
                        "doc": "update Description of the volume type\n", 
                        "name": "update_description"
                    }, 
                    {
                        "doc": "update Volume type visibility", 
                        "name": "update_is_public"
                    }
                ], 
                "title": "create a volume type, then update the type.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_update_volume_type"
            }, 
            "Authenticate.validate_nova@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Nova Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_nova"
            }, 
            "CeilometerResource.get_tenant_resources@openstack": {
                "introduced_in": null, 
                "description": "This scenario retrieves information about tenant resources using\nGET /v2/resources/(resource_id)", 
                "parameters": [], 
                "title": "Get all tenant resources.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.resources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerResource.get_tenant_resources"
            }, 
            "ec2_image@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find EC2 image ID.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "ec2_image"
            }, 
            "image_valid_on_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines which variable should be used\nto get flavor id value.\n", 
                        "name": "flavor_param"
                    }, 
                    {
                        "doc": "defines which variable should be used\nto get image id value.\n", 
                        "name": "image_param"
                    }, 
                    {
                        "doc": "flag to indicate whether to validate flavor's\ndisk. Should be True if instance is booted from\nimage. Should be False if instance is booted\nfrom volume. Default value is True.\n", 
                        "name": "validate_disk"
                    }, 
                    {
                        "doc": "flag what indicate whether to validate image\nor not.\n", 
                        "name": "fail_on_404_image"
                    }
                ], 
                "title": "Returns validator for image could be used for current flavor", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "image_valid_on_flavor"
            }, 
            "file@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Return content of the file by its path.", 
                "module": "rally.plugins.common.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "file"
            }, 
            "CinderVolumeTypes.create_and_set_volume_type_keys@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "A dict of key/value pairs to be set\n", 
                        "name": "volume_type_key"
                    }, 
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create and set a volume type's extra specs.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_set_volume_type_keys"
            }, 
            "CinderVolumes.create_and_update_volume@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "dict, to be used to create volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "dict, to be used to update volume\nupdate_volume_kwargs[\"update_name\"]=True, if updating the\nname of volume.\nupdate_volume_kwargs[\"description\"]=\"desp\", if updating the\ndescription of volume.\n", 
                        "name": "update_volume_kwargs"
                    }
                ], 
                "title": "Create a volume and update its name and description.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_update_volume"
            }, 
            "CinderVolumes.create_volume_and_update_readonly_flag@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "The value to indicate whether to update volume to\nread-only access mode\n", 
                        "name": "read_only"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume and then update its readonly flag.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_and_update_readonly_flag"
            }, 
            "rps@default": {
                "introduced_in": null, 
                "description": "Every single scenario iteration is executed with specified frequency\n(runs per second) in a pool of processes. The scenario will be\nlaunched for a fixed number of times in total (specified in the config).\n\nAn example of a rps scenario is booting 1 VM per second. This\nexecution type is thus very helpful in understanding the maximal load that\na certain cloud can handle.", 
                "parameters": [], 
                "title": "Scenario runner that does the job with specified frequency.", 
                "module": "rally.plugins.common.runners.rps", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario Runner", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "times", 
                        "rps"
                    ], 
                    "type": "object", 
                    "properties": {
                        "max_cpu_count": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "max_concurrency": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "rps": {
                            "anyOf": [
                                {
                                    "exclusiveMinimum": true, 
                                    "minimum": 0, 
                                    "type": "number", 
                                    "description": "Generate constant requests per second during the whole workload."
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "start", 
                                        "end", 
                                        "step"
                                    ], 
                                    "type": "object", 
                                    "description": "Increase requests per second for specified value each time after a certain number of seconds.", 
                                    "properties": {
                                        "duration": {
                                            "minimum": 1, 
                                            "type": "number"
                                        }, 
                                        "start": {
                                            "minimum": 1, 
                                            "type": "number"
                                        }, 
                                        "step": {
                                            "minimum": 1, 
                                            "type": "number"
                                        }, 
                                        "end": {
                                            "minimum": 1, 
                                            "type": "number"
                                        }
                                    }
                                }
                            ]
                        }, 
                        "timeout": {
                            "type": "number"
                        }, 
                        "times": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "rps"
            }, 
            "api_versions@openstack": {
                "introduced_in": null, 
                "description": "Some OpenStack services support several API versions. To recognize\nthe endpoints of each version, separate service types are provided in\nKeystone service catalog.\n\nRally has the map of default service names - service types. But since\nservice type is an entity, which can be configured manually by admin(\nvia keystone api) without relation to service name, such map can be\ninsufficient.\n\nAlso, Keystone service catalog does not provide a map types to name\n(this statement is true for keystone < 3.3 ).\n\nThis context was designed for not-default service types and not-default\nAPI versions usage.\n\nAn example of specifying API version:\n\n.. code-block:: json\n\n    # In this example we will launch NovaKeypair.create_and_list_keypairs\n    # scenario on 2.2 api version.\n    {\n        \"NovaKeypair.create_and_list_keypairs\": [\n            {\n                \"args\": {\n                    \"key_type\": \"x509\"\n                },\n                \"runner\": {\n                    \"type\": \"constant\",\n                    \"times\": 10,\n                    \"concurrency\": 2\n                },\n                \"context\": {\n                    \"users\": {\n                        \"tenants\": 3,\n                        \"users_per_tenant\": 2\n                    },\n                    \"api_versions\": {\n                        \"nova\": {\n                            \"version\": 2.2\n                        }\n                    }\n                }\n            }\n        ]\n    }\n\nAn example of specifying API version along with service type:\n\n.. code-block:: json\n\n    # In this example we will launch CinderVolumes.create_and_attach_volume\n    # scenario on Cinder V2\n    {\n        \"CinderVolumes.create_and_attach_volume\": [\n            {\n                \"args\": {\n                    \"size\": 10,\n                    \"image\": {\n                        \"name\": \"^cirros.*-disk$\"\n                    },\n                    \"flavor\": {\n                        \"name\": \"m1.tiny\"\n                    },\n                    \"create_volume_params\": {\n                        \"availability_zone\": \"nova\"\n                    }\n                },\n                \"runner\": {\n                    \"type\": \"constant\",\n                    \"times\": 5,\n                    \"concurrency\": 1\n                },\n                \"context\": {\n                    \"users\": {\n                        \"tenants\": 2,\n                        \"users_per_tenant\": 2\n                    },\n                    \"api_versions\": {\n                        \"cinder\": {\n                            \"version\": 2,\n                            \"service_type\": \"volumev2\"\n                        }\n                    }\n                }\n            }\n        ]\n    }\n\nAlso, it possible to use service name as an identifier of service endpoint,\nbut an admin user is required (Keystone can return map of service\nnames - types, but such API is permitted only for admin). An example:\n\n.. code-block:: json\n\n    # Similar to the previous example, but `service_name` argument is used\n    # instead of `service_type`\n    {\n        \"CinderVolumes.create_and_attach_volume\": [\n            {\n                \"args\": {\n                    \"size\": 10,\n                    \"image\": {\n                        \"name\": \"^cirros.*-disk$\"\n                    },\n                    \"flavor\": {\n                        \"name\": \"m1.tiny\"\n                    },\n                    \"create_volume_params\": {\n                        \"availability_zone\": \"nova\"\n                    }\n                },\n                \"runner\": {\n                    \"type\": \"constant\",\n                    \"times\": 5,\n                    \"concurrency\": 1\n                },\n                \"context\": {\n                    \"users\": {\n                        \"tenants\": 2,\n                        \"users_per_tenant\": 2\n                    },\n                    \"api_versions\": {\n                        \"cinder\": {\n                            \"version\": 2,\n                            \"service_name\": \"cinderv2\"\n                        }\n                    }\n                }\n            }\n        ]\n    }", 
                "parameters": [], 
                "title": "Context for specifying OpenStack clients versions and service types.", 
                "module": "rally.plugins.openstack.context.api_versions", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "patternProperties": {
                        "^[a-z]+$": {
                            "oneOf": [
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "version"
                                    ], 
                                    "description": "version only", 
                                    "properties": {
                                        "version": {
                                            "anyOf": [
                                                {
                                                    "type": "string", 
                                                    "description": "a string-like version."
                                                }, 
                                                {
                                                    "type": "number", 
                                                    "description": "a number-like version."
                                                }
                                            ]
                                        }
                                    }
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "service_name"
                                    ], 
                                    "description": "version and service_name", 
                                    "properties": {
                                        "service_name": {
                                            "type": "string"
                                        }, 
                                        "version": {
                                            "anyOf": [
                                                {
                                                    "type": "string", 
                                                    "description": "a string-like version."
                                                }, 
                                                {
                                                    "type": "number", 
                                                    "description": "a number-like version."
                                                }
                                            ]
                                        }
                                    }
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "service_type"
                                    ], 
                                    "description": "version and service_type", 
                                    "properties": {
                                        "service_type": {
                                            "type": "string"
                                        }, 
                                        "version": {
                                            "anyOf": [
                                                {
                                                    "type": "string", 
                                                    "description": "a string-like version."
                                                }, 
                                                {
                                                    "type": "number", 
                                                    "description": "a number-like version."
                                                }
                                            ]
                                        }
                                    }
                                }
                            ], 
                            "type": "object"
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "minProperties": 1
                }, 
                "name": "api_versions"
            }, 
            "enum@default": {
                "introduced_in": null, 
                "description": "Ensure a parameter has the right value. This value need to be defined\nin a list.", 
                "parameters": [
                    {
                        "doc": "Name of parameter to validate\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "List of values accepted\n", 
                        "name": "values"
                    }, 
                    {
                        "doc": "Allow to accept optional parameter\n", 
                        "name": "missed"
                    }, 
                    {
                        "doc": "Ignore case in enum values", 
                        "name": "case_insensitive"
                    }
                ], 
                "title": "Checks that parameter is in a list.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "enum"
            }, 
            "SaharaNodeGroupTemplates.create_delete_node_group_templates@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates and deletes two most common types of\nNode Group Templates.\n\nBy default the templates are created for the vanilla Hadoop\nprovisioning plugin using the version 1.2.1", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Create and delete Sahara Node Group Templates.", 
                "module": "rally.plugins.openstack.scenarios.sahara.node_group_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SaharaNodeGroupTemplates.create_delete_node_group_templates"
            }, 
            "outliers@default": {
                "introduced_in": null, 
                "description": "The outliers are detected automatically using the computation of the mean\nand standard deviation (std) of the data.", 
                "parameters": [], 
                "title": "Limit the number of outliers (iterations that take too much time).", 
                "module": "rally.plugins.common.sla.outliers", 
                "platform": "default", 
                "returns": "", 
                "base": "SLA", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "max": {
                            "minimum": 0, 
                            "type": "integer"
                        }, 
                        "min_iterations": {
                            "minimum": 3, 
                            "type": "integer"
                        }, 
                        "sigmas": {
                            "exclusiveMinimum": true, 
                            "minimum": 0.0, 
                            "type": "number"
                        }
                    }
                }, 
                "name": "outliers"
            }, 
            "NovaKeypair.create_and_list_keypairs@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates a keypair and then lists all keypairs.", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keypair with random name and list keypairs.", 
                "module": "rally.plugins.openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.create_and_list_keypairs"
            }, 
            "NovaServers.boot_server_from_volume_and_live_migrate@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and a server booted from\nthe volume on a compute node available in the availability zone and\nthen migrates the VM to another compute node on the same availability\nzone.\n\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between VM booting and running live migration\n(of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "Specifies the migration type\n", 
                        "name": "block_migration"
                    }, 
                    {
                        "doc": "Specifies whether to allow overcommit\non migrated instance or not\n", 
                        "name": "disk_over_commit"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from volume and then migrate it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_and_live_migrate"
            }, 
            "CinderQos.create_and_list_qos@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation", 
                        "name": "read_iops_sec"
                    }
                ], 
                "title": "Create a qos, then list all qos.", 
                "module": "rally.plugins.openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_and_list_qos"
            }, 
            "HeatStacks.create_update_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"heat stack-create\", \"heat stack-update\"\nand \"heat stack-delete\" commands performance.", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "path to updated stack template file\n", 
                        "name": "updated_template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "parameters to use in updated heat template\nIf not specified then parameters will be\nused instead\n", 
                        "name": "updated_parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "files used in updated template. If not specified\nfiles value will be used instead\n", 
                        "name": "updated_files"
                    }, 
                    {
                        "doc": "stack environment definition\n", 
                        "name": "environment"
                    }, 
                    {
                        "doc": "environment definition for updated stack", 
                        "name": "updated_environment"
                    }
                ], 
                "title": "Create, update and then delete a stack.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_update_delete_stack"
            }, 
            "profiles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context creates a temporary profile for Senlin test.", 
                "module": "rally.plugins.openstack.context.senlin.profiles", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "type", 
                        "version", 
                        "properties"
                    ], 
                    "type": "object", 
                    "properties": {
                        "version": {
                            "type": "string"
                        }, 
                        "type": {
                            "type": "string"
                        }, 
                        "properties": {
                            "additionalProperties": true, 
                            "type": "object"
                        }
                    }
                }, 
                "name": "profiles"
            }, 
            "NovaServers.boot_server_and_list_interfaces@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova boot\" and \"nova interface-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "ID of the image to be used for server creation\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "ID of the flavor to be used for server creation\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional arguments for booting the instance", 
                        "name": "**kwargs"
                    }
                ], 
                "title": "Boot a server and list interfaces attached to it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_and_list_interfaces"
            }, 
            "Dummy.dummy_random_fail_in_atomic@default": {
                "introduced_in": null, 
                "description": "Can be used to test atomic actions\nfailures processing.", 
                "parameters": [
                    {
                        "doc": "Probability with which atomic actions\nfail in this dummy scenario (0 <= p <= 1)\n", 
                        "name": "exception_probability"
                    }
                ], 
                "title": "Dummy.dummy_random_fail_in_atomic in dummy actions.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy_random_fail_in_atomic"
            }, 
            "Dummy.dummy_timed_atomic_actions@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int number of atomic actions to create\n", 
                        "name": "number_of_actions"
                    }, 
                    {
                        "doc": "int multiplier for number of seconds to sleep", 
                        "name": "sleep_factor"
                    }
                ], 
                "title": "Run some sleepy atomic actions for SLA atomic action tests.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy_timed_atomic_actions"
            }, 
            "murano@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MuranoClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "murano"
            }, 
            "KeystoneBasic.create_and_delete_role@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create a user role and delete it.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_delete_role"
            }, 
            "heat_dataplane@openstack": {
                "introduced_in": null, 
                "description": "This context will create stacks by given template for each tenant and\nadd details to context. Following details will be added:\n\n* id of stack;\n* template file contents;\n* files dictionary;\n* stack parameters;\n\nHeat template should define a \"gate\" node which will interact with Rally\nby ssh and workload nodes by any protocol. To make this possible heat\ntemplate should accept the following parameters:\n\n* network_id: id of public network\n* router_id: id of external router to connect \"gate\" node\n* key_name: name of nova ssh keypair to use for \"gate\" node", 
                "parameters": [], 
                "title": "Context class for create stack by given template.", 
                "module": "rally.plugins.openstack.context.dataplane.heat", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "files": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "context_parameters": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "parameters": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "template": {
                            "oneOf": [
                                {
                                    "type": "string", 
                                    "description": ""
                                }, 
                                {
                                    "minItems": 2, 
                                    "items": {
                                        "type": "string"
                                    }, 
                                    "type": "array", 
                                    "description": "", 
                                    "maxItems": 2
                                }
                            ]
                        }, 
                        "stacks_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "heat_dataplane"
            }, 
            "CinderVolumes.create_volume_and_clone@openstack": {
                "introduced_in": null, 
                "description": "This creates a volume, then clone it to anothor volume,\nand then clone the new volume to next volume...\n\n   1. create source volume (from image)\n   2. clone source volume to volume1\n   3. clone volume1 to volume2\n   4. clone volume2 to volume3\n   5. ...", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create initial volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "amount of nested levels\n", 
                        "name": "nested_level"
                    }, 
                    {
                        "doc": "optional args to create volumes", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume, then clone it to another volume.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_and_clone"
            }, 
            "jsonschema@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "JSON schema validator", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "jsonschema"
            }, 
            "HeatStacks.create_and_list_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"heat stack-create\" and \"heat stack-list\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create a stack and then list all stacks.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_and_list_stack"
            }, 
            "DesignateBasic.create_and_delete_domain@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting domains\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then delete a domain.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_domain"
            }, 
            "KeystoneBasic.create_and_delete_ec2credential@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create and delete keystone ec2-credential.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_delete_ec2credential"
            }, 
            "CinderVolumes.modify_volume_metadata@openstack": {
                "introduced_in": null, 
                "description": "This requires a volume to be created with the volumes\ncontext. Additionally, ``sets * set_size`` must be greater\nthan or equal to ``deletes * delete_size``.", 
                "parameters": [
                    {
                        "doc": "how many set_metadata operations to perform\n", 
                        "name": "sets"
                    }, 
                    {
                        "doc": "number of metadata keys to set in each\nset_metadata operation\n", 
                        "name": "set_size"
                    }, 
                    {
                        "doc": "how many delete_metadata operations to perform\n", 
                        "name": "deletes"
                    }, 
                    {
                        "doc": "number of metadata keys to delete in each\ndelete_metadata operation\n", 
                        "name": "delete_size"
                    }
                ], 
                "title": "Modify a volume's metadata.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.modify_volume_metadata"
            }, 
            "KeystoneBasic.create_user@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters to create users like\n\"tenant_id\", \"enabled\".\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user with random name.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_user"
            }, 
            "MistralWorkbooks.create_workbook@openstack": {
                "introduced_in": null, 
                "description": "This scenario is a very useful tool to measure the\n\"mistral workbook-create\" and \"mistral workbook-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "string (yaml string) representation of given\nfile content (Mistral workbook definition)\n", 
                        "name": "definition"
                    }, 
                    {
                        "doc": "if False than it allows to check performance\nin \"create only\" mode.\n", 
                        "name": "do_delete"
                    }
                ], 
                "title": "Scenario tests workbook creation and deletion.", 
                "module": "rally.plugins.openstack.scenarios.mistral.workbooks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralWorkbooks.create_workbook"
            }, 
            "required_cinder_services@openstack": {
                "introduced_in": null, 
                "description": "It uses Cinder client with admin permissions to call\n'cinder service-list' call", 
                "parameters": [
                    {
                        "doc": "Cinder service name", 
                        "name": "services"
                    }
                ], 
                "title": "Validator checks that specified Cinder service is available.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_cinder_services"
            }, 
            "sahara_cluster@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up the Cluster an EDP job.", 
                "module": "rally.plugins.openstack.context.sahara.sahara_cluster", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "plugin_name", 
                        "hadoop_version", 
                        "workers_count", 
                        "master_flavor_id", 
                        "worker_flavor_id"
                    ], 
                    "type": "object", 
                    "properties": {
                        "workers_count": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "worker_flavor_id": {
                            "type": "string"
                        }, 
                        "use_autoconfig": {
                            "type": "boolean"
                        }, 
                        "cluster_configs": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "enable_proxy": {
                            "type": "boolean"
                        }, 
                        "plugin_name": {
                            "type": "string"
                        }, 
                        "floating_ip_pool": {
                            "type": "string"
                        }, 
                        "volumes_size": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "node_configs": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "flavor_id": {
                            "type": "string"
                        }, 
                        "volumes_per_node": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "enable_anti_affinity": {
                            "type": "boolean"
                        }, 
                        "hadoop_version": {
                            "type": "string"
                        }, 
                        "auto_security_group": {
                            "type": "boolean"
                        }, 
                        "security_groups": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "master_flavor_id": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_cluster"
            }, 
            "mistral@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MistralClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "mistral"
            }, 
            "NovaServerGroups.create_and_delete_server_group@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova server-group-create\" and \"nova server-group-delete\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Server group policy\n", 
                        "name": "policies"
                    }, 
                    {
                        "doc": "The server group specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server group, then delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.server_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServerGroups.create_and_delete_server_group"
            }, 
            "DesignateBasic.list_domains@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the designate domain-list command by listing\nall the domains.\n\nSuppose if we have 2 users in context and each has 2 domains\nuploaded for them we will be able to test the performance of\ndesignate domain-list command in this case.", 
                "parameters": [], 
                "title": "List Designate domains.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_domains"
            }, 
            "VMTasks.dd_load_test@openstack": {
                "introduced_in": null, 
                "description": ".. note:: dd load test is prepared script by Rally team. It checks\n    writing and reading metrics from the VM.", 
                "parameters": [
                    {
                        "doc": "glance image name to use for the vm. Optional\nin case of specified \"image_command_customizer\" context\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "ssh username on server, str\n", 
                        "name": "username"
                    }, 
                    {
                        "doc": "Password on SSH authentication\n", 
                        "name": "password"
                    }, 
                    {
                        "doc": "the interpreter to execute script with dd load test\n(defaults to /bin/sh)\n", 
                        "name": "interpreter"
                    }, 
                    {
                        "doc": "DEPRECATED. use interpreter instead.\n", 
                        "name": "command"
                    }, 
                    {
                        "doc": "volume args for booting server from volume\n", 
                        "name": "volume_args"
                    }, 
                    {
                        "doc": "external network name, for floating ip\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "ssh port for SSH connection\n", 
                        "name": "port"
                    }, 
                    {
                        "doc": "bool, floating or fixed IP for SSH connection\n", 
                        "name": "use_floating_ip"
                    }, 
                    {
                        "doc": "whether to use force_delete for servers\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "whether to check connectivity on server creation\n", 
                        "name": "wait_for_ping"
                    }, 
                    {
                        "doc": "The number of tail nova console-log lines user\nwould like to retrieve\n", 
                        "name": "max_log_length"
                    }, 
                    {
                        "doc": "extra arguments for booting the server", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from a custom image and performs dd load test.", 
                "module": "rally.plugins.openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "VMTasks.dd_load_test"
            }, 
            "html@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Generates task report in HTML format.", 
                "module": "rally.plugins.common.exporters.html", 
                "platform": "default", 
                "returns": "", 
                "base": "Task Exporter", 
                "schema": null, 
                "name": "html"
            }, 
            "NeutronNetworks.create_and_list_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets and then\nlists subnets.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and a given number of subnets and list all subnets.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_subnets"
            }, 
            "NeutronLoadbalancerV1.create_and_delete_pools@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-pool-create\" and \"neutron lb-pool-delete\"\ncommand performance. The scenario creates a pool for every subnet\nand then deletes those pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options", 
                        "name": "pool_create_args"
                    }
                ], 
                "title": "Create pools(v1) and delete pools(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_delete_pools"
            }, 
            "CeilometerEvents.create_user_and_list_event_types@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all events types using GET /v2/event_types.", 
                "parameters": [], 
                "title": "Create user and fetch all event types.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.events", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerEvents.create_user_and_list_event_types"
            }, 
            "ManilaShares.create_share_then_allow_and_deny_access@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "share protocol for new share\navailable values are NFS, CIFS, CephFS, GlusterFS and HDFS.\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "represents the access type (e.g: 'ip', 'domain'...)\n", 
                        "name": "access_type"
                    }, 
                    {
                        "doc": "represents the object (e.g: '127.0.0.1'...)\n", 
                        "name": "access"
                    }, 
                    {
                        "doc": "access level to the share (e.g: 'rw', 'ro')\n", 
                        "name": "access_level"
                    }, 
                    {
                        "doc": "size in GiB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "new size of the share in GiB\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "ID of the snapshot\n", 
                        "name": "snapshot_id"
                    }, 
                    {
                        "doc": "description of a share\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "optional metadata to set on share creation\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "either instance of ShareNetwork or text with ID\n", 
                        "name": "share_network"
                    }, 
                    {
                        "doc": "either instance of ShareType or text with ID\n", 
                        "name": "share_type"
                    }, 
                    {
                        "doc": "whether to set share as public or not.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "availability zone of the share\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "ID of the share group to which the share\nshould belong\n", 
                        "name": "share_group_id"
                    }
                ], 
                "title": "Create a share and allow and deny access to it", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_share_then_allow_and_deny_access"
            }, 
            "CeilometerAlarms.create_and_update_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test PUT /v2/alarms/(alarm_id)\nInitially alarm is created and then the created alarm is updated using\nits alarm_id. meter_name and threshold are required parameters\nfor alarm creation. kwargs stores other optional parameters like\n'ok_actions', 'project_id' etc that may be passed while alarm creation.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and update the newly created alarm.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_update_alarm"
            }, 
            "CinderVolumes.create_and_list_volume@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder volume-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 volume on every iteration. So you will have more\nand more volumes and will be able to measure the\nperformance of the \"cinder volume-list\" command depending on\nthe number of images owned by users.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "determines whether the volume listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume and list all volumes.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_list_volume"
            }, 
            "NovaServers.boot_and_get_console_url@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests retrieving the console url of a server.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "type can be novnc/xvpvnc for protocol vnc;\nspice-html5 for protocol spice; rdp-html5 for\nprotocol rdp; serial for protocol serial.\nwebmks for protocol mks (since version 2.8).\n", 
                        "name": "console_type"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Retrieve a console url of a server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_get_console_url"
            }, 
            "CeilometerMeters.list_meters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "dict with metadata fields and values\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "limit of meters in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Check all available queries for list resource request.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.meters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerMeters.list_meters"
            }, 
            "SaharaJob.create_launch_job_sequence@openstack": {
                "introduced_in": null, 
                "description": "This scenario Creates a Job entity and launches an execution on a\nCluster for every job object provided.", 
                "parameters": [
                    {
                        "doc": "list of jobs that should be executed in one context", 
                        "name": "jobs"
                    }
                ], 
                "title": "Create and execute a sequence of the Sahara EDP Jobs.", 
                "module": "rally.plugins.openstack.scenarios.sahara.jobs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaJob.create_launch_job_sequence"
            }, 
            "IronicNodes.create_and_list_node@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "The name of the driver used to manage this Node.\n", 
                        "name": "driver"
                    }, 
                    {
                        "doc": "Key/value pair describing the physical\ncharacteristics of the node.\n", 
                        "name": "properties"
                    }, 
                    {
                        "doc": "Optional argument of list request. Either a Boolean\nor a string representation of a Boolean that indicates whether to\nreturn a list of associated (True or \"True\") or unassociated\n(False or \"False\") nodes.\n", 
                        "name": "associated"
                    }, 
                    {
                        "doc": "Optional argument of list request. Either a Boolean\nor a string representation of a Boolean that indicates whether\nto return nodes in maintenance mode (True or \"True\"), or not in\nmaintenance mode (False or \"False\").\n", 
                        "name": "maintenance"
                    }, 
                    {
                        "doc": "Optional, boolean whether to return detailed\ninformation about nodes.\n", 
                        "name": "detail"
                    }, 
                    {
                        "doc": "Optional, direction of sorting, either 'asc' (the\ndefault) or 'desc'.\n", 
                        "name": "sort_dir"
                    }, 
                    {
                        "doc": "DEPRECATED since Rally 0.10.0\n", 
                        "name": "marker"
                    }, 
                    {
                        "doc": "DEPRECATED since Rally 0.10.0\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "DEPRECATED since Rally 0.10.0\n", 
                        "name": "sort_key"
                    }, 
                    {
                        "doc": "Optional additional arguments for node creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and list nodes.", 
                "module": "rally.plugins.openstack.scenarios.ironic.nodes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "IronicNodes.create_and_list_node"
            }, 
            "failure_rate@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Failure rate minimum and maximum in percents.", 
                "module": "rally.plugins.common.sla.failure_rate", 
                "platform": "default", 
                "returns": "", 
                "base": "SLA", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "max": {
                            "minimum": 0.0, 
                            "type": "number", 
                            "maximum": 100.0
                        }, 
                        "min": {
                            "minimum": 0.0, 
                            "type": "number", 
                            "maximum": 100.0
                        }
                    }, 
                    "minProperties": 1
                }, 
                "name": "failure_rate"
            }, 
            "NeutronNetworks.create_and_delete_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets and then\ndeletes subnets.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and delete a given number of subnets.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_subnets"
            }, 
            "CeilometerSamples.list_samples@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "count of samples in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Fetch all available queries for list sample request.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.samples", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerSamples.list_samples"
            }, 
            "ManilaShares.list_shares@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines either to return detailed list of\nobjects or not.\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "container of search opts such as\n\"name\", \"host\", \"share_type\", etc.\n", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Basic scenario for 'share list' operation.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.list_shares"
            }, 
            "monasca_metrics@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates Monasca Metrics.", 
                "module": "rally.plugins.openstack.context.monasca.metrics", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "metrics_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "value_meta": {
                            "items": {
                                "additionalProperties": false, 
                                "type": "object", 
                                "properties": {
                                    "value_meta_value": {
                                        "type": "string"
                                    }, 
                                    "value_meta_key": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }, 
                        "name": {
                            "type": "string"
                        }, 
                        "dimensions": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "url": {
                                    "type": "string"
                                }, 
                                "region": {
                                    "type": "string"
                                }, 
                                "hostname": {
                                    "type": "string"
                                }, 
                                "service": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }, 
                "name": "monasca_metrics"
            }, 
            "CeilometerAlarms.create_and_list_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test GET /v2/alarms/(alarm_id)\nInitially alarm is created and then the created alarm is fetched using\nits alarm_id. meter_name and threshold are required parameters\nfor alarm creation. kwargs stores other optional parameters like\n'ok_actions', 'project_id' etc. that may be passed while creating\nan alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and get the newly created alarm.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_list_alarm"
            }, 
            "trove@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for TroveClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "trove"
            }, 
            "NovaServers.boot_and_delete_multiple_servers@openstack": {
                "introduced_in": null, 
                "description": "Deletion is done in parallel with one request per server, not\nwith a single request for all servers.", 
                "parameters": [
                    {
                        "doc": "The image to boot from\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "Flavor used to boot instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Number of instances to boot\n", 
                        "name": "count"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for instance creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot multiple servers in a single request and delete them.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_delete_multiple_servers"
            }, 
            "NovaServers.boot_and_list_server@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 server on every iteration. So you will have more\nand more servers and will be able to measure the\nperformance of the \"nova list\" command depending on\nthe number of servers owned by users.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if the server listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from an image and then list all servers.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_list_server"
            }, 
            "DesignateBasic.list_records@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the designate record-list command by listing\nall the records in a domain.\n\nSuppose if we have 2 users in context and each has 2 domains\nuploaded for them we will be able to test the performance of\ndesignate record-list command in this case.", 
                "parameters": [
                    {
                        "doc": "Domain ID", 
                        "name": "domain_id"
                    }
                ], 
                "title": "List Designate records.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_records"
            }, 
            "NovaServers.boot_lock_unlock_and_delete@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the\nscenario to simulate a pause between locking and unlocking the\nserver (of random duration from min_sleep to max_sleep).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Minimum sleep time between locking and unlocking\nin seconds\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time between locking and unlocking\nin seconds\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, lock it, then unlock and delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_lock_unlock_and_delete"
            }, 
            "NovaServers.suspend_and_resume_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server, suspend, resume and then delete it", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.suspend_and_resume_server"
            }, 
            "NeutronSecurityGroup.create_and_list_security_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }
                ], 
                "title": "Create and list Neutron security-groups.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_list_security_groups"
            }, 
            "KeystoneBasic.create_and_list_roles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for\nroles create\n", 
                        "name": "create_role_kwargs"
                    }, 
                    {
                        "doc": "Optional additional arguments for roles list", 
                        "name": "list_role_kwargs"
                    }
                ], 
                "title": "Create a role, then list all roles.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_roles"
            }, 
            "NovaServers.boot_and_bounce_server@openstack": {
                "introduced_in": null, 
                "description": "Actions should be passed into the actions parameter. Available actions\nare 'hard_reboot', 'soft_reboot', 'stop_start', 'rescue_unrescue',\n'pause_unpause', 'suspend_resume', 'lock_unlock' and 'shelve_unshelve'.\nDelete server after all actions were completed.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "list of action dictionaries, where each action\ndictionary speicifes an action to be performed\nin the following format:\n{\"action_name\": <no_of_iterations>}\n", 
                        "name": "actions"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server and run specified actions against it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_bounce_server"
            }, 
            "MuranoEnvironments.create_and_delete_environment@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create environment, session and delete environment.", 
                "module": "rally.plugins.openstack.scenarios.murano.environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "MuranoEnvironments.create_and_delete_environment"
            }, 
            "ManilaShares.create_share_network_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "ID of Neutron network\n", 
                        "name": "neutron_net_id"
                    }, 
                    {
                        "doc": "ID of Neutron subnet\n", 
                        "name": "neutron_subnet_id"
                    }, 
                    {
                        "doc": "ID of Nova network\n", 
                        "name": "nova_net_id"
                    }, 
                    {
                        "doc": "share network description", 
                        "name": "description"
                    }
                ], 
                "title": "Creates share network and then deletes.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_share_network_and_delete"
            }, 
            "ec2_servers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of nova servers in each tenant uses ec2 API.", 
                "module": "rally.plugins.openstack.context.ec2.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "image", 
                        "flavor", 
                        "servers_per_tenant"
                    ], 
                    "type": "object", 
                    "properties": {
                        "servers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "image": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "flavor": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }, 
                "name": "ec2_servers"
            }, 
            "manila_shares@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "This context creates shares for Manila project.", 
                "module": "rally.plugins.openstack.context.manila.manila_shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "shares_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "share_proto": {
                            "type": "string"
                        }, 
                        "share_type": {
                            "type": "string"
                        }, 
                        "size": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "manila_shares"
            }, 
            "valid_command@openstack": {
                "introduced_in": null, 
                "description": "Ensure that the command dictionary is a proper command-specifying\ndictionary described in 'vmtasks.VMTasks.boot_runcommand_delete'\ndocstring.", 
                "parameters": [
                    {
                        "doc": "Name of parameter to validate\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "Boolean indicating that the command dictionary is\nrequired\n", 
                        "name": "required"
                    }
                ], 
                "title": "Checks that parameter is a proper command-specifying dictionary.", 
                "module": "rally.plugins.openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "valid_command"
            }, 
            "NeutronBGPVPN.create_and_update_bgpvpns@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "bool, whether or not to modify BGP VPN name\n", 
                        "name": "update_name"
                    }, 
                    {
                        "doc": "Route Targets that will be both imported\nand used for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Updated Route Targets that will be both\nimported and used for export\n", 
                        "name": "updated_route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Updated additional Route Targets that\nwill be imported\n", 
                        "name": "updated_import_targets"
                    }, 
                    {
                        "doc": "additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "Updated additional Route Targets that\nwill be used for export.\n", 
                        "name": "updated_export_targets"
                    }, 
                    {
                        "doc": "list of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "Updated list of route\ndistinguisher strings\n", 
                        "name": "updated_route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Create and Update bgpvpns", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_update_bgpvpns"
            }, 
            "NovaServers.boot_and_associate_floating_ip@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for\nfloating ip creation\n", 
                        "name": "create_floating_ip_args"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server and associate a floating IP to it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_associate_floating_ip"
            }, 
            "NeutronNetworks.create_and_show_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then show all routers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for each network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and show a given number of routers.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_routers"
            }, 
            "NovaServices.list_services@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova service-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "List nova services on host\n", 
                        "name": "host"
                    }, 
                    {
                        "doc": "List nova services matching given binary", 
                        "name": "binary"
                    }
                ], 
                "title": "List all nova services.", 
                "module": "rally.plugins.openstack.scenarios.nova.services", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaServices.list_services"
            }, 
            "zaqar@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for ZaqarClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "zaqar"
            }, 
            "CinderVolumeTypes.create_and_delete_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates an encryption type for a given\nvolume type, then deletes the created encryption type.", 
                "parameters": [
                    {
                        "doc": "the encryption type specifications to add\n", 
                        "name": "create_specs"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }
                ], 
                "title": "Create and delete encryption type", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_delete_encryption_type"
            }, 
            "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\", \"neutron bgpvpn-net-assoc-create\"\nand \"neutron bgpvpn-net-assoc-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a network and disassociate it from a BGP VPN.", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_networks"
            }, 
            "NovaFlavors.create_flavor_and_add_tenant_access@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a flavor and Add flavor access for the given tenant.", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_flavor_and_add_tenant_access"
            }, 
            "NeutronNetworks.create_and_list_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 network on every iteration. So you will have more\nand more networks and will be able to measure the\nperformance of the \"neutron net-list\" command depending on\nthe number of networks owned by users.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create a network and then list all networks.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_networks"
            }, 
            "image_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines which variable should be used\nto get image id value.\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "defines image id param is required", 
                        "name": "nullable"
                    }
                ], 
                "title": "Validator checks existed image or not", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "image_exists"
            }, 
            "stacks@openstack": {
                "introduced_in": null, 
                "description": "Stack generator allows to generate arbitrary number of stacks for\neach tenant before test scenarios. In addition, it allows to define\nnumber of resources (namely OS::Heat::RandomString) that will be created\ninside each stack. After test execution the stacks will be\nautomatically removed from heat.", 
                "parameters": [], 
                "title": "Context class for create temporary stacks with resources.", 
                "module": "rally.plugins.openstack.context.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "resources_per_stack": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "stacks_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "stacks"
            }, 
            "KeystoneBasic.create_and_list_ec2credentials@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create and List all keystone ec2-credentials.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_ec2credentials"
            }, 
            "DesignateBasic.list_zones@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the openstack zone list command by listing\nall the zones.", 
                "parameters": [], 
                "title": "List Designate zones.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_zones"
            }, 
            "MuranoEnvironments.list_environments@openstack": {
                "introduced_in": null, 
                "description": "Run murano environment-list for listing all environments.", 
                "parameters": [], 
                "title": "List the murano environments.", 
                "module": "rally.plugins.openstack.scenarios.murano.environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "MuranoEnvironments.list_environments"
            }, 
            "ZaqarBasic.create_queue@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "other optional parameters to create queues like\n\"metadata\"\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a Zaqar queue with a random name.", 
                "module": "rally.plugins.openstack.scenarios.zaqar.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "ZaqarBasic.create_queue"
            }, 
            "volume_types@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Adds cinder volumes types.", 
                "module": "rally.plugins.openstack.context.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "items": {
                        "type": "string"
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "array"
                }, 
                "name": "volume_types"
            }, 
            "Watcher.create_audit_and_delete@openstack": {
                "introduced_in": null, 
                "description": "Create Audit, wait until whether Audit is in SUCCEEDED state or in\nFAILED and delete audit.", 
                "parameters": [], 
                "title": "Create and delete audit.", 
                "module": "rally.plugins.openstack.scenarios.watcher.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Watcher.create_audit_and_delete"
            }, 
            "MuranoPackages.package_lifecycle@openstack": {
                "introduced_in": null, 
                "description": "Measure the Murano import, update and delete package\ncommands performance.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared), modifies it (using data from\n\"body\") and deletes.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }, 
                    {
                        "doc": "dict object that defines what package property will be\nupdated, e.g {\"tags\": [\"tag\"]} or {\"enabled\": \"true\"}\n", 
                        "name": "body"
                    }, 
                    {
                        "doc": "string object that defines the way of how package\nproperty will be updated, allowed operations are\n\"add\", \"replace\" or \"delete\".\nDefault value is \"replace\".\n", 
                        "name": "operation"
                    }
                ], 
                "title": "Import Murano package, modify it and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.package_lifecycle"
            }, 
            "constant_for_duration@default": {
                "introduced_in": null, 
                "description": "This runner will place a constant load on the cloud under test by\nexecuting each scenario iteration without pausing between iterations\nuntil a specified interval of time has elapsed.\n\nThe concurrency parameter of the scenario config controls the\nnumber of concurrent iterations which execute during a single\nsceanario in order to simulate the activities of multiple users\nplacing load on the cloud under test.", 
                "parameters": [], 
                "title": "Creates constant load executing a scenario for an interval of time.", 
                "module": "rally.plugins.common.runners.constant", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario Runner", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "duration"
                    ], 
                    "type": "object", 
                    "properties": {
                        "duration": {
                            "minimum": 0.0, 
                            "type": "number", 
                            "description": "The number of seconds during which to generate a load."
                        }, 
                        "timeout": {
                            "minimum": 1, 
                            "type": "number", 
                            "description": "Operation's timeout."
                        }, 
                        "concurrency": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "The number of parallel iteration executions."
                        }
                    }
                }, 
                "name": "constant_for_duration"
            }, 
            "audit_templates@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates Watcher audit templates for tenants.", 
                "module": "rally.plugins.openstack.context.watcher.audit_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "params"
                    ], 
                    "type": "object", 
                    "properties": {
                        "audit_templates_per_admin": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "params": {
                            "minItems": 1, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "additionalProperties": false, 
                                "type": "object", 
                                "properties": {
                                    "goal": {
                                        "additionalProperties": false, 
                                        "type": "object", 
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            }
                                        }
                                    }, 
                                    "strategy": {
                                        "additionalProperties": false, 
                                        "type": "object", 
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }, 
                        "fill_strategy": {
                            "enum": [
                                "round_robin", 
                                "random", 
                                null
                            ]
                        }
                    }
                }, 
                "name": "audit_templates"
            }, 
            "NeutronNetworks.create_and_list_floating_ips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron floating-ip-create\" and \"neutron floating-ip-list\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "str, external network for floating IP creation\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "dict, POST /floatingips request options", 
                        "name": "floating_ip_args"
                    }
                ], 
                "title": "Create and list floating IPs.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_floating_ips"
            }, 
            "NeutronNetworks.create_and_show_ports@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron port-create\" and \"neutron port-show\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create a given number of ports and show created ports in trun.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_ports"
            }, 
            "NeutronNetworks.create_and_delete_floating_ips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron floating-ip-create\" and \"neutron\nfloating-ip-delete\" commands performance.", 
                "parameters": [
                    {
                        "doc": "str, external network for floating IP creation\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "dict, POST /floatingips request options", 
                        "name": "floating_ip_args"
                    }
                ], 
                "title": "Create and delete floating IPs.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_floating_ips"
            }, 
            "max_avg_duration_per_atomic@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Maximum average duration of one iterations atomic actions in seconds.", 
                "module": "rally.plugins.common.sla.max_average_duration_per_atomic", 
                "platform": "default", 
                "returns": "", 
                "base": "SLA", 
                "schema": {
                    "additionalProperties": false, 
                    "patternProperties": {
                        ".*": {
                            "type": "number", 
                            "description": "The name of atomic action."
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "minProperties": 1
                }, 
                "name": "max_avg_duration_per_atomic"
            }, 
            "magnum@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MagnumClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "magnum"
            }, 
            "NeutronLoadbalancerV1.create_and_delete_healthmonitors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-healthmonitor-create\" and \"neutron\nlb-healthmonitor-delete\" command performance. The scenario creates\nhealthmonitors and deletes those healthmonitors.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/healthmonitors request\noptions\n", 
                        "name": "healthmonitor_create_args"
                    }
                ], 
                "title": "Create a healthmonitor(v1) and delete healthmonitors(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_delete_healthmonitors"
            }, 
            "CeilometerEvents.create_user_and_list_events@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all events using GET /v2/events.", 
                "parameters": [], 
                "title": "Create user and fetch all events.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.events", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerEvents.create_user_and_list_events"
            }, 
            "lbaas@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates a lb-pool for every subnet created in network context.", 
                "module": "rally.plugins.openstack.context.neutron.lbaas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "pool": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "lbaas_version": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "lbaas"
            }, 
            "NovaHypervisors.list_and_search_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "The scenario first list all hypervisors,then find its hostname,\nthen list all servers belonging to the hypervisor\n\nMeasure the \"nova hypervisor-servers <hostname>\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all servers belonging to specific hypervisor.", 
                "module": "rally.plugins.openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_and_search_hypervisors"
            }, 
            "args-spec@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Scenario arguments validator", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "args-spec"
            }, 
            "MuranoEnvironments.create_and_deploy_environment@openstack": {
                "introduced_in": null, 
                "description": "Create environment, create session, add app to environment\npackages_per_env times, send environment to deploy.", 
                "parameters": [
                    {
                        "doc": "number of packages per environment", 
                        "name": "packages_per_env"
                    }
                ], 
                "title": "Create environment, session and deploy environment.", 
                "module": "rally.plugins.openstack.scenarios.murano.environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "MuranoEnvironments.create_and_deploy_environment"
            }, 
            "watcher@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for WatcherClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "watcher"
            }, 
            "NeutronSecurityGroup.create_and_delete_security_group_rule@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-rule-create\" and \"neutron\nsecurity-group-rule-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_args"
                    }, 
                    {
                        "doc": "dict,\nPOST /v2.0/security-group-rules request options\n", 
                        "name": "security_group_rule_args"
                    }
                ], 
                "title": "Create and delete Neutron security-group-rule.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_delete_security_group_rule"
            }, 
            "HeatStacks.list_stacks_and_resources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List all resources from tenant stacks.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.list_stacks_and_resources"
            }, 
            "Dummy.dummy_random_action@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int number of actions to generate\n", 
                        "name": "actions_num"
                    }, 
                    {
                        "doc": "minimal time to sleep, numeric seconds\n", 
                        "name": "sleep_min"
                    }, 
                    {
                        "doc": "maximum time to sleep, numeric seconds", 
                        "name": "sleep_max"
                    }
                ], 
                "title": "Sleep random time in dummy actions.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy_random_action"
            }, 
            "Authenticate.keystone@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Check Keystone Client.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.keystone"
            }, 
            "EC2Servers.boot_server@openstack": {
                "introduced_in": null, 
                "description": "Assumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server.", 
                "module": "rally.plugins.openstack.scenarios.ec2.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "EC2Servers.boot_server"
            }, 
            "CinderVolumes.create_and_accept_transfer@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder transfer-create\" and \"cinder transfer-accept\"\ncommand performace.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create initial volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume transfer, then accept it", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_accept_transfer"
            }, 
            "KeystoneBasic.create_and_list_services@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "type of the service\n", 
                        "name": "service_type"
                    }, 
                    {
                        "doc": "description of the service", 
                        "name": "description"
                    }
                ], 
                "title": "Create and list services.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_services"
            }, 
            "NovaAggregates.create_aggregate_add_host_and_boot_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates an aggregate, adds a compute host and metadata\nto the aggregate, adds the same metadata to the flavor and creates an\ninstance. Verifies that instance host is one of the hosts in the\naggregate.", 
                "parameters": [
                    {
                        "doc": "The image ID to boot from\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "The metadata to be set as flavor extra specs\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "The availability zone of the aggregate\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "Optional additional arguments to verify host\naggregates\n", 
                        "name": "boot_server_kwargs"
                    }
                ], 
                "title": "Scenario to create and verify an aggregate", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_aggregate_add_host_and_boot_server"
            }, 
            "volumes@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates volumes for each tenant.", 
                "module": "rally.plugins.openstack.context.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "size"
                    ], 
                    "type": "object", 
                    "properties": {
                        "type": {
                            "oneOf": [
                                {
                                    "type": "string", 
                                    "description": "a string-like type of volume to create."
                                }, 
                                {
                                    "type": "null", 
                                    "description": "Use default type for volume to create."
                                }
                            ]
                        }, 
                        "volumes_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "size": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "volumes"
            }, 
            "KeystoneBasic.authenticate_user_and_validate_token@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Authenticate and validate a keystone token.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.authenticate_user_and_validate_token"
            }, 
            "GlanceImages.create_and_delete_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create and then delete an image.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_delete_image"
            }, 
            "NovaFlavors.create_flavor_and_set_keys@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova flavor-key\" command performance.\nthe scenario first create a flavor,then add the extra specs to it.", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "additional arguments for flavor set keys\n", 
                        "name": "extra_specs"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create flavor and set keys to the flavor.", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_flavor_and_set_keys"
            }, 
            "flavors@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context creates a list of flavors.", 
                "module": "rally.plugins.openstack.context.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "items": {
                        "additionalProperties": false, 
                        "required": [
                            "name", 
                            "ram"
                        ], 
                        "type": "object", 
                        "properties": {
                            "name": {
                                "type": "string"
                            }, 
                            "ram": {
                                "minimum": 1, 
                                "type": "integer"
                            }, 
                            "ephemeral": {
                                "minimum": 0, 
                                "type": "integer"
                            }, 
                            "vcpus": {
                                "minimum": 1, 
                                "type": "integer"
                            }, 
                            "extra_specs": {
                                "additionalProperties": {
                                    "type": "string"
                                }, 
                                "type": "object"
                            }, 
                            "swap": {
                                "minimum": 0, 
                                "type": "integer"
                            }, 
                            "disk": {
                                "minimum": 0, 
                                "type": "integer"
                            }
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "array"
                }, 
                "name": "flavors"
            }, 
            "CinderVolumes.create_nested_snapshots_and_attach_volume@openstack": {
                "introduced_in": null, 
                "description": "This scenario create vm, volume, create it's snapshot, attach volume,\nthen create new volume from existing snapshot and so on,\nwith defined nested level, after all detach and delete them.\nvolume->snapshot->volume->snapshot->volume ...", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Volume size - dictionary, contains two values:\n   min - minimum size volumes will be created as;\n   max - maximum size volumes will be created as.\ndefault values: {\"min\": 1, \"max\": 5}\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "amount of nested levels\n", 
                        "name": "nested_level"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a snapshot\n", 
                        "name": "create_snapshot_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for VM creation", 
                        "name": "create_vm_params"
                    }
                ], 
                "title": "Create a volume from snapshot and attach/detach the volume", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_nested_snapshots_and_attach_volume"
            }, 
            "NovaFlavors.create_and_get_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create flavor and get detailed information of the flavor.", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_and_get_flavor"
            }, 
            "Lines@default": {
                "introduced_in": null, 
                "description": "This plugin processes additive data and displays it in HTML report\nas linear chart with X axis bound to iteration number.\nComplete output data is displayed as linear chart as well, without\nany processing.\n\nExamples of using this plugin in Scenario, for saving output data:\n\n.. code-block:: python\n\n    self.add_output(\n        additive={\"title\": \"Additive data as stacked area\",\n                  \"description\": \"Iterations trend for foo and bar\",\n                  \"chart_plugin\": \"Lines\",\n                  \"data\": [[\"foo\", 12], [\"bar\", 34]]},\n        complete={\"title\": \"Complete data as stacked area\",\n                  \"description\": \"Data is shown as stacked area, as-is\",\n                  \"chart_plugin\": \"Lines\",\n                  \"data\": [[\"foo\", [[0, 5], [1, 42], [2, 15], [3, 7]]],\n                           [\"bar\", [[0, 2], [1, 1.3], [2, 5], [3, 9]]]],\n                  \"label\": \"Y-axis label text\",\n                  \"axis_label\": \"X-axis label text\"})", 
                "parameters": [], 
                "title": "Display results as generic chart with lines.", 
                "module": "rally.task.processing.charts", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "Lines"
            }, 
            "required_neutron_extensions@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of Neutron extensions", 
                        "name": "extensions"
                    }
                ], 
                "title": "Validator checks if the specified Neutron extension is available", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_neutron_extensions"
            }, 
            "required_params@default": {
                "introduced_in": null, 
                "description": "This allows us to search required parameters in subdict of config.", 
                "parameters": [
                    {
                        "doc": "sub-dict of \"config\" to search. if\nnot defined - will search in \"config\"\n", 
                        "name": "subdict"
                    }, 
                    {
                        "doc": "list of required parameters", 
                        "name": "params"
                    }
                ], 
                "title": "Scenario required parameter validator.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_params"
            }, 
            "CinderVolumeBackups.create_incremental_volume_backup@openstack": {
                "introduced_in": null, 
                "description": "The scenario first create a volume, the create a backup, the backup\nis full backup. Because Incremental backup must be based on the\nfull backup. finally create a incremental backup.", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "deletes backup and volume after creating if True\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Create a incremental volume backup.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_backups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeBackups.create_incremental_volume_backup"
            }, 
            "Dummy.dummy@default": {
                "introduced_in": null, 
                "description": "Dummy.dummy can be used for testing performance of different\nScenarioRunners and of the ability of rally to store a large\namount of results.", 
                "parameters": [
                    {
                        "doc": "idle time of method (in seconds).", 
                        "name": "sleep"
                    }
                ], 
                "title": "Do nothing and sleep for the given number of seconds (0 by default).", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy"
            }, 
            "HttpRequests.check_request@default": {
                "introduced_in": null, 
                "description": "This scenario is used to make request and check it with expected\nResponse.", 
                "parameters": [
                    {
                        "doc": "url for the Request object\n", 
                        "name": "url"
                    }, 
                    {
                        "doc": "method for the Request object\n", 
                        "name": "method"
                    }, 
                    {
                        "doc": "expected response code\n", 
                        "name": "status_code"
                    }, 
                    {
                        "doc": "optional additional request parameters", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Standard way for testing web services using HTTP requests.", 
                "module": "rally.plugins.common.scenarios.requests.http_requests", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "HttpRequests.check_request"
            }, 
            "DesignateBasic.create_and_list_servers@openstack": {
                "introduced_in": null, 
                "description": "If you have only 1 user in your context, you will\nadd 1 server on every iteration. So you will have more\nand more server and will be able to measure the\nperformance of the \"designate server-list\" command depending on\nthe number of servers owned by users.", 
                "parameters": [], 
                "title": "Create a Designate server and list all servers.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_servers"
            }, 
            "NovaAggregates.create_and_get_aggregate_details@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates an aggregate and then get details of it.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate and then get its details.", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_get_aggregate_details"
            }, 
            "KeystoneBasic.create_and_update_user@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for user\ncreation\n", 
                        "name": "create_user_kwargs"
                    }, 
                    {
                        "doc": "Optional additional arguments for user\nupdation\n", 
                        "name": "update_user_kwargs"
                    }
                ], 
                "title": "Create user and update the user.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_update_user"
            }, 
            "DesignateBasic.create_and_list_recordsets@openstack": {
                "introduced_in": null, 
                "description": "If you have only 1 user in your context, you will\nadd 1 recordset on every iteration. So you will have more\nand more recordsets and will be able to measure the\nperformance of the \"openstack recordset list\" command depending on\nthe number of zones/recordsets owned by users.", 
                "parameters": [
                    {
                        "doc": "recordsets to create pr zone.", 
                        "name": "recordsets_per_zone"
                    }
                ], 
                "title": "Create and then list recordsets.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_recordsets"
            }, 
            "Dummy.dummy_exception_probability@default": {
                "introduced_in": null, 
                "description": "Dummy.dummy_exception_probability used for testing if exceptions are\nprocessed properly by task engine and analyze rally results storing\n& displaying capabilities.", 
                "parameters": [
                    {
                        "doc": "Sets how likely it is that an exception\nwill be thrown. Float between 0 and 1\n0=never 1=always.\n", 
                        "name": "exception_probability"
                    }
                ], 
                "title": "Throws an exception with given probability.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy_exception_probability"
            }, 
            "NeutronLoadbalancerV1.create_and_list_vips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-vip-create\" and \"neutron lb-vip-list\" command\nperformance. The scenario creates a vip for every pool created and\nthen lists vips.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/vips request options\n", 
                        "name": "vip_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/pools request options", 
                        "name": "pool_create_args"
                    }
                ], 
                "title": "Create a vip(v1) and then list vips(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_list_vips"
            }, 
            "constant@default": {
                "introduced_in": null, 
                "description": "This runner will place a constant load on the cloud under test by\nexecuting each scenario iteration without pausing between iterations\nup to the number of times specified in the scenario config.\n\nThe concurrency parameter of the scenario config controls the\nnumber of concurrent iterations which execute during a single\nscenario in order to simulate the activities of multiple users\nplacing load on the cloud under test.", 
                "parameters": [], 
                "title": "Creates constant load executing a scenario a specified number of times.", 
                "module": "rally.plugins.common.runners.constant", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario Runner", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "max_cpu_count": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "The maximum number of processes to create load from."
                        }, 
                        "timeout": {
                            "type": "number", 
                            "description": "Operation's timeout."
                        }, 
                        "concurrency": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "The number of parallel iteration executions."
                        }, 
                        "times": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Total number of iteration executions."
                        }
                    }
                }, 
                "name": "constant"
            }, 
            "SaharaClusters.create_and_delete_cluster@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a Hadoop cluster, waits until it becomes\n'Active' and deletes it.", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups. Deprecated.\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the master\ninstance of the cluster\n", 
                        "name": "master_flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the workers of\nthe cluster\n", 
                        "name": "worker_flavor"
                    }, 
                    {
                        "doc": "number of worker instances in a cluster\n", 
                        "name": "workers_count"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "floating ip pool name from which Floating\nIPs will be allocated. Sahara will determine\nautomatically how to treat this depending on\nits own configurations. Defaults to None\nbecause in some cases Sahara may work w/o\nFloating IPs.\n", 
                        "name": "floating_ip_pool"
                    }, 
                    {
                        "doc": "number of Cinder volumes that will be\nattached to every cluster node\n", 
                        "name": "volumes_per_node"
                    }, 
                    {
                        "doc": "size of each Cinder volume in GB\n", 
                        "name": "volumes_size"
                    }, 
                    {
                        "doc": "boolean value. If set to True Sahara will\ncreate a Security Group for each Node Group\nin the Cluster automatically.\n", 
                        "name": "auto_security_group"
                    }, 
                    {
                        "doc": "list of security groups that will be used\nwhile creating VMs. If auto_security_group\nis set to True, this list can be left empty.\n", 
                        "name": "security_groups"
                    }, 
                    {
                        "doc": "config dict that will be passed to each Node\nGroup\n", 
                        "name": "node_configs"
                    }, 
                    {
                        "doc": "config dict that will be passed to the\nCluster\n", 
                        "name": "cluster_configs"
                    }, 
                    {
                        "doc": "If set to true the vms will be scheduled\none per compute node.\n", 
                        "name": "enable_anti_affinity"
                    }, 
                    {
                        "doc": "Use Master Node of a Cluster as a Proxy node and\ndo not assign floating ips to workers.\n", 
                        "name": "enable_proxy"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Launch and delete a Sahara Cluster.", 
                "module": "rally.plugins.openstack.scenarios.sahara.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SaharaClusters.create_and_delete_cluster"
            }, 
            "MuranoPackages.import_and_filter_applications@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of package import and package\nfiltering commands.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared) and filters packages by some\ncriteria.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }, 
                    {
                        "doc": "dict that contains filter criteria, lately it\nwill be passed as **kwargs to filter method\ne.g. {\"category\": \"Web\"}\n", 
                        "name": "filter_query"
                    }
                ], 
                "title": "Import Murano package and then filter packages by some criteria.", 
                "module": "rally.plugins.openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.import_and_filter_applications"
            }, 
            "NeutronLoadbalancerV1.create_and_update_vips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-vip-create\" and \"neutron lb-vip-update\"\ncommand performance. The scenario creates a pool for every subnet\nand then update those pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options\n", 
                        "name": "pool_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/vips request options\n", 
                        "name": "vip_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/vips update options", 
                        "name": "vip_update_args"
                    }
                ], 
                "title": "Create vips(v1) and update vips(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_update_vips"
            }, 
            "CinderVolumeTypes.create_and_list_volume_types@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a volume Type, then list all types.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_list_volume_types"
            }, 
            "KeystoneBasic.create_and_delete_service@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "type of the service\n", 
                        "name": "service_type"
                    }, 
                    {
                        "doc": "description of the service", 
                        "name": "description"
                    }
                ], 
                "title": "Create and delete service.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_delete_service"
            }, 
            "users@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of keystone users and tenants.", 
                "module": "rally.plugins.openstack.context.keystone.users", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "anyOf": [
                        {
                            "additionalProperties": false, 
                            "description": "Create new temporary users and tenants.", 
                            "properties": {
                                "user_domain": {
                                    "type": "string", 
                                    "description": "ID of domain in which users will be created."
                                }, 
                                "project_domain": {
                                    "type": "string", 
                                    "description": "ID of domain in which projects will be created."
                                }, 
                                "user_choice_method": {
                                    "$ref": "#/definitions/user_choice_method"
                                }, 
                                "users_per_tenant": {
                                    "minimum": 1, 
                                    "type": "integer", 
                                    "description": "The number of users to create per one tenant."
                                }, 
                                "tenants": {
                                    "minimum": 1, 
                                    "type": "integer", 
                                    "description": "The number of tenants to create."
                                }, 
                                "resource_management_workers": {
                                    "minimum": 1, 
                                    "type": "integer", 
                                    "description": "The number of concurrent threads to use for serving users context."
                                }
                            }
                        }, 
                        {
                            "additionalProperties": false, 
                            "description": "Use existing users and tenants.", 
                            "properties": {
                                "user_choice_method": {
                                    "$ref": "#/definitions/user_choice_method"
                                }
                            }
                        }
                    ], 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "definitions": {
                        "user_choice_method": {
                            "enum": [
                                "random", 
                                "round_robin"
                            ], 
                            "description": "The mode of balancing usage of users between scenario iterations."
                        }
                    }
                }, 
                "name": "users"
            }, 
            "max_avg_duration@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Maximum average duration of one iteration in seconds.", 
                "module": "rally.plugins.common.sla.max_average_duration", 
                "platform": "default", 
                "returns": "", 
                "base": "SLA", 
                "schema": {
                    "exclusiveMinimum": true, 
                    "minimum": 0.0, 
                    "type": "number"
                }, 
                "name": "max_avg_duration"
            }, 
            "ec2_flavor@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Nova's flavor Name by it's ID or regexp.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "ec2_flavor"
            }, 
            "CeilometerSamples.list_matched_samples@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "count of samples in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Get list of samples that matched fields from context and args.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.samples", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerSamples.list_matched_samples"
            }, 
            "MistralWorkbooks.list_workbooks@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the Mistral workbook-list\ncommand by listing all the workbooks.", 
                "parameters": [], 
                "title": "Scenario test mistral workbook-list command.", 
                "module": "rally.plugins.openstack.scenarios.mistral.workbooks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralWorkbooks.list_workbooks"
            }, 
            "KeystoneBasic.create_update_and_delete_tenant@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters for tenant creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create, update and delete tenant.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_update_and_delete_tenant"
            }, 
            "MistralExecutions.create_execution_from_workbook@openstack": {
                "introduced_in": null, 
                "description": "This scenario is a very useful tool to measure the\n\"mistral execution-create\" and \"mistral execution-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "string (yaml string) representation of given file\ncontent (Mistral workbook definition)\n", 
                        "name": "definition"
                    }, 
                    {
                        "doc": "string the workflow name to execute. Should be\none of the to workflows in the definition. If no\n workflow_name is passed, one of the workflows in\n the definition will be taken.\n", 
                        "name": "workflow_name"
                    }, 
                    {
                        "doc": "file containing a json string of mistral workflow\ninput\n", 
                        "name": "wf_input"
                    }, 
                    {
                        "doc": "file containing a json string of mistral params\n(the string is the place to pass the environment)\n", 
                        "name": "params"
                    }, 
                    {
                        "doc": "if False than it allows to check performance\nin \"create only\" mode.\n", 
                        "name": "do_delete"
                    }
                ], 
                "title": "Scenario tests execution creation and deletion.", 
                "module": "rally.plugins.openstack.scenarios.mistral.executions", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralExecutions.create_execution_from_workbook"
            }, 
            "ceilometer@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for CeilometerClient which returns authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "ceilometer"
            }, 
            "keystone@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for KeystoneClient which hides OpenStack auth details.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "keystone"
            }, 
            "fault_injection@openstack": {
                "introduced_in": null, 
                "description": "Configuration:\n\n* action - string that represents an action (more info in [1])\n* verify - whether to verify connection to cloud nodes or not\n\nThis plugin discovers extra config of ExistingCloud\nand looks for \"cloud_config\" field. If cloud_config is present then\nit will be used to connect to the cloud by os-faults.\n\nAnother option is to provide os-faults config file through\nOS_FAULTS_CONFIG env variable. Format of the config can\nbe found in [1].\n\n[1] http://os-faults.readthedocs.io/en/latest/usage.html", 
                "parameters": [], 
                "title": "Performs fault injection using os-faults library.", 
                "module": "rally.plugins.openstack.hook.fault_injection", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Hook Action", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "action"
                    ], 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "type": "string"
                        }, 
                        "verify": {
                            "type": "boolean"
                        }
                    }
                }, 
                "name": "fault_injection"
            }, 
            "EC2Servers.list_servers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the EC2 API list function by listing\nall the servers.", 
                "parameters": [], 
                "title": "List all servers.", 
                "module": "rally.plugins.openstack.scenarios.ec2.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "EC2Servers.list_servers"
            }, 
            "heat@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for HeatClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "heat"
            }, 
            "StatsTable@default": {
                "introduced_in": null, 
                "description": "This plugin processes additive data and compose statistics that is\ndisplayed as table in HTML report.\n\nExamples of using this plugin in Scenario, for saving output data:\n\n.. code-block:: python\n\n    self.add_output(\n        additive={\"title\": \"Statistics\",\n                  \"description\": (\"Table with statistics generated \"\n                                  \"from all iterations values\"),\n                  \"chart_plugin\": \"StatsTable\",\n                  \"data\": [[\"foo stat\", 12], [\"bar\", 34], [\"spam\", 56]]})", 
                "parameters": [], 
                "title": "Calculate statistics for additive data and display it as table.", 
                "module": "rally.task.processing.charts", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "StatsTable"
            }, 
            "NovaAvailabilityZones.list_availability_zones@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova availability-zone-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the availability-zone listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all availability zones.", 
                "module": "rally.plugins.openstack.scenarios.nova.availability_zones", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAvailabilityZones.list_availability_zones"
            }, 
            "NeutronSecurityGroup.create_and_show_security_group_rule@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-rule-create\" and \"neutron\nsecurity-group-rule-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_args"
                    }, 
                    {
                        "doc": "dict,\nPOST /v2.0/security-group-rules request options\n", 
                        "name": "security_group_rule_args"
                    }
                ], 
                "title": "Create and show Neutron security-group-rule.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_show_security_group_rule"
            }, 
            "NovaServers.boot_server_attach_created_volume_and_resize@openstack": {
                "introduced_in": null, 
                "description": "Simple test to create a VM and attach a volume, then resize the VM,\ndetach the volume then delete volume and VM.\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between attaching a volume and running resize\n(of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "True if need to confirm resize else revert resize\n", 
                        "name": "confirm"
                    }, 
                    {
                        "doc": "True if resources needs to be deleted explicitly\nelse use rally cleanup to remove resources\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation", 
                        "name": "create_volume_kwargs"
                    }
                ], 
                "title": "Create a VM from image, attach a volume to it and resize.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_attach_created_volume_and_resize"
            }, 
            "DesignateBasic.create_and_list_domains@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"designate domain-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 domain on every iteration. So you will have more\nand more domain and will be able to measure the\nperformance of the \"designate domain-list\" command depending on\nthe number of domains owned by users.", 
                "parameters": [], 
                "title": "Create a domain and list all domains.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_domains"
            }, 
            "KeystoneBasic.create_delete_user@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters to create users like\n\"tenant_id\", \"enabled\".\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user with random name and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_delete_user"
            }, 
            "NovaServers.boot_server_and_attach_interface@openstack": {
                "introduced_in": null, 
                "description": "This scenario measures the \"nova interface-attach\" command performance.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "Optional additional arguments for\nserver creation\n", 
                        "name": "boot_server_args"
                    }
                ], 
                "title": "Create server and subnet, then attach the interface to it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_and_attach_interface"
            }, 
            "NovaServers.snapshot_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, make its snapshot and delete both.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.snapshot_server"
            }, 
            "Quotas.nova_update@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update quotas for Nova.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.nova_update"
            }, 
            "path_or_url@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Check whether file exists or url available.", 
                "module": "rally.plugins.common.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "path_or_url"
            }, 
            "SwiftObjects.create_container_and_object_then_delete_all@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int, number of objects to upload\n", 
                        "name": "objects_per_container"
                    }, 
                    {
                        "doc": "int, temporary local object size\n", 
                        "name": "object_size"
                    }, 
                    {
                        "doc": "dict, optional parameters to create container", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create container and objects then delete everything created.", 
                "module": "rally.plugins.openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.create_container_and_object_then_delete_all"
            }, 
            "flavor_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines which variable should be used\nto get flavor id value.\n", 
                        "name": "param_name"
                    }
                ], 
                "title": "Returns validator for flavor", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "flavor_exists"
            }, 
            "CinderVolumeTypes.create_and_update_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates a volume type, secondly creates an\nencryption type for the volume type, thirdly updates the encryption\ntype.", 
                "parameters": [
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "create_provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "create_cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "create_key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "create_control_location"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "update_provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "update_cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "update_key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "update_control_location"
                    }
                ], 
                "title": "Create and update encryption type", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_update_encryption_type"
            }, 
            "NovaKeypair.create_and_get_keypair@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keypair and get the keypair details.", 
                "module": "rally.plugins.openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.create_and_get_keypair"
            }, 
            "HttpRequests.check_random_request@default": {
                "introduced_in": null, 
                "description": "This scenario takes random url from list of requests, and raises\nexception if the response is not the expected response.", 
                "parameters": [
                    {
                        "doc": "List of request dicts\n", 
                        "name": "requests"
                    }, 
                    {
                        "doc": "Expected Response Code it will\nbe used only if we doesn't specified it in request proper\n", 
                        "name": "status_code"
                    }
                ], 
                "title": "Executes random HTTP requests from provided list.", 
                "module": "rally.plugins.common.scenarios.requests.http_requests", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "HttpRequests.check_random_request"
            }, 
            "NeutronNetworks.create_and_update_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-create and net-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/networks update request\n", 
                        "name": "network_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create and update a network.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_networks"
            }, 
            "CeilometerTraits.create_user_and_list_trait_descriptions@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all traits for certain event type using\nGET /v2/event_types/<event_type>/traits.", 
                "parameters": [], 
                "title": "Create user and fetch all trait descriptions.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.traits", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerTraits.create_user_and_list_trait_descriptions"
            }, 
            "NovaServerGroups.create_and_get_server_group@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova server-group-create\" and \"nova server-group-get\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Server group policy\n", 
                        "name": "policies"
                    }, 
                    {
                        "doc": "The server group specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server group, then get its detailed information.", 
                "module": "rally.plugins.openstack.scenarios.nova.server_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServerGroups.create_and_get_server_group"
            }, 
            "number@default": {
                "introduced_in": null, 
                "description": "Ensure a parameter is within the range [minval, maxval]. This is a\nclosed interval so the end points are included.", 
                "parameters": [
                    {
                        "doc": "Name of parameter to validate\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "Lower endpoint of valid interval\n", 
                        "name": "minval"
                    }, 
                    {
                        "doc": "Upper endpoint of valid interval\n", 
                        "name": "maxval"
                    }, 
                    {
                        "doc": "Allow parameter not specified, or parameter=None\n", 
                        "name": "nullable"
                    }, 
                    {
                        "doc": "Only accept integers", 
                        "name": "integer_only"
                    }
                ], 
                "title": "Checks that parameter is a number that pass specified condition.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "number"
            }, 
            "VMTasks.boot_runcommand_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "glance image name to use for the vm. Optional\nin case of specified \"image_command_customizer\" context\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "ssh username on server, str\n", 
                        "name": "username"
                    }, 
                    {
                        "doc": "Password on SSH authentication\n", 
                        "name": "password"
                    }, 
                    {
                        "doc": "Command-specifying dictionary that either specifies\nremote command path via `remote_path' (can be uploaded from a\nlocal file specified by `local_path`), an inline script via\n`script_inline' or a local script file path using `script_file'.\nBoth `script_file' and `local_path' are checked to be accessible\nby the `file_exists' validator code.\n\nThe `script_inline' and `script_file' both require an `interpreter'\nvalue to specify the interpreter script should be run with.\n\nNote that any of `interpreter' and `remote_path' can be an array\nprefixed with environment variables and suffixed with args for\nthe `interpreter' command. `remote_path's last component must be\na path to a command to execute (also upload destination if a\n`local_path' is given). Uploading an interpreter is possible\nbut requires that `remote_path' and `interpreter' path do match.\n\nExamples:\n\n  .. code-block:: python\n\n    # Run a `local_script.pl' file sending it to a remote\n    # Perl interpreter\n    command = {\n        \"script_file\": \"local_script.pl\",\n        \"interpreter\": \"/usr/bin/perl\"\n    }\n\n    # Run an inline script sending it to a remote interpreter\n    command = {\n        \"script_inline\": \"echo 'Hello, World!'\",\n        \"interpreter\": \"/bin/sh\"\n    }\n\n    # Run a remote command\n    command = {\n        \"remote_path\": \"/bin/false\"\n    }\n\n    # Copy a local command and run it\n    command = {\n        \"remote_path\": \"/usr/local/bin/fio\",\n        \"local_path\": \"/home/foobar/myfiodir/bin/fio\"\n    }\n\n    # Copy a local command and run it with environment variable\n    command = {\n        \"remote_path\": [\"HOME=/root\", \"/usr/local/bin/fio\"],\n        \"local_path\": \"/home/foobar/myfiodir/bin/fio\"\n    }\n\n    # Run an inline script sending it to a remote interpreter\n    command = {\n        \"script_inline\": \"echo \"Hello, ${NAME:-World}\"\",\n        \"interpreter\": [\"NAME=Earth\", \"/bin/sh\"]\n    }\n\n    # Run an inline script sending it to an uploaded remote\n    # interpreter\n    command = {\n        \"script_inline\": \"echo \"Hello, ${NAME:-World}\"\",\n        \"interpreter\": [\"NAME=Earth\", \"/tmp/sh\"],\n        \"remote_path\": \"/tmp/sh\",\n        \"local_path\": \"/home/user/work/cve/sh-1.0/bin/sh\"\n    }\n", 
                        "name": "command"
                    }, 
                    {
                        "doc": "volume args for booting server from volume\n", 
                        "name": "volume_args"
                    }, 
                    {
                        "doc": "external network name, for floating ip\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "ssh port for SSH connection\n", 
                        "name": "port"
                    }, 
                    {
                        "doc": "bool, floating or fixed IP for SSH connection\n", 
                        "name": "use_floating_ip"
                    }, 
                    {
                        "doc": "whether to use force_delete for servers\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "whether to check connectivity on server creation\n", 
                        "name": "wait_for_ping"
                    }, 
                    {
                        "doc": "The number of tail nova console-log lines user\nwould like to retrieve\n", 
                        "name": "max_log_length"
                    }, 
                    {
                        "doc": "extra arguments for booting the server", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, run script specified in command and delete server.", 
                "module": "rally.plugins.openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "VMTasks.boot_runcommand_delete"
            }, 
            "CeilometerTraits.create_user_and_list_traits@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all traits for certain event type and\ntrait name using GET /v2/event_types/<event_type>/traits/<trait_name>.", 
                "parameters": [], 
                "title": "Create user and fetch all event traits.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.traits", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerTraits.create_user_and_list_traits"
            }, 
            "NeutronSecurityGroup.create_and_update_security_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }, 
                    {
                        "doc": "dict, PUT /v2.0/security-groups\nupdate options\n", 
                        "name": "security_group_update_args"
                    }
                ], 
                "title": "Create and update Neutron security-groups.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_update_security_groups"
            }, 
            "NovaServers.boot_and_get_console_output@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the nova console-log command by retrieving\nthe text console log output.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "The number of tail log lines you would like to retrieve.\nNone (default value) or -1 means unlimited length.\n", 
                        "name": "length"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Get text console output from server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "Text console log output for server", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_get_console_output"
            }, 
            "expand_user_path@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Expands user path.", 
                "module": "rally.plugins.common.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "expand_user_path"
            }, 
            "NovaKeypair.boot_and_delete_server_with_keypair@openstack": {
                "introduced_in": null, 
                "description": "Plan of this scenario:\n\n- create a keypair\n- boot a VM with created keypair\n- delete server\n- delete keypair", 
                "parameters": [
                    {
                        "doc": "ID of the image to be used for server creation\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "ID of the flavor to be used for server creation\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for VM\ncreation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "Deprecated alias for boot_server_kwargs\n", 
                        "name": "server_kwargs"
                    }, 
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot and delete server with keypair.", 
                "module": "rally.plugins.openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.boot_and_delete_server_with_keypair"
            }, 
            "ironic@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for IronicClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "ironic"
            }, 
            "DesignateBasic.create_and_list_zones@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"openstack zone list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 zone on every iteration. So you will have more\nand more zone and will be able to measure the\nperformance of the \"openstack zone list\" command depending on\nthe number of zones owned by users.", 
                "parameters": [], 
                "title": "Create a zone and list all zones.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_zones"
            }, 
            "sahara@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for SaharaClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "sahara"
            }, 
            "swift_objects@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create containers and objects in each tenant.", 
                "module": "rally.plugins.openstack.context.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "object_size": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "containers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "objects_per_container": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "resource_management_workers": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "swift_objects"
            }, 
            "HeatStacks.create_and_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"heat stack-create\" and \"heat stack-delete\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create and then delete a stack.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_and_delete_stack"
            }, 
            "serial@default": {
                "introduced_in": null, 
                "description": "Unlike scenario runners that execute in parallel, the serial scenario\nrunner executes scenarios one-by-one in the same python interpreter process\nas Rally. This allows you to execute scenario without introducing\nany concurrent operations as well as interactively debug the scenario\nfrom the same command that you use to start Rally.", 
                "parameters": [], 
                "title": "Scenario runner that executes scenarios serially.", 
                "module": "rally.plugins.common.runners.serial", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario Runner", 
                "schema": {
                    "additionalProperties": true, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "times": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "serial"
            }, 
            "required_platform@default": {
                "introduced_in": null, 
                "description": "This allows us to create 4 kind of tests cases:\n1) platform independent (validator is not specified)\n2) requires platform with admin\n3) requires platform with admin + users\n4) requires platform with users", 
                "parameters": [
                    {
                        "doc": "name of the platform\n", 
                        "name": "platform"
                    }, 
                    {
                        "doc": "requires admin credential\n", 
                        "name": "admin"
                    }, 
                    {
                        "doc": "requires user credentials", 
                        "name": "users"
                    }
                ], 
                "title": "Validates credentials for specified platform.", 
                "module": "rally.common.validation", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_platform"
            }, 
            "network@openstack": {
                "introduced_in": null, 
                "description": "This creates networks for all tenants, and optionally creates\nanother resources like subnets and routers.", 
                "parameters": [], 
                "title": "Create networking resources.", 
                "module": "rally.plugins.openstack.context.network.networks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "subnets_per_network": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "dualstack": {
                            "type": "boolean"
                        }, 
                        "network_create_args": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "dns_nameservers": {
                            "uniqueItems": true, 
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "networks_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "router": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "external_gateway_info": {
                                    "additionalProperties": false, 
                                    "type": "object", 
                                    "description": "The external gateway information .", 
                                    "properties": {
                                        "network_id": {
                                            "type": "string"
                                        }, 
                                        "enable_snat": {
                                            "type": "boolean"
                                        }
                                    }
                                }, 
                                "external": {
                                    "type": "boolean"
                                }
                            }
                        }, 
                        "start_cidr": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "network"
            }, 
            "SaharaJob.create_launch_job_sequence_with_scaling@openstack": {
                "introduced_in": null, 
                "description": "This scenario Creates a Job entity and launches an execution on a\nCluster for every job object provided. The Cluster is scaled according\nto the deltas values and the sequence is launched again.", 
                "parameters": [
                    {
                        "doc": "list of jobs that should be executed in one context\n", 
                        "name": "jobs"
                    }, 
                    {
                        "doc": "list of integers which will be used to add or\nremove worker nodes from the cluster\n", 
                        "name": "deltas"
                    }
                ], 
                "title": "Create and execute Sahara EDP Jobs on a scaling Cluster.", 
                "module": "rally.plugins.openstack.scenarios.sahara.jobs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaJob.create_launch_job_sequence_with_scaling"
            }, 
            "gnocchi@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for GnocchiClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "gnocchi"
            }, 
            "KeystoneBasic.create_user_update_password@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create user and update password for that user.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_user_update_password"
            }, 
            "manila_share_networks@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "This context creates share networks for Manila project.", 
                "module": "rally.plugins.openstack.context.manila.manila_share_networks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "share_networks": {
                            "additionalProperties": true, 
                            "type": "object", 
                            "description": "\nThis context arg will be used only when context arg \"use_share_networks\" is\nset to True.\n\nIf context arg 'share_networks' has values then they will be used else share\nnetworks will be autocreated - one for each tenant network. If networks do not\nexist then will be created one share network for each tenant without network\ndata.\n\nExpected value is dict of lists where tenant Name or ID is key and list of\nshare_network Names or IDs is value. Example:\n\n   .. code-block:: json\n\n     \"context\": {\n         \"manila_share_networks\": {\n         \"use_share_networks\": true,\n         \"share_networks\": {\n             \"tenant_1_name_or_id\": [\"share_network_1_name_or_id\",\n                                     \"share_network_2_name_or_id\"],\n             \"tenant_2_name_or_id\": [\"share_network_3_name_or_id\"]}\n         }\n     }\n\nAlso, make sure that all 'existing users' in appropriate registered deployment\nhave share networks if its usage is enabled, else Rally will randomly take\nusers that does not satisfy criteria.\n"
                        }, 
                        "use_share_networks": {
                            "type": "boolean", 
                            "description": "Specifies whether manila should use share networks for share creation or not."
                        }
                    }
                }, 
                "name": "manila_share_networks"
            }, 
            "file_dict@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Return the dictionary of items with file path and file content.", 
                "module": "rally.plugins.common.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "file_dict"
            }, 
            "Quotas.neutron_update@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update quotas for neutron.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.neutron_update"
            }, 
            "required_services@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list with names of required services", 
                        "name": "services"
                    }
                ], 
                "title": "Validator checks if specified OpenStack services are available.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_services"
            }, 
            "manila_security_services@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "This context creates 'security services' for Manila project.", 
                "module": "rally.plugins.openstack.context.manila.manila_security_services", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "security_services": {
                            "items": {
                                "additionalProperties": true, 
                                "required": [
                                    "type"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "type": {
                                        "enum": [
                                            "active_directory", 
                                            "kerberos", 
                                            "ldap"
                                        ]
                                    }
                                }, 
                                "description": "Data for creation of security services. \n Example:\n\n   .. code-block:: json\n\n     {'type': 'LDAP', 'dns_ip': 'foo_ip', \n      'server': 'bar_ip', 'domain': 'quuz_domain',\n      'user': 'ololo', 'password': 'fake_password'}\n"
                            }, 
                            "type": "array", 
                            "description": "It is expected to be list of dicts with data for creation of security services."
                        }
                    }
                }, 
                "name": "manila_security_services"
            }, 
            "NovaAggregates.create_and_list_aggregates@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates a aggregate and then lists all aggregates.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create a aggregate and then list all aggregates.", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_list_aggregates"
            }, 
            "NovaAggregates.create_and_update_aggregate@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates an aggregate and then update its name and\navailability_zone", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate and then update its name and availability_zone", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_update_aggregate"
            }, 
            "swift@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for SwiftClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "swift"
            }, 
            "SwiftObjects.list_objects_in_containers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List objects in all containers.", 
                "module": "rally.plugins.openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.list_objects_in_containers"
            }, 
            "CinderVolumeTypes.create_and_list_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates a volume type, secondly creates an\nencryption type for the volume type, thirdly lists all encryption\ntypes.", 
                "parameters": [
                    {
                        "doc": "The encryption type specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "create_specs"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }, 
                    {
                        "doc": "Options used when search for encryption types", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Create and list encryption type", 
                "module": "rally.plugins.openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_list_encryption_type"
            }, 
            "CeilometerQueries.create_and_query_alarms@openstack": {
                "introduced_in": null, 
                "description": "This scenario tests POST /v2/query/alarms\nAn alarm is first created and then fetched using the input query.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "optional filter query dictionary\n", 
                        "name": "filter"
                    }, 
                    {
                        "doc": "optional param for specifying ordering of results\n", 
                        "name": "orderby"
                    }, 
                    {
                        "doc": "optional param for maximum number of results returned\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional parameters for alarm creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm and then query it with specific parameters.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.queries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerQueries.create_and_query_alarms"
            }, 
            "NovaHypervisors.list_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova hypervisor-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List hypervisors.", 
                "module": "rally.plugins.openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_hypervisors"
            }, 
            "ManilaShares.create_security_service_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "security service type, permitted values\nare 'ldap', 'kerberos' or 'active_directory'.\n", 
                        "name": "security_service_type"
                    }, 
                    {
                        "doc": "dns ip address used inside tenant's network\n", 
                        "name": "dns_ip"
                    }, 
                    {
                        "doc": "security service server ip address or hostname\n", 
                        "name": "server"
                    }, 
                    {
                        "doc": "security service domain\n", 
                        "name": "domain"
                    }, 
                    {
                        "doc": "security identifier used by tenant\n", 
                        "name": "user"
                    }, 
                    {
                        "doc": "password used by user\n", 
                        "name": "password"
                    }, 
                    {
                        "doc": "security service description", 
                        "name": "description"
                    }
                ], 
                "title": "Creates security service and then deletes.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_security_service_and_delete"
            }, 
            "cinder_volume_type@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Cinder volume type ID by name or regexp.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "cinder_volume_type"
            }, 
            "MistralExecutions.list_executions@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the Mistral execution-list\ncommand by listing all the executions.", 
                "parameters": [
                    {
                        "doc": "The last execution uuid of the previous page, displays\nlist of executions after \"marker\".\n", 
                        "name": "marker"
                    }, 
                    {
                        "doc": "number Maximum number of executions to return in a single\nresult.\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "id,description\n", 
                        "name": "sort_keys"
                    }, 
                    {
                        "doc": "[SORT_DIRS] Comma-separated list of sort directions.\nDefault: asc.\n", 
                        "name": "sort_dirs"
                    }
                ], 
                "title": "Scenario test mistral execution-list command.", 
                "module": "rally.plugins.openstack.scenarios.mistral.executions", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralExecutions.list_executions"
            }, 
            "CinderQos.create_qos_associate_and_disassociate_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation", 
                        "name": "read_iops_sec"
                    }
                ], 
                "title": "Create a qos, Associate and Disassociate the qos from volume type.", 
                "module": "rally.plugins.openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_qos_associate_and_disassociate_type"
            }, 
            "CeilometerAlarms.create_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test POST /v2/alarms.\nmeter_name and threshold are required parameters for alarm creation.\nkwargs stores other optional parameters like 'ok_actions',\n'project_id' etc that may be passed while creating an alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_alarm"
            }, 
            "NovaServers.boot_server_from_volume_snapshot@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and creates a\nsnapshot from this volume, then boots a server from\nthe created snapshot.\nAssumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "True if NICs should be assigned\n", 
                        "name": "auto_assign_nic"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from a snapshot.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_snapshot"
            }, 
            "CinderQos.create_and_set_qos@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation\n", 
                        "name": "read_iops_sec"
                    }, 
                    {
                        "doc": "update Consumer behavior\n", 
                        "name": "set_consumer"
                    }, 
                    {
                        "doc": "update random write limitation\n", 
                        "name": "set_write_iops_sec"
                    }, 
                    {
                        "doc": "update random read limitation", 
                        "name": "set_read_iops_sec"
                    }
                ], 
                "title": "Create a qos, then Add/Update keys in qos specs.", 
                "module": "rally.plugins.openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_and_set_qos"
            }, 
            "CeilometerResource.list_matched_resources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "lower bound of resource timestamp in isoformat\n", 
                        "name": "start_time"
                    }, 
                    {
                        "doc": "upper bound of resource timestamp in isoformat\n", 
                        "name": "end_time"
                    }, 
                    {
                        "doc": "count of resources in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Get resources that matched fields from context and args.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.resources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerResource.list_matched_resources"
            }, 
            "NovaServers.boot_server_from_volume_and_delete@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and then a server.\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between volume creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from volume and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_and_delete"
            }, 
            "Watcher.create_audit_template_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "The goal audit template is based on\n", 
                        "name": "goal"
                    }, 
                    {
                        "doc": "The strategy used to provide resource optimization\nalgorithm\n", 
                        "name": "strategy"
                    }
                ], 
                "title": "Create audit template and delete it.", 
                "module": "rally.plugins.openstack.scenarios.watcher.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "Watcher.create_audit_template_and_delete"
            }, 
            "roles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for assigning roles for users.", 
                "module": "rally.plugins.openstack.context.keystone.roles", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "items": {
                        "type": "string", 
                        "description": "The name of role to assign to user"
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "array"
                }, 
                "name": "roles"
            }, 
            "Authenticate.validate_ceilometer@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Ceilometer Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_ceilometer"
            }, 
            "MagnumClusters.list_clusters@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"magnum clusters-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "(Optional) The maximum number of results to return\n          per request, if:\n\n1) limit > 0, the maximum number of clusters to return.\n2) limit param is NOT specified (None), the number of items\n   returned respect the maximum imposed by the Magnum API\n   (see Magnum's api.max_limit option).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional additional arguments for clusters listing", 
                        "name": "kwargs"
                    }
                ], 
                "title": "List all clusters.", 
                "module": "rally.plugins.openstack.scenarios.magnum.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MagnumClusters.list_clusters"
            }, 
            "CeilometerStats.get_stats@openstack": {
                "introduced_in": null, 
                "description": "Statistics is fetched for the using\nGET /v2/meters/(meter_name)/statistics.", 
                "parameters": [
                    {
                        "doc": "meter to take statistic for\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "the length of the time range covered by these stats\n", 
                        "name": "period"
                    }, 
                    {
                        "doc": "the fields used to group the samples\n", 
                        "name": "groupby"
                    }, 
                    {
                        "doc": "name of function for samples aggregation\n", 
                        "name": "aggregates"
                    }
                ], 
                "title": "Fetch statistics for certain meter.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.stats", 
                "platform": "openstack", 
                "returns": "list of statistics data", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerStats.get_stats"
            }, 
            "json@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Generates task report in JSON format.", 
                "module": "rally.plugins.common.exporters.json_exporter", 
                "platform": "default", 
                "returns": "", 
                "base": "Task Exporter", 
                "schema": null, 
                "name": "json"
            }, 
            "SaharaJob.create_launch_job@openstack": {
                "introduced_in": null, 
                "description": "This scenario Creates a Job entity and launches an execution on a\nCluster.", 
                "parameters": [
                    {
                        "doc": "type of the Data Processing Job\n", 
                        "name": "job_type"
                    }, 
                    {
                        "doc": "config dict that will be passed to a Job Execution\n", 
                        "name": "configs"
                    }, 
                    {
                        "doc": "index of a job in a sequence. This index will be\nused to create different atomic actions for each job\nin a sequence\n", 
                        "name": "job_idx"
                    }
                ], 
                "title": "Create and execute a Sahara EDP Job.", 
                "module": "rally.plugins.openstack.scenarios.sahara.jobs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaJob.create_launch_job"
            }, 
            "NovaHosts.list_hosts@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova host-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "List nova hosts in an availability-zone.\nNone (default value) means list hosts in all\navailability-zones\n", 
                        "name": "zone"
                    }
                ], 
                "title": "List all nova hosts.", 
                "module": "rally.plugins.openstack.scenarios.nova.hosts", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "removed_in": "0.12.1", 
                "name": "NovaHosts.list_hosts"
            }, 
            "ca_certs@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates ca certs.", 
                "module": "rally.plugins.openstack.context.magnum.ca_certs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "directory": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "ca_certs"
            }, 
            "external_network_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "name of validated network", 
                        "name": "param_name"
                    }
                ], 
                "title": "Validator checks that external network with given name exists.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "external_network_exists"
            }, 
            "KeystoneBasic.create_tenant@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone tenant with random name.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_tenant"
            }, 
            "CinderVolumes.create_and_upload_volume_to_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (integers, in GB), or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume.\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "when set to True volume that is attached to an instance\ncould be uploaded to image\n", 
                        "name": "force"
                    }, 
                    {
                        "doc": "image container format\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "disk format for image\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "deletes image and volume after uploading if True\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and upload a volume to image.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_upload_volume_to_image"
            }, 
            "required_api_versions@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "name of required component\n", 
                        "name": "component"
                    }, 
                    {
                        "doc": "version of required component", 
                        "name": "versions"
                    }
                ], 
                "title": "Validator checks component API versions.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_api_versions"
            }, 
            "NeutronNetworks.create_and_list_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then list all routers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and a given number of routers and list all routers.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_routers"
            }, 
            "Table@default": {
                "introduced_in": null, 
                "description": "Use this plugin for complete output data to display it in HTML report\nas table. This plugin can not be used for additive data because it\ndoes not contain any processing logic.\n\nExamples of using this plugin in Scenario, for saving output data:\n\n.. code-block:: python\n\n    self.add_output(\n        complete={\"title\": \"Arbitrary Table\",\n                  \"description\": \"Just show columns and rows as-is\",\n                  \"chart_plugin\": \"Table\",\n                  \"data\": {\"cols\": [\"foo\", \"bar\", \"spam\"],\n                           \"rows\": [[\"a row\", 1, 2], [\"b row\", 3, 4],\n                                    [\"c row\", 5, 6]]}})", 
                "parameters": [], 
                "title": "Display complete output as table, can not be used for additive data.", 
                "module": "rally.task.processing.charts", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "Table"
            }, 
            "old_validator@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "function that performs validation", 
                        "name": "fn"
                    }
                ], 
                "title": "Legacy validator for OpenStack scenarios", 
                "module": "rally.task.validation", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "old_validator"
            }, 
            "NovaServers.boot_server@openstack": {
                "introduced_in": null, 
                "description": "Assumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if NICs should be assigned\n", 
                        "name": "auto_assign_nic"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server"
            }, 
            "restricted_parameters@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "parameter or parameters list to be validated.\n", 
                        "name": "param_names"
                    }, 
                    {
                        "doc": "sub-dict of \"config\" to search for param_names. if\nnot defined - will search in \"config\"\n", 
                        "name": "subdict"
                    }
                ], 
                "title": "Validates that parameters is not set.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "restricted_parameters"
            }, 
            "NeutronNetworks.create_and_show_network@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create a network and show network details.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_network"
            }, 
            "CeilometerAlarms.list_alarms@openstack": {
                "introduced_in": null, 
                "description": "This scenario fetches list of all alarms using GET /v2/alarms.", 
                "parameters": [], 
                "title": "Fetch all alarms.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.list_alarms"
            }, 
            "K8sPods.create_pods@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "manifest files used to create the pods", 
                        "name": "manifests"
                    }
                ], 
                "title": "create pods and wait for them to be ready.", 
                "module": "rally.plugins.openstack.scenarios.magnum.k8s_pods", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "K8sPods.create_pods"
            }, 
            "DesignateBasic.list_recordsets@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the openstack recordset list command by\nlisting all the recordsets in a zone.", 
                "parameters": [
                    {
                        "doc": "Zone ID", 
                        "name": "zone_id"
                    }
                ], 
                "title": "List Designate recordsets.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_recordsets"
            }, 
            "NovaHypervisors.list_and_get_uptime_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "The scenario first list all hypervisors,then display\nthe uptime of the listed hypervisors in turn.\n\nMeasure the \"nova hypervisor-uptime\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List hypervisors,then display the uptime of it.", 
                "module": "rally.plugins.openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_and_get_uptime_hypervisors"
            }, 
            "DesignateBasic.create_and_delete_server@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting servers\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then delete a server.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_server"
            }, 
            "NeutronSecurityGroup.create_and_list_security_group_rules@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-rule-create\" and \"neutron\nsecurity-group-rule-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_args"
                    }, 
                    {
                        "doc": "dict,\nPOST /v2.0/security-group-rules request options\n", 
                        "name": "security_group_rule_args"
                    }
                ], 
                "title": "Create and list Neutron security-group-rules.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_list_security_group_rules"
            }, 
            "NeutronNetworks.create_and_delete_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-create\" and \"net-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create and delete a network.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_networks"
            }, 
            "NovaServers.list_servers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario test the nova list command by listing\nall the servers.", 
                "parameters": [
                    {
                        "doc": "True if detailed information about servers\nshould be listed\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all servers.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.list_servers"
            }, 
            "CinderVolumes.create_volume@openstack": {
                "introduced_in": null, 
                "description": "Good test to check how influence amount of active volumes on\nperformance of creating new.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume"
            }, 
            "NeutronBGPVPN.create_and_list_bgpvpns@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Create a bgpvpn and then list all bgpvpns", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_list_bgpvpns"
            }, 
            "router@openstack": {
                "introduced_in": null, 
                "description": "This creates router for all tenants.", 
                "parameters": [], 
                "title": "Create networking resources.", 
                "module": "rally.plugins.openstack.context.network.routers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "external_gateway_info": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "description": "The external gateway information .", 
                            "properties": {
                                "network_id": {
                                    "type": "string"
                                }, 
                                "enable_snat": {
                                    "type": "boolean"
                                }
                            }
                        }, 
                        "availability_zone_hints": {
                            "type": "boolean", 
                            "description": "Require router_availability_zone extension."
                        }, 
                        "network_id": {
                            "type": "string", 
                            "description": "Network ID"
                        }, 
                        "routers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "distributed": {
                            "type": "boolean", 
                            "description": "Distributed router. Require dvr extension."
                        }, 
                        "admin_state_up ": {
                            "type": "boolean", 
                            "description": "A human-readable description for the resource"
                        }, 
                        "ha": {
                            "type": "boolean", 
                            "description": "Highly-available router. Require l3-ha."
                        }, 
                        "external_fixed_ips": {
                            "items": {
                                "additionalProperties": false, 
                                "type": "object", 
                                "properties": {
                                    "subnet_id": {
                                        "type": "string"
                                    }, 
                                    "ip_address": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Ip(s) of the external gateway interface."
                        }
                    }
                }, 
                "name": "router"
            }, 
            "HeatStacks.create_check_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of the following commands:\n- heat stack-create\n- heat action-check\n- heat stack-delete", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create, check and delete a stack.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_check_delete_stack"
            }, 
            "GlanceImages.create_and_download_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create an image, then download data of the image.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_download_image"
            }, 
            "NovaServers.boot_and_show_server@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the nova show command by retrieving\nthe server details.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Show server details.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "Server details", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_show_server"
            }, 
            "NovaServers.resize_shutoff_server@openstack": {
                "introduced_in": null, 
                "description": "This test will confirm the resize by default,\nor revert the resize if confirm is set to false.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "True if need to confirm resize else revert resize\n", 
                        "name": "confirm"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server and stop it, then resize and delete it.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.resize_shutoff_server"
            }, 
            "GlanceImages.create_and_get_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create and get detailed information of an image.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_get_image"
            }, 
            "Dummy.dummy_output@default": {
                "introduced_in": null, 
                "description": "This scenario generates example of output data.", 
                "parameters": [
                    {
                        "doc": "max int limit for generated random values", 
                        "name": "random_range"
                    }
                ], 
                "title": "Generate dummy output.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy_output"
            }, 
            "NovaAgents.list_agents@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova agent-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "List agent builds on a specific hypervisor.\nNone (default value) means list for all\nhypervisors\n", 
                        "name": "hypervisor"
                    }
                ], 
                "title": "List all builds.", 
                "module": "rally.plugins.openstack.scenarios.nova.agents", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAgents.list_agents"
            }, 
            "glance_image_args@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Process Glance image create options to look similar in case of V1/V2.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "glance_image_args"
            }, 
            "SwiftObjects.create_container_and_object_then_download_object@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int, number of objects to upload\n", 
                        "name": "objects_per_container"
                    }, 
                    {
                        "doc": "int, temporary local object size\n", 
                        "name": "object_size"
                    }, 
                    {
                        "doc": "dict, optional parameters to create container", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create container and objects then download all objects.", 
                "module": "rally.plugins.openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.create_container_and_object_then_download_object"
            }, 
            "ManilaShares.create_and_extend_share@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "share protocol for new share\navailable values are NFS, CIFS, CephFS, GlusterFS and HDFS.\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "size in GiB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "new size of the share in GiB\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "ID of the snapshot\n", 
                        "name": "snapshot_id"
                    }, 
                    {
                        "doc": "description of a share\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "optional metadata to set on share creation\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "either instance of ShareNetwork or text with ID\n", 
                        "name": "share_network"
                    }, 
                    {
                        "doc": "either instance of ShareType or text with ID\n", 
                        "name": "share_type"
                    }, 
                    {
                        "doc": "whether to set share as public or not.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "availability zone of the share\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "ID of the share group to which the share\nshould belong\n", 
                        "name": "share_group_id"
                    }
                ], 
                "title": "Create and extend a share", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_extend_share"
            }, 
            "CeilometerResource.list_resources@openstack": {
                "introduced_in": null, 
                "description": "This scenario fetches list of all resources using GET /v2/resources.", 
                "parameters": [
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "lower bound of resource timestamp in isoformat\n", 
                        "name": "start_time"
                    }, 
                    {
                        "doc": "upper bound of resource timestamp in isoformat\n", 
                        "name": "end_time"
                    }, 
                    {
                        "doc": "count of resources in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Check all available queries for list resource request.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.resources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerResource.list_resources"
            }, 
            "required_param_or_context@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "name of parameter\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "name of context", 
                        "name": "ctx_name"
                    }
                ], 
                "title": "Validator checks if required image is specified.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_param_or_context"
            }, 
            "NeutronNetworks.create_and_delete_ports@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron port-create\" and \"neutron port-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create and delete a port.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_ports"
            }, 
            "DesignateBasic.create_and_update_domain@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and updating domains\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then update a domain.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_update_domain"
            }, 
            "sahara_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for adding and tagging Sahara images.", 
                "module": "rally.plugins.openstack.context.sahara.sahara_image", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "oneOf": [
                        {
                            "required": [
                                "image_url", 
                                "username", 
                                "plugin_name", 
                                "hadoop_version"
                            ], 
                            "description": "Create an image."
                        }, 
                        {
                            "required": [
                                "image_uuid"
                            ], 
                            "description": "Use an existing image."
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "username": {
                            "type": "string"
                        }, 
                        "image_uuid": {
                            "type": "string"
                        }, 
                        "hadoop_version": {
                            "type": "string"
                        }, 
                        "image_url": {
                            "type": "string"
                        }, 
                        "plugin_name": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_image"
            }, 
            "clusters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of Magnum clusters.", 
                "module": "rally.plugins.openstack.context.magnum.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "node_count": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "cluster_template_uuid": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "clusters"
            }, 
            "HeatStacks.create_suspend_resume_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat action-suspend\nheat action-resume\nheat stack-delete", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create, suspend-resume and then delete a stack.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_suspend_resume_delete_stack"
            }, 
            "sahara_job_binaries@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up Job Binaries for an EDP job.", 
                "module": "rally.plugins.openstack.context.sahara.sahara_job_binaries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "libs": {
                            "items": {
                                "additionalProperties": false, 
                                "required": [
                                    "name", 
                                    "download_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }, 
                                    "download_url": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }, 
                        "mains": {
                            "items": {
                                "additionalProperties": false, 
                                "required": [
                                    "name", 
                                    "download_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }, 
                                    "download_url": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "name": "sahara_job_binaries"
            }, 
            "GlanceImages.create_and_update_image@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"glance image-create\" and \"glance image-update\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "List of property names to remove.\n(It is only supported by Glance v2.)\n", 
                        "name": "remove_props"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "create_min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "create_min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the created image\n", 
                        "name": "create_properties"
                    }, 
                    {
                        "doc": "The min disk of updated images\n", 
                        "name": "update_min_disk"
                    }, 
                    {
                        "doc": "The min ram of updated images", 
                        "name": "update_min_ram"
                    }
                ], 
                "title": "Create an image then update it.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_update_image"
            }, 
            "performance_degradation@default": {
                "introduced_in": null, 
                "description": "This SLA plugin finds minimum and maximum duration of\niterations completed without errors during Rally task execution.\nAssuming that minimum duration is 100%, it calculates\nperformance degradation against maximum duration.", 
                "parameters": [], 
                "title": "Calculates performance degradation based on iteration time", 
                "module": "rally.plugins.common.sla.performance_degradation", 
                "platform": "default", 
                "returns": "", 
                "base": "SLA", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "max_degradation"
                    ], 
                    "type": "object", 
                    "properties": {
                        "max_degradation": {
                            "minimum": 0.0, 
                            "type": "number"
                        }
                    }
                }, 
                "name": "performance_degradation"
            }, 
            "NovaServers.pause_and_unpause_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server, pause, unpause and then delete it", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.pause_and_unpause_server"
            }, 
            "HeatStacks.create_stack_and_list_output@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-list", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and list outputs by using new algorithm.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_list_output"
            }, 
            "CinderVolumes.list_volumes@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the cinder list command by listing\nall the volumes.", 
                "parameters": [
                    {
                        "doc": "True if detailed information about volumes\nshould be listed\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all volumes.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.list_volumes"
            }, 
            "Authenticate.validate_heat@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Heat Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_heat"
            }, 
            "manila@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for ManilaClient which returns an authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "manila"
            }, 
            "existing_network@openstack": {
                "introduced_in": null, 
                "description": "This context should be used on a deployment with existing users.", 
                "parameters": [], 
                "title": "This context supports using existing networks in Rally.", 
                "module": "rally.plugins.openstack.context.network.existing_network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object"
                }, 
                "name": "existing_network"
            }, 
            "tempest@openstack": {
                "introduced_in": null, 
                "description": "**Description**:\n\n    Quote from official documentation:\n\n      This is a set of integration tests to be run against a live OpenStack\n      cluster. Tempest has batteries of tests for OpenStack API validation,\n      Scenarios, and other specific tests useful in validating an OpenStack\n      deployment.\n\n    Rally supports features listed below:\n\n    * *cloning Tempest*: repository and version can be specified\n    * *installation*: system-wide with checking existence of required\n      packages or in virtual environment\n    * *configuration*: options are discovered via OpenStack API, but you can\n      override them if you need\n    * *running*: pre-creating all required resources(i.e images, tenants,\n      etc), prepare arguments, launching Tempest, live-progress output\n    * *results*: all verifications are stored in db, you can built reports,\n      compare verification at whatever you want time.\n\n    Appeared in Rally 0.8.0 *(actually, it appeared long time ago with first\n    revision of Verification Component, but 0.8.0 is mentioned since it is\n    first release after Verification Component redesign)*\n\n**Running arguments**:\n\n* *concurrency*: Number of processes to be used for launching tests. In case of 0 value, number of processes will be equal to number of CPU cores.\n* *load_list*: a list of tests to launch.\n* *pattern*: a regular expression of tests to launch.\n* *set*: Name of predefined set of tests. Known names: full, smoke, baremetal, clustering, compute, database, data_processing, identity, image, messaging, network, object_storage, orchestration, telemetry, volume, scenario\n* *skip_list*: a list of tests to skip (actually, it is a dict where keys are names of tests, values are reasons).\n* *xfail_list*: a list of tests that are expected to fail (actually, it is a dict where keys are names of tests, values are reasons).\n\n**Installation arguments**:\n\n* *system_wide*: Whether or not to use the system-wide environment for verifier instead of a virtual environment. Defaults to False.\n* *source*: Path or URL to the repo to clone verifier from. Defaults to https://git.openstack.org/openstack/tempest\n* *version*: Branch, tag or commit ID to checkout before verifier installation. Defaults to 'master'.", 
                "parameters": [], 
                "title": "Tempest verifier.", 
                "module": "rally.plugins.openstack.verification.tempest.manager", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Verifier Manager", 
                "schema": null, 
                "name": "tempest"
            }, 
            "HeatStacks.create_stack_and_list_output_via_API@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-list", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and list outputs by using old algorithm.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_list_output_via_API"
            }, 
            "NovaHypervisors.list_and_get_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "The scenario first lists all hypervisors, then get detailed information\nof the listed hypervisors in turn.\n\nMeasure the \"nova hypervisor-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List and Get hypervisors.", 
                "module": "rally.plugins.openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_and_get_hypervisors"
            }, 
            "Authenticate.validate_cinder@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Cinder Client to ensure validation of token.", 
                "module": "rally.plugins.openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_cinder"
            }, 
            "NovaServers.boot_server_attach_created_volume_and_live_migrate@openstack": {
                "introduced_in": null, 
                "description": "Simple test to create a VM and attach a volume, then migrate the VM,\ndetach the volume and delete volume/VM.\n\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between attaching a volume and running live\nmigration (of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "Specifies the migration type\n", 
                        "name": "block_migration"
                    }, 
                    {
                        "doc": "Specifies whether to allow overcommit\non migrated instance or not\n", 
                        "name": "disk_over_commit"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)", 
                        "name": "max_sleep"
                    }
                ], 
                "title": "Create a VM, attach a volume to it and live migrate.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_attach_created_volume_and_live_migrate"
            }, 
            "CinderVolumes.list_types@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the cinder type-list command by listing\nall the volume types.", 
                "parameters": [
                    {
                        "doc": "Options used when search for volume types\n", 
                        "name": "search_opts"
                    }, 
                    {
                        "doc": "If query public volume type", 
                        "name": "is_public"
                    }
                ], 
                "title": "List all volume types.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.list_types"
            }, 
            "NeutronNetworks.create_and_update_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets\nand then updates the subnet. This scenario measures the\n\"neutron subnet-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/subnets update options\n", 
                        "name": "subnet_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and update a subnet.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_subnets"
            }, 
            "NeutronNetworks.create_and_delete_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then delete all routers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and delete a given number of routers.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_routers"
            }, 
            "CinderVolumes.create_volume_from_snapshot@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "if True, a snapshot and a volume will\nbe deleted after creation.\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a snapshot\n", 
                        "name": "create_snapshot_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume-snapshot, then create a volume from this snapshot.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_from_snapshot"
            }, 
            "KeystoneBasic.create_add_and_list_user_roles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create user role, add it and list user roles for given user.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_add_and_list_user_roles"
            }, 
            "NovaAggregates.create_aggregate_add_and_remove_host@openstack": {
                "introduced_in": null, 
                "description": "Measure \"nova aggregate-add-host\" and \"nova aggregate-remove-host\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate, add a host to and remove the host from it", 
                "module": "rally.plugins.openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_aggregate_add_and_remove_host"
            }, 
            "Dummy.dummy_exception@default": {
                "introduced_in": null, 
                "description": "Dummy.dummy_exception used for testing if exceptions are processed\nproperly by task engine and analyze rally results storing & displaying\ncapabilities.", 
                "parameters": [
                    {
                        "doc": "int size of the exception message\n", 
                        "name": "size_of_message"
                    }, 
                    {
                        "doc": "idle time of method (in seconds).\n", 
                        "name": "sleep"
                    }, 
                    {
                        "doc": "message of the exception\n", 
                        "name": "message"
                    }
                ], 
                "title": "Throws an exception.", 
                "module": "rally.plugins.common.scenarios.dummy.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.dummy_exception"
            }, 
            "CinderVolumes.create_and_attach_volume@openstack": {
                "introduced_in": null, 
                "description": "Simple test to create a VM and attach a volume, then\ndetach the volume and delete volume/VM.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "optional arguments for volume creation\n", 
                        "name": "create_volume_params"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "create_vm_params"
                    }, 
                    {
                        "doc": "(deprecated) optional arguments for VM creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a VM and attach a volume to it.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_attach_volume"
            }, 
            "keypair@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create Nova KeyPair for each user.", 
                "module": "rally.plugins.openstack.context.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "type": "object"
                }, 
                "name": "keypair"
            }, 
            "NovaServers.boot_and_delete_server@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between volume creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot and delete a server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_delete_server"
            }, 
            "NovaFlavors.list_flavors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova flavor-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Whether flavor needs to be return with details\n(optional).\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Filter flavors with provided access type (optional).\nNone means give all flavors and only admin has query\naccess to all flavor types.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "Begin returning flavors that appear later in the flavor\nlist than that represented by this flavor id (optional).\n", 
                        "name": "marker"
                    }, 
                    {
                        "doc": "Filters the flavors by a minimum disk space, in GiB.\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "Filters the flavors by a minimum RAM, in MB.\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "maximum number of flavors to return (optional).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "Flavors list sort key (optional).\n", 
                        "name": "sort_key"
                    }, 
                    {
                        "doc": "Flavors list sort direction (optional).", 
                        "name": "sort_dir"
                    }
                ], 
                "title": "List all flavors.", 
                "module": "rally.plugins.openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.list_flavors"
            }, 
            "MagnumClusterTemplates.list_cluster_templates@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"magnum cluster_template-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "(Optional) The maximum number of results to return\n          per request, if:\n\n1) limit > 0, the maximum number of cluster_templates to return.\n2) limit param is NOT specified (None), the number of items\n   returned respect the maximum imposed by the Magnum API\n   (see Magnum's api.max_limit option).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional additional arguments for cluster_templates\nlisting\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "List all cluster_templates.", 
                "module": "rally.plugins.openstack.scenarios.magnum.cluster_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MagnumClusterTemplates.list_cluster_templates"
            }, 
            "NeutronSecurityGroup.create_and_delete_security_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }
                ], 
                "title": "Create and delete Neutron security-groups.", 
                "module": "rally.plugins.openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_delete_security_groups"
            }, 
            "GlanceImages.create_and_list_image@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"glance image-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 image on every iteration. So you will have more\nand more images and will be able to measure the\nperformance of the \"glance image-list\" command depending on\nthe number of images owned by users.", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create an image and then list all images.", 
                "module": "rally.plugins.openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_list_image"
            }, 
            "validate_heat_template@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of parameters to be validated.", 
                        "name": "params"
                    }
                ], 
                "title": "Validates heat template.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "validate_heat_template"
            }, 
            "ZaqarBasic.producer_consumer@openstack": {
                "introduced_in": null, 
                "description": "Creates a Zaqar queue with random name, sends a set of messages\nand then retrieves an iterator containing those.", 
                "parameters": [
                    {
                        "doc": "min number of messages to be posted\n", 
                        "name": "min_msg_count"
                    }, 
                    {
                        "doc": "max number of messages to be posted\n", 
                        "name": "max_msg_count"
                    }, 
                    {
                        "doc": "other optional parameters to create queues like\n\"metadata\"\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Serial message producer/consumer.", 
                "module": "rally.plugins.openstack.scenarios.zaqar.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "ZaqarBasic.producer_consumer"
            }, 
            "KeystoneBasic.add_and_remove_user_role@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create a user role add to a user and disassociate.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.add_and_remove_user_role"
            }, 
            "allow_ssh@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Sets up security groups for all users to access VM via SSH.", 
                "module": "rally.plugins.openstack.context.network.allow_ssh", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "type": "null"
                }, 
                "name": "allow_ssh"
            }, 
            "CeilometerEvents.create_user_and_get_event@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches one event using GET /v2/events/<message_id>.", 
                "parameters": [], 
                "title": "Create user and gets event.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.events", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerEvents.create_user_and_get_event"
            }, 
            "SwiftObjects.list_and_download_objects_in_containers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List and download objects in all containers.", 
                "module": "rally.plugins.openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.list_and_download_objects_in_containers"
            }, 
            "GnocchiArchivePolicyRule.list_archive_policy_rule@openstack": {
                "introduced_in": "0.11.1", 
                "description": "", 
                "parameters": [], 
                "title": "List archive policy rules.", 
                "module": "rally.plugins.openstack.scenarios.gnocchi.archive_policy_rule", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicyRule.list_archive_policy_rule"
            }, 
            "NovaKeypair.create_and_delete_keypair@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates a keypair and then delete that keypair.", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keypair with random name and delete keypair.", 
                "module": "rally.plugins.openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.create_and_delete_keypair"
            }, 
            "glance_image@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Glance's image ID by name or regexp.", 
                "module": "rally.plugins.openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "glance_image"
            }, 
            "ManilaShares.list_share_servers@openstack": {
                "introduced_in": null, 
                "description": "Requires admin creds.", 
                "parameters": [
                    {
                        "doc": "container of following search opts:\n\"host\", \"status\", \"share_network\" and \"project_id\".\n", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Lists share servers.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.list_share_servers"
            }, 
            "KeystoneBasic.create_and_get_role@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for roles creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a user role and get it detailed information.", 
                "module": "rally.plugins.openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_get_role"
            }, 
            "K8sPods.list_pods@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List all pods.", 
                "module": "rally.plugins.openstack.scenarios.magnum.k8s_pods", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "K8sPods.list_pods"
            }, 
            "CinderVolumes.list_transfers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the \"cinder transfer-list\" command by\nlisting all the volume transfers.", 
                "parameters": [
                    {
                        "doc": "If True, detailed information about volume transfer\nshould be listed\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Search options to filter out volume transfers.", 
                        "name": "search_opts"
                    }
                ], 
                "title": "List all transfers.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.list_transfers"
            }, 
            "Quotas.cinder_update@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update quotas for Cinder.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.cinder_update"
            }, 
            "ManilaShares.create_and_list_share@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between share creation and list\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "share protocol, valid values are NFS, CIFS,\nGlusterFS and HDFS\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "share size in GB, should be greater than 0\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "defines whether to get detailed list of shares or not\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "optional args to create a share", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a share and list all shares.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_list_share"
            }, 
            "MonascaMetrics.list_metrics@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "optional arguments for list query:\nname, dimensions, start_time, etc\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Fetch user's metrics.", 
                "module": "rally.plugins.openstack.scenarios.monasca.metrics", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MonascaMetrics.list_metrics"
            }, 
            "sahara_input_data_sources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up Input Data Sources for an EDP job.", 
                "module": "rally.plugins.openstack.context.sahara.sahara_input_data_sources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "input_type", 
                        "input_url"
                    ], 
                    "type": "object", 
                    "properties": {
                        "input_type": {
                            "enum": [
                                "swift", 
                                "hdfs"
                            ]
                        }, 
                        "swift_files": {
                            "items": {
                                "additionalProperties": false, 
                                "required": [
                                    "name", 
                                    "download_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }, 
                                    "download_url": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }, 
                        "input_url": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_input_data_sources"
            }, 
            "CinderQos.create_and_get_qos@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation", 
                        "name": "read_iops_sec"
                    }
                ], 
                "title": "Create a qos, then get details of the qos.", 
                "module": "rally.plugins.openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_and_get_qos"
            }, 
            "DesignateBasic.create_and_delete_records@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting records\nwith different level of load.", 
                "parameters": [
                    {
                        "doc": "Records to create pr domain.", 
                        "name": "records_per_domain"
                    }
                ], 
                "title": "Create and then delete records.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_records"
            }, 
            "HeatStacks.create_stack_and_scale@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of autoscaling webhooks.", 
                "parameters": [
                    {
                        "doc": "path to template file that includes an\nOS::Heat::AutoScalingGroup resource\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "the stack output key that corresponds to\nthe scaling webhook\n", 
                        "name": "output_key"
                    }, 
                    {
                        "doc": "the number of instances the stack is expected to\nchange by.\n", 
                        "name": "delta"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template (dict of file name to\nfile path)\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition (dict)", 
                        "name": "environment"
                    }
                ], 
                "title": "Create an autoscaling stack and invoke a scaling policy.", 
                "module": "rally.plugins.openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_scale"
            }, 
            "NeutronLoadbalancerV1.create_and_delete_vips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-vip-create\" and \"neutron lb-vip-delete\"\ncommand performance. The scenario creates a vip for pool and\nthen deletes those vips.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options\n", 
                        "name": "pool_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/vips request options", 
                        "name": "vip_create_args"
                    }
                ], 
                "title": "Create a vip(v1) and then delete vips(v1).", 
                "module": "rally.plugins.openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_delete_vips"
            }, 
            "max_seconds_per_iteration@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Maximum time for one iteration in seconds.", 
                "module": "rally.plugins.common.sla.iteration_time", 
                "platform": "default", 
                "returns": "", 
                "base": "SLA", 
                "schema": {
                    "exclusiveMinimum": true, 
                    "minimum": 0.0, 
                    "type": "number"
                }, 
                "name": "max_seconds_per_iteration"
            }, 
            "DesignateBasic.create_and_delete_zone@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting zones\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then delete a zone.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_zone"
            }, 
            "ManilaShares.create_share_network_and_list@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "ID of Neutron network\n", 
                        "name": "neutron_net_id"
                    }, 
                    {
                        "doc": "ID of Neutron subnet\n", 
                        "name": "neutron_subnet_id"
                    }, 
                    {
                        "doc": "ID of Nova network\n", 
                        "name": "nova_net_id"
                    }, 
                    {
                        "doc": "share network description\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "defines either to return detailed list of\nobjects or not.\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "container of search opts such as\n\"name\", \"nova_net_id\", \"neutron_net_id\", etc.\n", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Creates share network and then lists it.", 
                "module": "rally.plugins.openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_share_network_and_list"
            }, 
            "servers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of Nova Servers per each tenant.", 
                "module": "rally.plugins.openstack.context.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "required": [
                        "image", 
                        "flavor"
                    ], 
                    "type": "object", 
                    "properties": {
                        "servers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Number of servers to boot in each Tenant."
                        }, 
                        "image": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "description": "Name of image to boot server(s) from.", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "auto_assign_nic": {
                            "type": "boolean", 
                            "description": "True if NICs should be assigned."
                        }, 
                        "flavor": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "description": "Name of flavor to boot server(s) with.", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "nics": {
                            "minItems": 1, 
                            "items": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false, 
                                        "type": "object", 
                                        "properties": {
                                            "net-id": {
                                                "type": "string"
                                            }
                                        }, 
                                        "description": "Network ID in a format like OpenStack API expects to see."
                                    }, 
                                    {
                                        "type": "string", 
                                        "description": "Network ID."
                                    }
                                ]
                            }, 
                            "type": "array", 
                            "description": "List of networks to attach to server."
                        }
                    }
                }, 
                "name": "servers"
            }, 
            "SaharaNodeGroupTemplates.create_and_list_node_group_templates@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates two Node Group Templates with different set of\nnode processes. The master Node Group Template contains Hadoop's\nmanagement processes. The worker Node Group Template contains\nHadoop's worker processes.\n\nBy default the templates are created for the vanilla Hadoop\nprovisioning plugin using the version 1.2.1\n\nAfter the templates are created the list operation is called.", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Create and list Sahara Node Group Templates.", 
                "module": "rally.plugins.openstack.scenarios.sahara.node_group_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SaharaNodeGroupTemplates.create_and_list_node_group_templates"
            }, 
            "junit-xml@default": {
                "introduced_in": null, 
                "description": "An example of the report (All dates, numbers, names appearing in this\nexample are fictitious. Any resemblance to real things is purely\ncoincidental):\n\n.. code-block:: xml\n\n  <testsuites>\n    <!--Report is generated by Rally 0.10.0 at 2017-06-04T05:14:00-->\n    <testsuite id=\"task-uu-ii-dd\"\n               errors=\"0\"\n               failures=\"1\"\n               skipped=\"0\"\n               tests=\"2\"\n               time=\"75.0\"\n               timestamp=\"2017-06-04T05:14:00\">\n      <testcase classname=\"CinderVolumes\"\n                name=\"list_volumes\"\n                id=\"workload-1-uuid\"\n                time=\"29.9695231915\"\n                timestamp=\"2017-06-04T05:14:44\" />\n      <testcase classname=\"NovaServers\"\n                name=\"list_keypairs\"\n                id=\"workload-2-uuid\"\n                time=\"5\"\n                timestamp=\"2017-06-04T05:15:15\">\n        <failure>ooops</failure>\n      </testcase>\n    </testsuite>\n  </testsuites>", 
                "parameters": [], 
                "title": "Generates task report in JUnit-XML format.", 
                "module": "rally.plugins.common.exporters.junit", 
                "platform": "default", 
                "returns": "", 
                "base": "Task Exporter", 
                "schema": null, 
                "name": "junit-xml"
            }, 
            "dummy_context@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Dummy context.", 
                "module": "rally.plugins.common.contexts.dummy", 
                "platform": "default", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "fail_cleanup": {
                            "type": "boolean"
                        }, 
                        "fail_setup": {
                            "type": "boolean"
                        }
                    }
                }, 
                "name": "dummy_context"
            }, 
            "designate@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for DesignateClient which returns authenticated native client.", 
                "module": "rally.plugins.openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "designate"
            }, 
            "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_routers@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\",\n\"neutron bgpvpn-router-assoc-create\" and\n\"neutron bgpvpn-router-assoc-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a router and disassociate it from a BGP VPN.", 
                "module": "rally.plugins.openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_routers"
            }, 
            "MagnumClusters.create_and_list_clusters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "the cluster node count.\n", 
                        "name": "node_count"
                    }, 
                    {
                        "doc": "optional, if user want to use an existing\ncluster_template\n", 
                        "name": "cluster_template_uuid"
                    }, 
                    {
                        "doc": "optional additional arguments for cluster creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "create cluster and then list all clusters.", 
                "module": "rally.plugins.openstack.scenarios.magnum.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MagnumClusters.create_and_list_clusters"
            }, 
            "MuranoPackages.import_and_list_packages@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"murano import-package\" and \"murano package-list\" commands\nperformance.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared) and gets list of imported packages.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }, 
                    {
                        "doc": "specifies whether the disabled packages will\nbe included in a the result or not.\nDefault value is False.\n", 
                        "name": "include_disabled"
                    }
                ], 
                "title": "Import Murano package and get list of packages.", 
                "module": "rally.plugins.openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.import_and_list_packages"
            }, 
            "existing@openstack": {
                "introduced_in": null, 
                "description": "It may be used to test any existing OpenStack API compatible cloud.", 
                "parameters": [], 
                "title": "Default plugin for OpenStack platform", 
                "module": "rally.plugins.openstack.platforms.existing", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Platform", 
                "schema": {
                    "additionalProperties": false, 
                    "definitions": {
                        "user": {
                            "oneOf": [
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "username", 
                                        "password", 
                                        "tenant_name"
                                    ], 
                                    "description": "Keystone V2.0", 
                                    "properties": {
                                        "username": {
                                            "type": "string"
                                        }, 
                                        "tenant_name": {
                                            "type": "string"
                                        }, 
                                        "password": {
                                            "type": "string"
                                        }
                                    }
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "username", 
                                        "password", 
                                        "project_name"
                                    ], 
                                    "description": "Keystone V3.0", 
                                    "properties": {
                                        "username": {
                                            "type": "string"
                                        }, 
                                        "project_name": {
                                            "type": "string"
                                        }, 
                                        "user_domain_name": {
                                            "type": "string"
                                        }, 
                                        "domain_name": {
                                            "type": "string"
                                        }, 
                                        "password": {
                                            "type": "string"
                                        }, 
                                        "project_domain_name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ], 
                            "type": "object"
                        }
                    }, 
                    "type": "object", 
                    "properties": {
                        "endpoint": {
                            "type": [
                                "string", 
                                "null"
                            ]
                        }, 
                        "region_name": {
                            "type": "string"
                        }, 
                        "https_insecure": {
                            "type": "boolean"
                        }, 
                        "profiler_hmac_key": {
                            "type": [
                                "string", 
                                "null"
                            ]
                        }, 
                        "admin": {
                            "$ref": "#/definitions/user"
                        }, 
                        "https_cacert": {
                            "type": "string"
                        }, 
                        "endpoint_type": {
                            "enum": [
                                "public", 
                                "internal", 
                                "admin", 
                                null
                            ]
                        }, 
                        "auth_url": {
                            "type": "string"
                        }, 
                        "users": {
                            "minItems": 1, 
                            "items": {
                                "$ref": "#/definitions/user"
                            }, 
                            "type": "array"
                        }, 
                        "profiler_conn_str": {
                            "type": [
                                "string", 
                                "null"
                            ]
                        }
                    }, 
                    "anyOf": [
                        {
                            "required": [
                                "admin", 
                                "auth_url"
                            ], 
                            "description": "The case when the admin is specified and the users can be created via 'users@openstack' context or 'existing_users' will be used."
                        }, 
                        {
                            "required": [
                                "users", 
                                "auth_url"
                            ], 
                            "description": "The case when the only existing users are specified."
                        }
                    ]
                }, 
                "name": "existing"
            }, 
            "Quotas.cinder_get@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder quota-show\" command performance", 
                "parameters": [], 
                "title": "Get quotas for Cinder.", 
                "module": "rally.plugins.openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.cinder_get"
            }, 
            "SaharaClusters.create_scale_delete_cluster@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a Hadoop cluster, waits until it becomes\n'Active'. Then a series of scale operations is applied. The scaling\nhappens according to numbers listed in", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups. Deprecated.\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the master\ninstance of the cluster\n", 
                        "name": "master_flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the workers of\nthe cluster\n", 
                        "name": "worker_flavor"
                    }, 
                    {
                        "doc": "number of worker instances in a cluster\n", 
                        "name": "workers_count"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "list of integers which will be used to add or\nremove worker nodes from the cluster\n", 
                        "name": "deltas"
                    }, 
                    {
                        "doc": "floating ip pool name from which Floating\nIPs will be allocated. Sahara will determine\nautomatically how to treat this depending on\nits own configurations. Defaults to None\nbecause in some cases Sahara may work w/o\nFloating IPs.\n", 
                        "name": "floating_ip_pool"
                    }, 
                    {
                        "doc": "id of a Neutron network that will be used\nfor fixed IPs. This parameter is ignored when\nNova Network is set up.\n", 
                        "name": "neutron_net_id"
                    }, 
                    {
                        "doc": "number of Cinder volumes that will be\nattached to every cluster node\n", 
                        "name": "volumes_per_node"
                    }, 
                    {
                        "doc": "size of each Cinder volume in GB\n", 
                        "name": "volumes_size"
                    }, 
                    {
                        "doc": "boolean value. If set to True Sahara will\ncreate a Security Group for each Node Group\nin the Cluster automatically.\n", 
                        "name": "auto_security_group"
                    }, 
                    {
                        "doc": "list of security groups that will be used\nwhile creating VMs. If auto_security_group\nis set to True this list can be left empty.\n", 
                        "name": "security_groups"
                    }, 
                    {
                        "doc": "configs dict that will be passed to each Node\nGroup\n", 
                        "name": "node_configs"
                    }, 
                    {
                        "doc": "configs dict that will be passed to the\nCluster\n", 
                        "name": "cluster_configs"
                    }, 
                    {
                        "doc": "If set to true the vms will be scheduled\none per compute node.\n", 
                        "name": "enable_anti_affinity"
                    }, 
                    {
                        "doc": "Use Master Node of a Cluster as a Proxy node and\ndo not assign floating ips to workers.\n", 
                        "name": "enable_proxy"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Launch, scale and delete a Sahara Cluster.", 
                "module": "rally.plugins.openstack.scenarios.sahara.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaClusters.create_scale_delete_cluster"
            }, 
            "file_exists@default": {
                "introduced_in": null, 
                "description": "Ensure a file exists and can be accessed with the specified mode.\nNote that path to file will be expanded before access checking.", 
                "parameters": [
                    {
                        "doc": "Name of parameter to validate\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "Access mode to test for. This should be one of:\n* os.F_OK (file exists)\n* os.R_OK (file is readable)\n* os.W_OK (file is writable)\n* os.X_OK (file is executable)\n\nIf multiple modes are required they can be added, eg:\n    mode=os.R_OK+os.W_OK\n", 
                        "name": "mode"
                    }, 
                    {
                        "doc": "Boolean indicating whether this argument is required.", 
                        "name": "required"
                    }
                ], 
                "title": "Validator checks parameter is proper path to file with proper mode.", 
                "module": "rally.plugins.common.validators", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "file_exists"
            }, 
            "NovaServers.boot_and_migrate_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a VM on a compute node available in\nthe availability zone, and then migrates the VM\nto another compute node on the same availability zone.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Migrate a server.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_migrate_server"
            }, 
            "CinderVolumes.create_volume_backup@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "if True, a volume and a volume backup will\nbe deleted after creation.\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Create a volume backup.", 
                "module": "rally.plugins.openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_backup"
            }, 
            "NeutronNetworks.create_and_show_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets\nand show the subnet details. This scenario measures the\n\"neutron subnet-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and show a subnet details.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_subnets"
            }, 
            "NeutronNetworks.list_agents@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the \"neutron agent-list\" command by\nlisting all the neutron agents.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/agents request options", 
                        "name": "agent_args"
                    }
                ], 
                "title": "List all neutron agents.", 
                "module": "rally.plugins.openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.list_agents"
            }, 
            "NovaServers.boot_server_attach_volume_and_list_attachments@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova volume-attachments\" command performance.", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB), default 1G\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "the num of attached volume\n", 
                        "name": "volume_num"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation", 
                        "name": "create_volume_kwargs"
                    }
                ], 
                "title": "Create a VM, attach N volume to it and list server's attachemnt.", 
                "module": "rally.plugins.openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_attach_volume_and_list_attachments"
            }, 
            "images@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Uploads specified Glance images to every tenant.", 
                "module": "rally.plugins.openstack.context.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "oneOf": [
                        {
                            "required": [
                                "image_url", 
                                "disk_format", 
                                "container_format"
                            ], 
                            "description": "It is been used since Rally 0.10.0"
                        }, 
                        {
                            "required": [
                                "image_url", 
                                "image_type", 
                                "container_format"
                            ], 
                            "description": "One of backward compatible way"
                        }, 
                        {
                            "required": [
                                "image_url", 
                                "disk_format", 
                                "image_container"
                            ], 
                            "description": "One of backward compatible way"
                        }, 
                        {
                            "required": [
                                "image_url", 
                                "image_type", 
                                "image_container"
                            ], 
                            "description": "One of backward compatible way"
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "image_container": {
                            "type": "string", 
                            "description": "This param is deprecated since Rally-0.10.0, use `container_format` instead."
                        }, 
                        "container_format": {
                            "enum": [
                                "aki", 
                                "ami", 
                                "ari", 
                                "bare", 
                                "docker", 
                                "ova", 
                                "ovf"
                            ], 
                            "description": "Format of the image container."
                        }, 
                        "min_ram": {
                            "minimum": 0, 
                            "type": "integer", 
                            "description": "Amount of RAM in MB"
                        }, 
                        "disk_format": {
                            "enum": [
                                "qcow2", 
                                "raw", 
                                "vhd", 
                                "vmdk", 
                                "vdi", 
                                "iso", 
                                "aki", 
                                "ari", 
                                "ami"
                            ], 
                            "description": "The format of the disk."
                        }, 
                        "image_name": {
                            "type": "string", 
                            "description": "The name of image to create. NOTE: it will be ignored in case when `images_per_tenant` is bigger then 1."
                        }, 
                        "visibility": {
                            "enum": [
                                "public", 
                                "private", 
                                "shared", 
                                "community"
                            ], 
                            "description": "Visibility for this image ('shared' and 'community' are available only in case of Glance V2)."
                        }, 
                        "images_per_tenant": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "The number of images to create per one single tenant."
                        }, 
                        "image_url": {
                            "type": "string", 
                            "description": "Location of the source to create image from."
                        }, 
                        "image_type": {
                            "enum": [
                                "qcow2", 
                                "raw", 
                                "vhd", 
                                "vmdk", 
                                "vdi", 
                                "iso", 
                                "aki", 
                                "ari", 
                                "ami"
                            ], 
                            "description": "This param is deprecated since Rally-0.10.0, use `disk_format` instead."
                        }, 
                        "min_disk": {
                            "minimum": 0, 
                            "type": "integer", 
                            "description": "Amount of disk space in GB"
                        }, 
                        "image_args": {
                            "additionalProperties": true, 
                            "type": "object", 
                            "description": "This param is deprecated since Rally-0.10.0, specify exact arguments in a root section of context instead."
                        }
                    }
                }, 
                "name": "images"
            }, 
            "DesignateBasic.list_servers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the designate server-list command by listing\nall the servers.", 
                "parameters": [], 
                "title": "List Designate servers.", 
                "module": "rally.plugins.openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_servers"
            }, 
            "GnocchiArchivePolicyRule.create_delete_archive_policy_rule@openstack": {
                "introduced_in": "0.11.1", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Pattern for matching metrics\n", 
                        "name": "metric_pattern"
                    }, 
                    {
                        "doc": "Archive policy name", 
                        "name": "archive_policy_name"
                    }
                ], 
                "title": "Create archive policy rule and then delete it.", 
                "module": "rally.plugins.openstack.scenarios.gnocchi.archive_policy_rule", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicyRule.create_delete_archive_policy_rule"
            }, 
            "CeilometerQueries.create_and_query_samples@openstack": {
                "introduced_in": null, 
                "description": "This scenario tests POST /v2/query/samples\nA sample is first created and then fetched using the input query.", 
                "parameters": [
                    {
                        "doc": "specifies name of the counter\n", 
                        "name": "counter_name"
                    }, 
                    {
                        "doc": "specifies type of the counter\n", 
                        "name": "counter_type"
                    }, 
                    {
                        "doc": "specifies unit of the counter\n", 
                        "name": "counter_unit"
                    }, 
                    {
                        "doc": "specifies volume of the counter\n", 
                        "name": "counter_volume"
                    }, 
                    {
                        "doc": "specifies resource id for the sample created\n", 
                        "name": "resource_id"
                    }, 
                    {
                        "doc": "optional filter query dictionary\n", 
                        "name": "filter"
                    }, 
                    {
                        "doc": "optional param for specifying ordering of results\n", 
                        "name": "orderby"
                    }, 
                    {
                        "doc": "optional param for maximum number of results returned\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "parameters for sample creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a sample and then query it with specific parameters.", 
                "module": "rally.plugins.openstack.scenarios.ceilometer.queries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerQueries.create_and_query_samples"
            }, 
            "volume_type_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines variable to be used as the flag to\ndetermine if volume types should be checked for\nexistence.\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "defines volume_type param is required", 
                        "name": "nullable"
                    }
                ], 
                "title": "Returns validator for volume types.", 
                "module": "rally.plugins.openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "volume_type_exists"
            }, 
            "IronicNodes.create_and_delete_node@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "The name of the driver used to manage this Node.\n", 
                        "name": "driver"
                    }, 
                    {
                        "doc": "Key/value pair describing the physical\ncharacteristics of the node.\n", 
                        "name": "properties"
                    }, 
                    {
                        "doc": "Optional additional arguments for node creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and delete node.", 
                "module": "rally.plugins.openstack.scenarios.ironic.nodes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "IronicNodes.create_and_delete_node"
            }
        }, 
        "options": {
            "DEFAULT": [
                {
                    "default": 180.0, 
                    "deprecated_opts": [], 
                    "type": "floating point value", 
                    "name": "openstack_client_http_timeout", 
                    "help": "HTTP timeout for any of OpenStack service in seconds"
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "rally-debug", 
                    "help": "Print debugging output only for Rally. Off-site components stay quiet."
                }, 
                {
                    "default": 1000, 
                    "deprecated_opts": [], 
                    "type": "integer value", 
                    "name": "raw_result_chunk_size", 
                    "help": "Size of raw result chunk in iterations"
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "debug", 
                    "help": "If set to true, the logging level will be set to DEBUG instead of the default INFO level."
                }, 
                {
                    "default": null, 
                    "deprecated_opts": [
                        {
                            "group": null, 
                            "name": "log-config"
                        }, 
                        {
                            "group": null, 
                            "name": "log_config"
                        }
                    ], 
                    "type": "string value", 
                    "name": "log-config-append", 
                    "help": "The name of a logging configuration file. This file is appended to any existing logging configuration files. For details about logging configuration files, see the Python logging module documentation. Note that when logging configuration files are used then all logging configuration is set in the configuration file and other logging configuration options are ignored (for example, logging_context_format_string)."
                }, 
                {
                    "default": "%Y-%m-%d %H:%M:%S", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "log-date-format", 
                    "help": "Defines the format string for %%(asctime)s in log records. Default: %(default)s . This option is ignored if log_config_append is set."
                }, 
                {
                    "default": null, 
                    "deprecated_opts": [
                        {
                            "group": null, 
                            "name": "logfile"
                        }
                    ], 
                    "type": "string value", 
                    "name": "log-file", 
                    "help": "(Optional) Name of log file to send logging output to. If no default is set, logging will go to stderr as defined by use_stderr. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": null, 
                    "deprecated_opts": [
                        {
                            "group": null, 
                            "name": "logdir"
                        }
                    ], 
                    "type": "string value", 
                    "name": "log-dir", 
                    "help": "(Optional) The base directory used for relative log_file  paths. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "watch-log-file", 
                    "help": "Uses logging handler designed to watch file system. When log file is moved or removed this handler will open a new log file with specified path instantaneously. It makes sense only if log_file option is specified and Linux platform is used. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "use-syslog", 
                    "help": "Use syslog for logging. Existing syslog format is DEPRECATED and will be changed later to honor RFC5424. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "use-journal", 
                    "help": "Enable journald for logging. If running in a systemd environment you may wish to enable journal support. Doing so will use the journal native protocol which includes structured metadata in addition to log messages.This option is ignored if log_config_append is set."
                }, 
                {
                    "default": "LOG_USER", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "syslog-log-facility", 
                    "help": "Syslog facility to receive log lines. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "use-json", 
                    "help": "Use JSON formatting for logging. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "use_stderr", 
                    "help": "Log output to standard error. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": "%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "logging_context_format_string", 
                    "help": "Format string to use for log messages with context."
                }, 
                {
                    "default": "%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "logging_default_format_string", 
                    "help": "Format string to use for log messages when context is undefined."
                }, 
                {
                    "default": "%(funcName)s %(pathname)s:%(lineno)d", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "logging_debug_format_suffix", 
                    "help": "Additional data to append to log message when logging level for the message is DEBUG."
                }, 
                {
                    "default": "%(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "logging_exception_prefix", 
                    "help": "Prefix each line of exception output with this format."
                }, 
                {
                    "default": "%(user)s %(tenant)s %(domain)s %(user_domain)s %(project_domain)s", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "logging_user_identity_format", 
                    "help": "Defines the format string for %(user_identity)s that is used in logging_context_format_string."
                }, 
                {
                    "default": [
                        "amqp=WARN", 
                        "amqplib=WARN", 
                        "boto=WARN", 
                        "qpid=WARN", 
                        "sqlalchemy=WARN", 
                        "suds=INFO", 
                        "oslo.messaging=INFO", 
                        "oslo_messaging=INFO", 
                        "iso8601=WARN", 
                        "requests.packages.urllib3.connectionpool=WARN", 
                        "urllib3.connectionpool=WARN", 
                        "websocket=WARN", 
                        "requests.packages.urllib3.util.retry=WARN", 
                        "urllib3.util.retry=WARN", 
                        "keystonemiddleware=WARN", 
                        "routes.middleware=WARN", 
                        "stevedore=WARN", 
                        "taskflow=WARN", 
                        "keystoneauth=WARN", 
                        "oslo.cache=INFO", 
                        "dogpile.core.dogpile=INFO"
                    ], 
                    "deprecated_opts": [], 
                    "type": "list value", 
                    "name": "default_log_levels", 
                    "help": "List of package logging levels in logger=LEVEL pairs. This option is ignored if log_config_append is set."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "publish_errors", 
                    "help": "Enables or disables publication of error events."
                }, 
                {
                    "default": "[instance: %(uuid)s] ", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "instance_format", 
                    "help": "The format for an instance that is passed with the log message."
                }, 
                {
                    "default": "[instance: %(uuid)s] ", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "instance_uuid_format", 
                    "help": "The format for an instance UUID that is passed with the log message."
                }, 
                {
                    "default": 0, 
                    "deprecated_opts": [], 
                    "type": "integer value", 
                    "name": "rate_limit_interval", 
                    "help": "Interval, number of seconds, of log rate limiting."
                }, 
                {
                    "default": 0, 
                    "deprecated_opts": [], 
                    "type": "integer value", 
                    "name": "rate_limit_burst", 
                    "help": "Maximum number of logged messages per rate_limit_interval."
                }, 
                {
                    "default": "CRITICAL", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "rate_limit_except_level", 
                    "help": "Log level name used by rate limiting: CRITICAL, ERROR, INFO, WARNING, DEBUG or empty string. Logs with level greater or equal to rate_limit_except_level are not filtered. An empty string means that all levels are filtered."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "fatal_deprecations", 
                    "help": "Enables or disables fatal status of deprecations."
                }
            ], 
            "openstack": [
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_create_prepoll_delay", 
                    "help": "Time to sleep after creating a resource before polling for it status"
                }, 
                {
                    "default": 600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_create_timeout", 
                    "help": "Time to wait for cinder volume to be created."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_create_poll_interval", 
                    "help": "Interval between checks when waiting for volume creation."
                }, 
                {
                    "default": 600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_delete_timeout", 
                    "help": "Time to wait for cinder volume to be deleted."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_delete_poll_interval", 
                    "help": "Interval between checks when waiting for volume deletion."
                }, 
                {
                    "default": 600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_backup_restore_timeout", 
                    "help": "Time to wait for cinder backup to be restored."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_backup_restore_poll_interval", 
                    "help": "Interval between checks when waiting for backup restoring."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ec2_server_boot_prepoll_delay", 
                    "help": "Time to sleep after boot before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ec2_server_boot_timeout", 
                    "help": "Server boot timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ec2_server_boot_poll_interval", 
                    "help": "Server boot poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_create_prepoll_delay", 
                    "help": "Time(in sec) to sleep after creating a resource before polling for it status."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_create_timeout", 
                    "help": "Time(in sec) to wait for heat stack to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack creation."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_delete_timeout", 
                    "help": "Time(in sec) to wait for heat stack to be deleted."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_delete_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack deletion."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_check_timeout", 
                    "help": "Time(in sec) to wait for stack to be checked."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_check_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack checking."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_update_prepoll_delay", 
                    "help": "Time(in sec) to sleep after updating a resource before polling for it status."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_update_timeout", 
                    "help": "Time(in sec) to wait for stack to be updated."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_update_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack update."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_suspend_timeout", 
                    "help": "Time(in sec) to wait for stack to be suspended."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_suspend_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack suspend."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_resume_timeout", 
                    "help": "Time(in sec) to wait for stack to be resumed."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_resume_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack resume."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_snapshot_timeout", 
                    "help": "Time(in sec) to wait for stack snapshot to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_snapshot_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack snapshot to be created."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_restore_timeout", 
                    "help": "Time(in sec) to wait for stack to be restored from snapshot."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_restore_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack to be restored."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_scale_timeout", 
                    "help": "Time (in sec) to wait for stack to scale up or down."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_scale_poll_interval", 
                    "help": "Time interval (in sec) between checks when waiting for a stack to scale up or down."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_create_poll_interval", 
                    "help": "Interval(in sec) between checks when waiting for node creation."
                }, 
                {
                    "default": 300, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_create_timeout", 
                    "help": "Ironic node create timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_poll_interval", 
                    "help": "Ironic node poll interval"
                }, 
                {
                    "default": 300, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_delete_timeout", 
                    "help": "Ironic node create timeout"
                }, 
                {
                    "default": 5.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "magnum_cluster_create_prepoll_delay", 
                    "help": "Time(in sec) to sleep after creating a resource before polling for the status."
                }, 
                {
                    "default": 2400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "magnum_cluster_create_timeout", 
                    "help": "Time(in sec) to wait for magnum cluster to be created."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "magnum_cluster_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for cluster creation."
                }, 
                {
                    "default": 1200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_pod_create_timeout", 
                    "help": "Time(in sec) to wait for k8s pod to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_pod_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for k8s pod creation."
                }, 
                {
                    "default": 1200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_rc_create_timeout", 
                    "help": "Time(in sec) to wait for k8s rc to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_rc_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for k8s rc creation."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_create_prepoll_delay", 
                    "help": "Delay between creating Manila share and polling for its status."
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_create_timeout", 
                    "help": "Timeout for Manila share creation."
                }, 
                {
                    "default": 3.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_create_poll_interval", 
                    "help": "Interval between checks when waiting for Manila share creation."
                }, 
                {
                    "default": 180.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_delete_timeout", 
                    "help": "Timeout for Manila share deletion."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_delete_poll_interval", 
                    "help": "Interval between checks when waiting for Manila share deletion."
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_create_timeout", 
                    "help": "Timeout for Manila access creation."
                }, 
                {
                    "default": 3.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_create_poll_interval", 
                    "help": "Interval between checks when waiting for Manila access creation."
                }, 
                {
                    "default": 180.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_delete_timeout", 
                    "help": "Timeout for Manila access deletion."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_delete_poll_interval", 
                    "help": "Interval between checks when waiting for Manila access deletion."
                }, 
                {
                    "default": 200, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "mistral_execution_timeout", 
                    "help": "mistral execution timeout"
                }, 
                {
                    "default": 15.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "monasca_metric_create_prepoll_delay", 
                    "help": "Delay between creating Monasca metrics and polling for its elements."
                }, 
                {
                    "default": 1200, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": "deploy_environment_timeout"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "murano_deploy_environment_timeout", 
                    "help": "A timeout in seconds for an environment deploy"
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": "deploy_environment_check_interval"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "murano_deploy_environment_check_interval", 
                    "help": "Deploy environment check interval in seconds"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_start_prepoll_delay", 
                    "help": "Time to sleep after start before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_start_timeout", 
                    "help": "Server start timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_start_poll_interval", 
                    "help": "Server start poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [], 
                    "type": "floating point value", 
                    "name": "nova_server_stop_prepoll_delay", 
                    "help": "Time to sleep after stop before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_stop_timeout", 
                    "help": "Server stop timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_stop_poll_interval", 
                    "help": "Server stop poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_boot_prepoll_delay", 
                    "help": "Time to sleep after boot before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_boot_timeout", 
                    "help": "Server boot timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_boot_poll_interval", 
                    "help": "Server boot poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_delete_prepoll_delay", 
                    "help": "Time to sleep after delete before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_delete_timeout", 
                    "help": "Server delete timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_delete_poll_interval", 
                    "help": "Server delete poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_reboot_prepoll_delay", 
                    "help": "Time to sleep after reboot before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_reboot_timeout", 
                    "help": "Server reboot timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_reboot_poll_interval", 
                    "help": "Server reboot poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rebuild_prepoll_delay", 
                    "help": "Time to sleep after rebuild before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rebuild_timeout", 
                    "help": "Server rebuild timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rebuild_poll_interval", 
                    "help": "Server rebuild poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rescue_prepoll_delay", 
                    "help": "Time to sleep after rescue before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rescue_timeout", 
                    "help": "Server rescue timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rescue_poll_interval", 
                    "help": "Server rescue poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unrescue_prepoll_delay", 
                    "help": "Time to sleep after unrescue before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unrescue_timeout", 
                    "help": "Server unrescue timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unrescue_poll_interval", 
                    "help": "Server unrescue poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_suspend_prepoll_delay", 
                    "help": "Time to sleep after suspend before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_suspend_timeout", 
                    "help": "Server suspend timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_suspend_poll_interval", 
                    "help": "Server suspend poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resume_prepoll_delay", 
                    "help": "Time to sleep after resume before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resume_timeout", 
                    "help": "Server resume timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resume_poll_interval", 
                    "help": "Server resume poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_pause_prepoll_delay", 
                    "help": "Time to sleep after pause before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_pause_timeout", 
                    "help": "Server pause timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_pause_poll_interval", 
                    "help": "Server pause poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unpause_prepoll_delay", 
                    "help": "Time to sleep after unpause before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unpause_timeout", 
                    "help": "Server unpause timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unpause_poll_interval", 
                    "help": "Server unpause poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_shelve_prepoll_delay", 
                    "help": "Time to sleep after shelve before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_shelve_timeout", 
                    "help": "Server shelve timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_shelve_poll_interval", 
                    "help": "Server shelve poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unshelve_prepoll_delay", 
                    "help": "Time to sleep after unshelve before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unshelve_timeout", 
                    "help": "Server unshelve timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unshelve_poll_interval", 
                    "help": "Server unshelve poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_create_prepoll_delay", 
                    "help": "Time to sleep after image_create before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_create_timeout", 
                    "help": "Server image_create timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_create_poll_interval", 
                    "help": "Server image_create poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_delete_prepoll_delay", 
                    "help": "Time to sleep after image_delete before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_delete_timeout", 
                    "help": "Server image_delete timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_delete_poll_interval", 
                    "help": "Server image_delete poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_prepoll_delay", 
                    "help": "Time to sleep after resize before polling for status"
                }, 
                {
                    "default": 400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_timeout", 
                    "help": "Server resize timeout"
                }, 
                {
                    "default": 5.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_poll_interval", 
                    "help": "Server resize poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_confirm_prepoll_delay", 
                    "help": "Time to sleep after resize_confirm before polling for status"
                }, 
                {
                    "default": 200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_confirm_timeout", 
                    "help": "Server resize_confirm timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_confirm_poll_interval", 
                    "help": "Server resize_confirm poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_revert_prepoll_delay", 
                    "help": "Time to sleep after resize_revert before polling for status"
                }, 
                {
                    "default": 200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_revert_timeout", 
                    "help": "Server resize_revert timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_revert_poll_interval", 
                    "help": "Server resize_revert poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_live_migrate_prepoll_delay", 
                    "help": "Time to sleep after live_migrate before polling for status"
                }, 
                {
                    "default": 400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_live_migrate_timeout", 
                    "help": "Server live_migrate timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_live_migrate_poll_interval", 
                    "help": "Server live_migrate poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_migrate_prepoll_delay", 
                    "help": "Time to sleep after migrate before polling for status"
                }, 
                {
                    "default": 400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_migrate_timeout", 
                    "help": "Server migrate timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_migrate_poll_interval", 
                    "help": "Server migrate poll interval"
                }, 
                {
                    "default": 200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_detach_volume_timeout", 
                    "help": "Nova volume detach timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_detach_volume_poll_interval", 
                    "help": "Nova volume detach poll interval"
                }, 
                {
                    "default": true, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "boolean value", 
                    "name": "enable_profiler", 
                    "help": "Enable or disable osprofiler to trace the scenarios"
                }, 
                {
                    "default": 1800, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_cluster_create_timeout", 
                    "help": "A timeout in seconds for a cluster create operation"
                }, 
                {
                    "default": 900, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_cluster_delete_timeout", 
                    "help": "A timeout in seconds for a cluster delete operation"
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_cluster_check_interval", 
                    "help": "Cluster status polling interval in seconds"
                }, 
                {
                    "default": 600, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_job_execution_timeout", 
                    "help": "A timeout in seconds for a Job Execution to complete"
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_job_check_interval", 
                    "help": "Job Execution status polling interval in seconds"
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_workers_per_proxy", 
                    "help": "Amount of workers one proxy should serve to."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "vm_ping_poll_interval", 
                    "help": "Interval between checks when waiting for a VM to become pingable"
                }, 
                {
                    "default": 120.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "vm_ping_timeout", 
                    "help": "Time to wait for a VM to become pingable"
                }, 
                {
                    "default": 120.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_delete_timeout", 
                    "help": "Time to wait for glance image to be deleted."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_delete_poll_interval", 
                    "help": "Interval between checks when waiting for image deletion."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_prepoll_delay", 
                    "help": "Time to sleep after creating a resource before polling for it status"
                }, 
                {
                    "default": 120.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_timeout", 
                    "help": "Time to wait for glance image to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_poll_interval", 
                    "help": "Interval between checks when waiting for image creation."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_prepoll_delay", 
                    "help": "Time to sleep after creating a resource before polling for it status"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_poll_interval", 
                    "help": "Interval between checks when waiting for image creation."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "watcher_audit_launch_poll_interval", 
                    "help": "Watcher audit launch interval"
                }, 
                {
                    "default": 300, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "watcher_audit_launch_timeout", 
                    "help": "Watcher audit launch timeout"
                }, 
                {
                    "default": "http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_url", 
                    "help": "image URL"
                }, 
                {
                    "default": "qcow2", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_disk_format", 
                    "help": "Image disk format to use when creating the image"
                }, 
                {
                    "default": "bare", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_container_format", 
                    "help": "Image container format to use when creating the image"
                }, 
                {
                    "default": "^.*(cirros|testvm).*$", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_name_regex", 
                    "help": "Regular expression for name of a public image to discover it in the cloud and use it for the tests. Note that when Rally is searching for the image, case insensitive matching is performed. Specify nothing ('img_name_regex =') if you want to disable discovering. In this case Rally will create needed resources by itself if the values for the corresponding config options are not specified in the Tempest config file"
                }, 
                {
                    "default": "Member", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "swift_operator_role", 
                    "help": "Role required for users to be able to create Swift containers"
                }, 
                {
                    "default": "ResellerAdmin", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "swift_reseller_admin_role", 
                    "help": "User role that has reseller admin"
                }, 
                {
                    "default": "heat_stack_owner", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "heat_stack_owner_role", 
                    "help": "Role required for users to be able to manage Heat stacks"
                }, 
                {
                    "default": "heat_stack_user", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "heat_stack_user_role", 
                    "help": "Role for Heat template-defined users"
                }, 
                {
                    "default": "64", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "flavor_ref_ram", 
                    "help": "Primary flavor RAM size used by most of the test cases"
                }, 
                {
                    "default": "128", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "flavor_ref_alt_ram", 
                    "help": "Alternate reference flavor RAM size used by test thatneed two flavors, like those that resize an instance"
                }, 
                {
                    "default": "64", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "heat_instance_type_ram", 
                    "help": "RAM size flavor used for orchestration test cases"
                }, 
                {
                    "default": 30, 
                    "deprecated_opts": [
                        {
                            "group": "roles_context", 
                            "name": "resource_management_workers"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "roles_context_resource_management_workers", 
                    "help": "How many concurrent threads to use for serving roles context"
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": "resource_management_workers"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "users_context_resource_management_workers", 
                    "help": "The number of concurrent threads to use for serving users context."
                }, 
                {
                    "default": "default", 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "project_domain", 
                    "help": "ID of domain in which projects will be created."
                }, 
                {
                    "default": "default", 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "user_domain", 
                    "help": "ID of domain in which users will be created."
                }, 
                {
                    "default": "member", 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "keystone_default_role", 
                    "help": "The default role name of the keystone to assign to users."
                }, 
                {
                    "default": 600, 
                    "deprecated_opts": [
                        {
                            "group": "cleanup", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "resource_deletion_timeout", 
                    "help": "A timeout in seconds for deleting resources"
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [
                        {
                            "group": "cleanup", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "cleanup_threads", 
                    "help": "Number of cleanup threads to run"
                }, 
                {
                    "default": 3600, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "senlin_action_timeout", 
                    "help": "Time in seconds to wait for senlin action to finish."
                }, 
                {
                    "default": 500.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "neutron_create_loadbalancer_timeout", 
                    "help": "Neutron create loadbalancer timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "neutron_create_loadbalancer_poll_interval", 
                    "help": "Neutron create loadbalancer poll interval"
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "pre_newton_neutron", 
                    "help": "Whether Neutron API is older then OpenStack Newton or not. Based in this option, some external fields for identifying resources can be applied."
                }
            ], 
            "database": [
                {
                    "default": true, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": null
                        }
                    ], 
                    "type": "boolean value", 
                    "name": "sqlite_synchronous", 
                    "help": "If True, SQLite uses synchronous mode."
                }, 
                {
                    "default": "sqlalchemy", 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "db_backend"
                        }
                    ], 
                    "type": "string value", 
                    "name": "backend", 
                    "help": "The back end to use for the database."
                }, 
                {
                    "default": null, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_connection"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "sql_connection"
                        }, 
                        {
                            "group": "sql", 
                            "name": "connection"
                        }
                    ], 
                    "type": "string value", 
                    "name": "connection", 
                    "help": "The SQLAlchemy connection string to use to connect to the database."
                }, 
                {
                    "default": null, 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "slave_connection", 
                    "help": "The SQLAlchemy connection string to use to connect to the slave database."
                }, 
                {
                    "default": "TRADITIONAL", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "mysql_sql_mode", 
                    "help": "The SQL mode to be used for MySQL sessions. This option, including the default, overrides any server-set SQL mode. To use whatever SQL mode is set by the server configuration, set this to no value. Example: mysql_sql_mode="
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "mysql_enable_ndb", 
                    "help": "If True, transparently enables support for handling MySQL Cluster (NDB)."
                }, 
                {
                    "default": 3600, 
                    "deprecated_opts": [
                        {
                            "group": "DATABASE", 
                            "name": "idle_timeout"
                        }, 
                        {
                            "group": "database", 
                            "name": "idle_timeout"
                        }, 
                        {
                            "group": "DEFAULT", 
                            "name": "sql_idle_timeout"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "sql_idle_timeout"
                        }, 
                        {
                            "group": "sql", 
                            "name": "idle_timeout"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "connection_recycle_time", 
                    "help": "Connections which have been present in the connection pool longer than this number of seconds will be replaced with a new one the next time they are checked out from the pool."
                }, 
                {
                    "default": 1, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_min_pool_size"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "sql_min_pool_size"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "min_pool_size", 
                    "help": "Minimum number of SQL connections to keep open in a pool."
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_max_pool_size"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "sql_max_pool_size"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "max_pool_size", 
                    "help": "Maximum number of SQL connections to keep open in a pool. Setting a value of 0 indicates no limit."
                }, 
                {
                    "default": 10, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_max_retries"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "sql_max_retries"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "max_retries", 
                    "help": "Maximum number of database connection retries during startup. Set to -1 to specify an infinite retry count."
                }, 
                {
                    "default": 10, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_retry_interval"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "reconnect_interval"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "retry_interval", 
                    "help": "Interval between retries of opening a SQL connection."
                }, 
                {
                    "default": 50, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_max_overflow"
                        }, 
                        {
                            "group": "DATABASE", 
                            "name": "sqlalchemy_max_overflow"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "max_overflow", 
                    "help": "If set, use this value for max_overflow with SQLAlchemy."
                }, 
                {
                    "default": 0, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_connection_debug"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "connection_debug", 
                    "help": "Verbosity of SQL debugging information: 0=None, 100=Everything."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [
                        {
                            "group": "DEFAULT", 
                            "name": "sql_connection_trace"
                        }
                    ], 
                    "type": "boolean value", 
                    "name": "connection_trace", 
                    "help": "Add Python stack traces to SQL as comment strings."
                }, 
                {
                    "default": null, 
                    "deprecated_opts": [
                        {
                            "group": "DATABASE", 
                            "name": "sqlalchemy_pool_timeout"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "pool_timeout", 
                    "help": "If set, use this value for pool_timeout with SQLAlchemy."
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "use_db_reconnect", 
                    "help": "Enable the experimental use of database reconnect on connection lost."
                }, 
                {
                    "default": 1, 
                    "deprecated_opts": [], 
                    "type": "integer value", 
                    "name": "db_retry_interval", 
                    "help": "Seconds between retries of a database transaction."
                }, 
                {
                    "default": true, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "db_inc_retry_interval", 
                    "help": "If True, increases the interval between retries of a database operation up to db_max_retry_interval."
                }, 
                {
                    "default": 10, 
                    "deprecated_opts": [], 
                    "type": "integer value", 
                    "name": "db_max_retry_interval", 
                    "help": "If db_inc_retry_interval is set, the maximum seconds between retries of a database operation."
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [], 
                    "type": "integer value", 
                    "name": "db_max_retries", 
                    "help": "Maximum retries in case of connection error or deadlock error before error is raised. Set to -1 to specify an infinite retry count."
                }, 
                {
                    "default": "", 
                    "deprecated_opts": [], 
                    "type": "string value", 
                    "name": "connection_parameters", 
                    "help": "Optional URL parameters to append onto the connection URL at connect time; specify as param1=value1&param2=value2&..."
                }
            ]
        }, 
        "plugins_bases": {
            "Resource Type": "", 
            "Context": "", 
            "Scenario": "This is base class for any scenario.\n\nAll Scenario Plugins should be subclass of this class.\n", 
            "Verifier Manager": "Verifier base class.\n\nThis class provides an interface for operating specific tool.\n", 
            "Platform": "", 
            "Validator": "A base class for all validators.", 
            "Hook Trigger": "Factory for hook trigger classes.", 
            "Task Exporter": "Base class for all exporters for Tasks.", 
            "Scenario Runner": "Base class for all scenario runners.\n\nScenario runner is an entity that implements a certain strategy of\nlaunching scenarios plugins, e.g. running them continuously or\nperiodically for a given number of times or seconds.\nThese strategies should be implemented in subclasses of ScenarioRunner\nin the_run_scenario() method.\n", 
            "Verification Reporter": "Base class for all reporters for verifications.", 
            "SLA": "Factory for criteria classes.", 
            "Hook Action": "Factory for hook classes.", 
            "Chart": "Base class for charts.\n\nThis is a base for all plugins that prepare data for specific charts\nin HTML report. Each chart must at least declare chart widget and\nprepare data that is suitable for rendering by JavaScript.\n", 
            "OS Client": "Base class for openstack clients"
        }
    }, 
    "rally-openstack": {
        "changelog": "=========\nChangelog\n=========\n\n.. Changelogs are for humans, not machines. The end users of Rally project are\n   human beings who care about what's is changing, why and how it affects them.\n   Please leave these notes as much as possible human oriented.\n\n.. Each release can use the next sections:\n    - **Added** for new features.\n    - **Changed** for changes in existing functionality.\n    - **Deprecated** for soon-to-be removed features/plugins.\n    - **Removed** for now removed features/plugins.\n    - **Fixed** for any bug fixes.\n\n.. Release notes for existing releases are MUTABLE! If there is something that\n   was missed or can be improved, feel free to change it!\n\n[1.1.0] - 2018-05-11\n--------------------\n\nAdded\n~~~~~\n\n* [scenario plugin] GnocchiMetric.list_metric\n* [scenario plugin] GnocchiMetric.create_metric\n* [scenario plugin] GnocchiMetric.create_delete_metric\n* [scenario plugin] GnocchiResource.create_resource\n* [scenario plugin] GnocchiResource.create_delete_resource\n* Introduce *__version__*, *__version_tuple__* at *rally_openstack* module.\n  As like other python packages each release of *rally-openstack* package can\n  introduce new things, deprecate or even remove other ones. To simplify\n  integration with other plugins which depends on *rally-openstack*, the new\n  properties can be used with proper checks.\n\nChanged\n~~~~~~~\n\n* `Docker image <https://hub.docker.com/r/xrally/xrally-openstack>`_ ported\n  to publish images from `rally-openstack\n  <https://github.com/openstack/rally-openstack>`_ repo instead of using the\n  rally framework repository.\n  Also, the CI is extended to check ability to build Docker image for any of\n  changes.\n* An interface of ResourceType plugins is changed since Rally 0.12. All our\n  plugins are adopted to support it.\n  The port is done in a backward compatible way, so the minimum required\n  version of Rally still is 0.11.0, but we suggest you to use the latest\n  release of Rally.\n\nRemoved\n~~~~~~~\n\n* Calculation of the duration for \"nova.bind_actions\" action. It shows\n  only duration of initialization Rally inner class and can be easily\n  misunderstood as some kind of \"Nova operation\".\n  Affects 1 inner scenario \"NovaServers.boot_and_bounce_server\".\n\nFixed\n~~~~~\n\n* ``required_services`` validator should not check services which are\n  configured via ``api_versions@openstack`` context since the proper validation\n  is done at the context itself.\n  The inner check for ``api_versions@openstack`` in ``required_services``\n  checked only ``api_versions@openstack``, but ``api_versions`` string is also\n  valid name for the context (if there is no other ``api_versions`` contexts\n  for other platforms, but the case of name conflict is covered by another\n  check).\n* The endpoint_type defined in environment specification/deployment\n  configuration is the endpoint interface for gnocchi.\n\n[1.0.0] - 2018-03-28\n--------------------\nStart a fork of `rally/plugins/openstack module of original OpenStack Rally\nproject\n<https://github.com/openstack/rally/tree/0.11.1/rally/plugins/openstack>`_\n\nAdded\n~~~~~\n\n* [scenario plugin] GnocchiArchivePolicy.list_archive_policy\n* [scenario plugin] GnocchiArchivePolicy.create_archive_policy\n* [scenario plugin] GnocchiArchivePolicy.create_delete_archive_policy\n* [scenario plugin] GnocchiResourceType.list_resource_type\n* [scenario plugin] GnocchiResourceType.create_resource_type\n* [scenario plugin] GnocchiResourceType.create_delete_resource_type\n* [scenario plugin] NeutronSubnets.delete_subnets\n* [ci] New Zuul V3 native jobs\n* Extend existing@openstack platform to support creating a specification based\n  on system environment variables. This feature should be available with\n  Rally>0.11.1\n\nChanged\n~~~~~~~\n\n* Methods for association and dissociation floating ips  were deprecated in\n  novaclient a year ago and latest major release (python-novaclient 10)\n  `doesn't include them\n  <https://github.com/openstack/python-novaclient/blob/10.0.0/releasenotes/notes/remove-virt-interfaces-add-rm-fixed-floating-398c905d9c91cca8.yaml>`_.\n  These actions should be performed via neutronclient now. It is not as simple\n  as it was via Nova-API and you can find more neutron-related atomic actions\n  in results of scenarios.\n\nRemoved\n~~~~~~~\n\n* *os-hosts* CLIs and python API bindings had been deprecated in\n  python-novaclient 9.0.0 and became removed in `10.0.0 release\n  <https://github.com/openstack/python-novaclient/blob/10.0.0/releasenotes/notes/remove-hosts-d08855550c40b9c6.yaml>`_.\n  This decision affected 2 scenarios `NovaHosts.list_hosts\n  <https://rally.readthedocs.io/en/0.11.1/plugins/plugin_reference.html#novahosts-list-hosts-scenario>`_\n  and `NovaHosts.list_and_get_hosts\n  <https://rally.readthedocs.io/en/0.11.1/plugins/plugin_reference.html#novahosts-list-and-get-hosts-scenario>`_\n  which become redundant and we cannot leave them (python-novaclient doesn't\n  have proper interfaces any more).\n\nFixed\n~~~~~\n\n* The support of `kubernetes python client\n  <https://pypi.python.org/pypi/kubernetes>`_ (which is used by Magnum plugins)\n  is not limited by 3.0.0 max version. You can use more modern releases of that\n  library.\n", 
        "name": "rally-openstack", 
        "repository": "https://github.com/openstack/rally-openstack", 
        "title": "OpenStack", 
        "pkg_info": {
            "Name": "rally-openstack", 
            "License": "Apache License, Version 2.0", 
            "Author": "OpenStack", 
            "Metadata-Version": "1.1", 
            "Home-page": "https://docs.openstack.org/rally/latest/", 
            "Summary": "Rally plugins for OpenStack platform", 
            "Platform": "UNKNOWN", 
            "Version": "1.1.0", 
            "Classifier": "Programming Language :: Python :: 3.5", 
            "Author-email": "openstack-dev@lists.openstack.org", 
            "Description": "===============\n        rally-openstack\n        ===============\n        \n        Rally plugins for `OpenStack platform <https://openstack.org>`_\n        \n        \n        Usage\n        -----\n        \n        .. code-block:: bash\n        \n            # Install this package (will install rally if not installed)\n            pip install rally-openstack\n        \n            # List all installed plugins\n            rally plugin list --platform openstack\n        \n            # Create OpenStack Env\n        \n            cat <<EOT >> env.yaml\n            ---\n            openstack:\n              auth_url: \"https://keystone.net/identity\"\n              region_name: RegionOne\n              https_insecure: False\n              users:\n                - username: user_that_runs_commands\n                  password: his password\n                  project_name: project_that_users_belong_to\n            EOT\n        \n            rally env create --name my_openstack --spec env.yml\n        \n            # Check that you provide correct credentials\n            rally env check\n        \n            # Collect key Open Stack metrics\n            rally task start ./tasks/openstack_metrics/task.yaml --task-args {\"image_name\": \"image_to_use\", \"flavor_name\": \"flavor_to_use\"}\n        \n            # Generate Report\n            rally task report --out report.html\n        \n        \n        Links\n        ----------------------\n        \n        * Free software: Apache license\n        * Documentation: https://rally.readthedocs.org/en/latest/\n        * Source: https://git.openstack.org/cgit/openstack/rally-openstack\n        * Bugs: https://bugs.launchpad.net/rally\n        * Step-by-step tutorial: https://rally.readthedocs.io/en/latest/quick_start/tutorial.html\n        * Launchpad page: https://launchpad.net/rally\n        * Gitter chat: https://gitter.im/rally-dev/Lobby\n        * Trello board: https://trello.com/b/DoD8aeZy/rally\n        \n        "
        }, 
        "versions": [
            "1.0.0", 
            "1.1.0"
        ], 
        "changelog_file": "CHANGELOG.rst", 
        "plugins": {
            "NovaAggregates.create_and_delete_aggregate@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates an aggregate and then delete it.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate and then delete it.", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_delete_aggregate"
            }, 
            "GnocchiArchivePolicyRule.create_archive_policy_rule@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Pattern for matching metrics\n", 
                        "name": "metric_pattern"
                    }, 
                    {
                        "doc": "Archive policy name", 
                        "name": "archive_policy_name"
                    }
                ], 
                "title": "Create archive policy rule.", 
                "module": "rally_openstack.scenarios.gnocchi.archive_policy_rule", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicyRule.create_archive_policy_rule"
            }, 
            "neutron_network@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Neutron network ID by it's name.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "neutron_network"
            }, 
            "nova@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for NovaClient which returns a authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "nova"
            }, 
            "VMTasks.runcommand_heat@openstack": {
                "introduced_in": null, 
                "description": "Workload can be either file or resource:\n\n   .. code-block:: json\n\n     {\"file\": \"/path/to/file.sh\"}\n     {\"resource\": [\"package.module\", \"workload.py\"]}\n\n\n Also it should contain \"username\" key.\n\n Given file will be uploaded to `gate_node` and started. This script\n should print `key` `value` pairs separated by colon. These pairs will\n be presented in results.\n\n Gate node should be accessible via ssh with keypair `key_name`, so\n heat template should accept parameter `key_name`.", 
                "parameters": [
                    {
                        "doc": "workload to run\n", 
                        "name": "workload"
                    }, 
                    {
                        "doc": "path to heat template file\n", 
                        "name": "template"
                    }, 
                    {
                        "doc": "additional template files\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "parameters for heat template", 
                        "name": "parameters"
                    }
                ], 
                "title": "Run workload on stack deployed by heat.", 
                "module": "rally_openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "VMTasks.runcommand_heat"
            }, 
            "CinderVolumes.create_and_list_volume_backups@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "True if detailed information about backup\nshould be listed\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "if True, a volume backup will be deleted\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Create and then list a volume backup.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_list_volume_backups"
            }, 
            "HeatStacks.list_stacks_and_events@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List events from tenant stacks.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.list_stacks_and_events"
            }, 
            "NovaServers.boot_and_update_server@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a server, then update it.\nAssumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "update the server description\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, then update its name and description.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_update_server"
            }, 
            "NovaServers.boot_server_associate_and_dissociate_floating_ip@openstack": {
                "introduced_in": null, 
                "description": "The scenario first boot a server and create a floating IP. then\nassociate the floating IP to the server.Finally dissociate the floating\nIP.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for\nfloating ip creation\n", 
                        "name": "create_floating_ip_args"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server associate and dissociate a floating IP from it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_associate_and_dissociate_floating_ip"
            }, 
            "cinder@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for CinderClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "cinder"
            }, 
            "DesignateBasic.create_and_delete_recordsets@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting recordsets\nwith different level of load.", 
                "parameters": [
                    {
                        "doc": "recordsets to create pr zone.", 
                        "name": "recordsets_per_zone"
                    }
                ], 
                "title": "Create and then delete recordsets.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_recordsets"
            }, 
            "tempest@openstack": {
                "introduced_in": null, 
                "description": "**Description**:\n\n    Quote from official documentation:\n\n      This is a set of integration tests to be run against a live OpenStack\n      cluster. Tempest has batteries of tests for OpenStack API validation,\n      Scenarios, and other specific tests useful in validating an OpenStack\n      deployment.\n\n    Rally supports features listed below:\n\n    * *cloning Tempest*: repository and version can be specified\n    * *installation*: system-wide with checking existence of required\n      packages or in virtual environment\n    * *configuration*: options are discovered via OpenStack API, but you can\n      override them if you need\n    * *running*: pre-creating all required resources(i.e images, tenants,\n      etc), prepare arguments, launching Tempest, live-progress output\n    * *results*: all verifications are stored in db, you can built reports,\n      compare verification at whatever you want time.\n\n    Appeared in Rally 0.8.0 *(actually, it appeared long time ago with first\n    revision of Verification Component, but 0.8.0 is mentioned since it is\n    first release after Verification Component redesign)*\n\n**Running arguments**:\n\n* *concurrency*: Number of processes to be used for launching tests. In case of 0 value, number of processes will be equal to number of CPU cores.\n* *load_list*: a list of tests to launch.\n* *pattern*: a regular expression of tests to launch.\n* *set*: Name of predefined set of tests. Known names: full, smoke, baremetal, clustering, compute, database, data_processing, identity, image, messaging, network, object_storage, orchestration, telemetry, volume, scenario\n* *skip_list*: a list of tests to skip (actually, it is a dict where keys are names of tests, values are reasons).\n* *xfail_list*: a list of tests that are expected to fail (actually, it is a dict where keys are names of tests, values are reasons).\n\n**Installation arguments**:\n\n* *system_wide*: Whether or not to use the system-wide environment for verifier instead of a virtual environment. Defaults to False.\n* *source*: Path or URL to the repo to clone verifier from. Defaults to https://git.openstack.org/openstack/tempest\n* *version*: Branch, tag or commit ID to checkout before verifier installation. Defaults to 'master'.", 
                "parameters": [], 
                "title": "Tempest verifier.", 
                "module": "rally_openstack.verification.tempest.manager", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Verifier Manager", 
                "schema": null, 
                "name": "tempest"
            }, 
            "Watcher.list_audit_templates@openstack": {
                "introduced_in": null, 
                "description": "Audit templates are being created by Audit Template Context.", 
                "parameters": [
                    {
                        "doc": "Name of the audit template\n", 
                        "name": "name"
                    }, 
                    {
                        "doc": "Name of the goal\n", 
                        "name": "goal"
                    }, 
                    {
                        "doc": "Name of the strategy\n", 
                        "name": "strategy"
                    }, 
                    {
                        "doc": "The maximum number of results to return per\nrequest, if:\n\n  1) limit > 0, the maximum number of audit templates to return.\n  2) limit == 0, return the entire list of audit_templates.\n  3) limit param is NOT specified (None), the number of items\n     returned respect the maximum imposed by the Watcher API\n    (see Watcher's api.max_limit option).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "Optional, field used for sorting.\n", 
                        "name": "sort_key"
                    }, 
                    {
                        "doc": "Optional, direction of sorting, either 'asc' (the\ndefault) or 'desc'.\n", 
                        "name": "sort_dir"
                    }, 
                    {
                        "doc": "Optional, boolean whether to return detailed information\nabout audit_templates.\n", 
                        "name": "detail"
                    }
                ], 
                "title": "List existing audit templates.", 
                "module": "rally_openstack.scenarios.watcher.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Watcher.list_audit_templates"
            }, 
            "Gnocchi.get_status@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "get detailed output", 
                        "name": "detailed"
                    }
                ], 
                "title": "Get the status of measurements processing.", 
                "module": "rally_openstack.scenarios.gnocchi.status", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "Gnocchi.get_status"
            }, 
            "NovaServerGroups.create_and_list_server_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova server-group-create\" and \"nova server-group-list\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Server group policy\n", 
                        "name": "policies"
                    }, 
                    {
                        "doc": "If True, display server groups from all\nprojects(Admin only)\n", 
                        "name": "all_projects"
                    }, 
                    {
                        "doc": "The server group specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server group, then list all server groups.", 
                "module": "rally_openstack.scenarios.nova.server_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServerGroups.create_and_list_server_groups"
            }, 
            "KeystoneBasic.create_and_list_tenants@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone tenant with random name and list all tenants.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_tenants"
            }, 
            "watcher_goal@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Watcher goal ID by it's name.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "watcher_goal"
            }, 
            "Dummy.openstack@openstack": {
                "introduced_in": null, 
                "description": "Dummy.dummy can be used for testing performance of different\nScenarioRunners and of the ability of rally to store a large\namount of results.", 
                "parameters": [
                    {
                        "doc": "idle time of method (in seconds).", 
                        "name": "sleep"
                    }
                ], 
                "title": "Do nothing and sleep for the given number of seconds (0 by default).", 
                "module": "rally_openstack.scenarios.dummy", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Dummy.openstack"
            }, 
            "KeystoneBasic.create_and_list_users@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters to create users like\n\"tenant_id\", \"enabled\".\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user with random name and list all users.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_users"
            }, 
            "murano_environments@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for creating murano environments.", 
                "module": "rally_openstack.contexts.murano.murano_environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "environments_per_tenant"
                    ], 
                    "type": "object", 
                    "properties": {
                        "environments_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "murano_environments"
            }, 
            "CeilometerQueries.create_and_query_alarm_history@openstack": {
                "introduced_in": null, 
                "description": "This scenario tests POST /v2/query/alarms/history\nAn alarm is first created and then its alarm_id is used to fetch the\nhistory of that specific alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "optional param for specifying ordering of results\n", 
                        "name": "orderby"
                    }, 
                    {
                        "doc": "optional param for maximum number of results returned\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional parameters for alarm creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm and then query for its history.", 
                "module": "rally_openstack.scenarios.ceilometer.queries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerQueries.create_and_query_alarm_history"
            }, 
            "HeatStacks.create_stack_and_show_output@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-show", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "the stack output key that corresponds to\nthe scaling webhook\n", 
                        "name": "output_key"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and show output by using new algorithm.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_show_output"
            }, 
            "CeilometerAlarms.create_and_get_alarm@openstack": {
                "introduced_in": null, 
                "description": "These scenarios test GET /v2/alarms/(alarm_id)\nInitially an alarm is created and then its detailed information is\nfetched using its alarm_id. meter_name and threshold are required\nparameters for alarm creation. kwargs stores other optional parameters\nlike 'ok_actions', 'project_id' etc. that may be passed while creating\nan alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and get the newly created alarm.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_get_alarm"
            }, 
            "NovaServers.boot_lock_unlock_and_delete@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the\nscenario to simulate a pause between locking and unlocking the\nserver (of random duration from min_sleep to max_sleep).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Minimum sleep time between locking and unlocking\nin seconds\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time between locking and unlocking\nin seconds\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, lock it, then unlock and delete it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_lock_unlock_and_delete"
            }, 
            "NeutronSubnets.delete_subnets@openstack": {
                "introduced_in": null, 
                "description": "Each runner instance picks a specific subnet from the list based on its\npositional location in the list of users. By doing so, we can start\nmultiple threads with sufficient number of users created and spread\ndelete requests across all of them, so that they hit different subnets\nconcurrently.\n\nConcurrent execution of this scenario should help reveal any race\nconditions and other concurrency issues in Neutron IP allocation layer,\namong other things.", 
                "parameters": [], 
                "title": "Delete a subnet that belongs to each precreated network.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSubnets.delete_subnets"
            }, 
            "ManilaShares.create_and_delete_share@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between share creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "share protocol, valid values are NFS, CIFS,\nGlusterFS and HDFS\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "share size in GB, should be greater than 0\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a share", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and delete a share.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_delete_share"
            }, 
            "NeutronLoadbalancerV1.create_and_update_healthmonitors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-healthmonitor-create\" and \"neutron\nlb-healthmonitor-update\" command performance. The scenario creates\nhealthmonitors and then updates them.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/healthmonitors request\noptions\n", 
                        "name": "healthmonitor_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/healthmonitors update\noptions\n", 
                        "name": "healthmonitor_update_args"
                    }
                ], 
                "title": "Create a healthmonitor(v1) and update healthmonitors(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_update_healthmonitors"
            }, 
            "ManilaShares.create_and_shrink_share@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "share protocol for new share\navailable values are NFS, CIFS, CephFS, GlusterFS and HDFS.\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "size in GiB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "new size of the share in GiB\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "ID of the snapshot\n", 
                        "name": "snapshot_id"
                    }, 
                    {
                        "doc": "description of a share\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "optional metadata to set on share creation\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "either instance of ShareNetwork or text with ID\n", 
                        "name": "share_network"
                    }, 
                    {
                        "doc": "either instance of ShareType or text with ID\n", 
                        "name": "share_type"
                    }, 
                    {
                        "doc": "whether to set share as public or not.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "availability zone of the share\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "ID of the share group to which the share\nshould belong\n", 
                        "name": "share_group_id"
                    }
                ], 
                "title": "Create and shrink a share", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_shrink_share"
            }, 
            "Gnocchi.list_capabilities@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List supported aggregation methods.", 
                "module": "rally_openstack.scenarios.gnocchi.capabilities", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Gnocchi.list_capabilities"
            }, 
            "Authenticate.validate_glance@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.\nIn following we are checking for non-existent image.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Glance Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_glance"
            }, 
            "GnocchiArchivePolicy.list_archive_policy@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List archive policies.", 
                "module": "rally_openstack.scenarios.gnocchi.archive_policy", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicy.list_archive_policy"
            }, 
            "NeutronBGPVPN.create_and_delete_bgpvpns@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\" and neutron bgpvpn-delete\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Create bgpvpn and delete the bgpvpn.", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_delete_bgpvpns"
            }, 
            "NovaServers.boot_and_live_migrate_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a VM on a compute node available in\nthe availability zone and then migrates the VM to another\ncompute node on the same availability zone.\n\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between VM booting and running live migration\n(of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Specifies the migration type\n", 
                        "name": "block_migration"
                    }, 
                    {
                        "doc": "Specifies whether to allow overcommit\non migrated instance or not\n", 
                        "name": "disk_over_commit"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Live Migrate a server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_live_migrate_server"
            }, 
            "KeystoneBasic.create_tenant_with_users@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "number of users to create for the tenant\n", 
                        "name": "users_per_tenant"
                    }, 
                    {
                        "doc": "Other optional parameters for tenant creation\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone tenant and several users belonging to it.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "keystone tenant instance", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_tenant_with_users"
            }, 
            "K8sPods.create_pods@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "manifest files used to create the pods", 
                        "name": "manifests"
                    }
                ], 
                "title": "create pods and wait for them to be ready.", 
                "module": "rally_openstack.scenarios.magnum.k8s_pods", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "K8sPods.create_pods"
            }, 
            "NeutronLoadbalancerV1.create_and_update_pools@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-pool-create\" and \"neutron lb-pool-update\"\ncommand performance. The scenario creates a pool for every subnet\nand then update those pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options\n", 
                        "name": "pool_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/pools update options", 
                        "name": "pool_update_args"
                    }
                ], 
                "title": "Create pools(v1) and update pools(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_update_pools"
            }, 
            "NovaServerGroups.create_and_get_server_group@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova server-group-create\" and \"nova server-group-get\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Server group policy\n", 
                        "name": "policies"
                    }, 
                    {
                        "doc": "The server group specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server group, then get its detailed information.", 
                "module": "rally_openstack.scenarios.nova.server_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServerGroups.create_and_get_server_group"
            }, 
            "CeilometerStats.create_meter_and_get_stats@openstack": {
                "introduced_in": null, 
                "description": "Meter is first created and then statistics is fetched for the same\nusing GET /v2/meters/(meter_name)/statistics.", 
                "parameters": [
                    {
                        "doc": "contains optional arguments to create a meter", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a meter and fetch its statistics.", 
                "module": "rally_openstack.scenarios.ceilometer.stats", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerStats.create_meter_and_get_stats"
            }, 
            "SenlinClusters.create_and_delete_cluster@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"senlin cluster-create\" and \"senlin cluster-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "The capacity or initial number of nodes\nowned by the cluster\n", 
                        "name": "desired_capacity"
                    }, 
                    {
                        "doc": "The minimum number of nodes owned by the cluster\n", 
                        "name": "min_size"
                    }, 
                    {
                        "doc": "The maximum number of nodes owned by the cluster.\n-1 means no limit\n", 
                        "name": "max_size"
                    }, 
                    {
                        "doc": "The timeout value in seconds for cluster creation\n", 
                        "name": "timeout"
                    }, 
                    {
                        "doc": "A set of key value pairs to associate with the cluster", 
                        "name": "metadata"
                    }
                ], 
                "title": "Create a cluster and then delete it.", 
                "module": "rally_openstack.scenarios.senlin.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "SenlinClusters.create_and_delete_cluster"
            }, 
            "zones@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context to add `zones_per_tenant` zones for each tenant.", 
                "module": "rally_openstack.contexts.designate.zones", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "zones_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "zones"
            }, 
            "NovaServers.boot_server_attach_created_volume_and_live_migrate@openstack": {
                "introduced_in": null, 
                "description": "Simple test to create a VM and attach a volume, then migrate the VM,\ndetach the volume and delete volume/VM.\n\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between attaching a volume and running live\nmigration (of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "Specifies the migration type\n", 
                        "name": "block_migration"
                    }, 
                    {
                        "doc": "Specifies whether to allow overcommit\non migrated instance or not\n", 
                        "name": "disk_over_commit"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)", 
                        "name": "max_sleep"
                    }
                ], 
                "title": "Create a VM, attach a volume to it and live migrate.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_attach_created_volume_and_live_migrate"
            }, 
            "GnocchiArchivePolicy.create_delete_archive_policy@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "List of definitions\n", 
                        "name": "definition"
                    }, 
                    {
                        "doc": "List of aggregation methods", 
                        "name": "aggregation_methods"
                    }
                ], 
                "title": "Create archive policy and then delete it.", 
                "module": "rally_openstack.scenarios.gnocchi.archive_policy", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicy.create_delete_archive_policy"
            }, 
            "ManilaShares.create_security_service_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "security service type, permitted values\nare 'ldap', 'kerberos' or 'active_directory'.\n", 
                        "name": "security_service_type"
                    }, 
                    {
                        "doc": "dns ip address used inside tenant's network\n", 
                        "name": "dns_ip"
                    }, 
                    {
                        "doc": "security service server ip address or hostname\n", 
                        "name": "server"
                    }, 
                    {
                        "doc": "security service domain\n", 
                        "name": "domain"
                    }, 
                    {
                        "doc": "security identifier used by tenant\n", 
                        "name": "user"
                    }, 
                    {
                        "doc": "password used by user\n", 
                        "name": "password"
                    }, 
                    {
                        "doc": "security service description", 
                        "name": "description"
                    }
                ], 
                "title": "Creates security service and then deletes.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_security_service_and_delete"
            }, 
            "CinderVolumes.create_and_delete_snapshot@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between snapshot creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "when set to True, allows snapshot of a volume when\nthe volume is attached to an instance\n", 
                        "name": "force"
                    }, 
                    {
                        "doc": "minimum sleep time between snapshot creation and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between snapshot creation and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a snapshot", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and then delete a volume-snapshot.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_delete_snapshot"
            }, 
            "NeutronBGPVPN.create_and_list_networks_associations@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\",\n\"neutron bgpvpn-net-assoc-create\" and\n\"neutron bgpvpn-net-assoc-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a network and list networks associations.", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_list_networks_associations"
            }, 
            "check_api_versions@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Additional validation for api_versions context", 
                "module": "rally_openstack.contexts.api_versions", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "check_api_versions"
            }, 
            "GlanceImages.list_images@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the glance image-list command by listing\nall the images.\n\nSuppose if we have 2 users in context and each has 2 images\nuploaded for them we will be able to test the performance of\nglance image-list command in this case.", 
                "parameters": [], 
                "title": "List all images.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.list_images"
            }, 
            "Authenticate.validate_monasca@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Monasca Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_monasca"
            }, 
            "NovaHypervisors.statistics_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova hypervisor-stats\" command performance.", 
                "parameters": [], 
                "title": "Get hypervisor statistics over all compute nodes.", 
                "module": "rally_openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.statistics_hypervisors"
            }, 
            "NeutronNetworks.create_and_update_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then updating all routers.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/routers update options\n", 
                        "name": "router_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and update a given number of routers.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_routers"
            }, 
            "murano_packages@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for uploading applications for murano.", 
                "module": "rally_openstack.contexts.murano.murano_packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "app_package"
                    ], 
                    "type": "object", 
                    "properties": {
                        "app_package": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "murano_packages"
            }, 
            "image_command_customizer@openstack": {
                "introduced_in": null, 
                "description": "Run a command specified by configuration to prepare image.\n\nUse this script e.g. to download and install something.", 
                "parameters": [], 
                "title": "Context class for generating image customized by a command execution.", 
                "module": "rally_openstack.contexts.vm.image_command_customizer", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "required": [
                        "image", 
                        "flavor"
                    ], 
                    "additionalProperties": false, 
                    "definitions": {
                        "commandPath": {
                            "additionalProperties": false, 
                            "required": [
                                "remote_path"
                            ], 
                            "type": "object", 
                            "properties": {
                                "local_path": {
                                    "type": "string"
                                }, 
                                "command_args": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "remote_path": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }
                            }
                        }, 
                        "scriptInline": {
                            "additionalProperties": false, 
                            "required": [
                                "script_inline", 
                                "interpreter"
                            ], 
                            "type": "object", 
                            "properties": {
                                "interpreter": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "command_args": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "script_inline": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "commandDict": {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/scriptFile"
                                }, 
                                {
                                    "$ref": "#/definitions/scriptInline"
                                }, 
                                {
                                    "$ref": "#/definitions/commandPath"
                                }
                            ]
                        }, 
                        "stringOrStringList": {
                            "anyOf": [
                                {
                                    "type": "string", 
                                    "description": "just a string"
                                }, 
                                {
                                    "items": {
                                        "type": "string"
                                    }, 
                                    "type": "array", 
                                    "description": "just a list of strings"
                                }
                            ]
                        }, 
                        "scriptFile": {
                            "additionalProperties": false, 
                            "required": [
                                "script_file", 
                                "interpreter"
                            ], 
                            "type": "object", 
                            "properties": {
                                "interpreter": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "script_file": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }, 
                                "command_args": {
                                    "$ref": "#/definitions/stringOrStringList"
                                }
                            }
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "username": {
                            "type": "string"
                        }, 
                        "floating_network": {
                            "type": "string"
                        }, 
                        "workers": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "userdata": {
                            "type": "string"
                        }, 
                        "internal_network": {
                            "type": "string"
                        }, 
                        "image": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "command": {
                            "$ref": "#/definitions/commandDict"
                        }, 
                        "flavor": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "password": {
                            "type": "string"
                        }, 
                        "port": {
                            "minimum": 1, 
                            "type": "integer", 
                            "maximum": 65535
                        }
                    }
                }, 
                "name": "image_command_customizer"
            }, 
            "CinderVolumes.create_and_list_snapshots@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "when set to True, allows snapshot of a volume when\nthe volume is attached to an instance\n", 
                        "name": "force"
                    }, 
                    {
                        "doc": "True if detailed information about snapshots\nshould be listed\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "optional args to create a snapshot", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and then list a volume-snapshot.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_list_snapshots"
            }, 
            "Authenticate.validate_cinder@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Cinder Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_cinder"
            }, 
            "Authenticate.validate_neutron@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Neutron Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_neutron"
            }, 
            "NeutronNetworks.create_and_update_ports@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron port-create\" and \"neutron port-update\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/ports update request options\n", 
                        "name": "port_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create and update a given number of ports.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_ports"
            }, 
            "KeystoneBasic.create_user_set_enabled_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Initial state of user 'enabled' flag. The user\nwill be created with 'enabled' set to this\nvalue, and then it will be toggled.\n", 
                        "name": "enabled"
                    }, 
                    {
                        "doc": "Other optional parameters to create user.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user, enable or disable it, and delete it.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_user_set_enabled_and_delete"
            }, 
            "NeutronNetworks.set_and_clear_router_gateway@openstack": {
                "introduced_in": null, 
                "description": "create an external network and a router, set external network\ngateway for the router, remove the external network gateway from\nthe router.", 
                "parameters": [
                    {
                        "doc": "True if enable snat\n", 
                        "name": "enable_snat"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Set and Remove the external network gateway from a router.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.set_and_clear_router_gateway"
            }, 
            "CeilometerAlarms.create_alarm_and_get_history@openstack": {
                "introduced_in": null, 
                "description": "This scenario makes following queries:\n\n  *  GET /v2/alarms/{alarm_id}/history\n  *  GET /v2/alarms/{alarm_id}/state\n  *  PUT /v2/alarms/{alarm_id}/state\n\nInitially alarm is created and then get the state of the created alarm\nusing its alarm_id. Then get the history of the alarm. And finally the\nstate of the alarm is updated using given state. meter_name and\nthreshold are required parameters for alarm creation. kwargs stores\nother optional parameters like 'ok_actions', 'project_id' etc that may\nbe passed while alarm creation.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "an alarm state to be set\n", 
                        "name": "state"
                    }, 
                    {
                        "doc": "The number of seconds for which to attempt a\nsuccessful check of the alarm state\n", 
                        "name": "timeout"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm, get and set the state and get the alarm history.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_alarm_and_get_history"
            }, 
            "OSProfiler@default": {
                "introduced_in": null, 
                "description": "This plugin complete data of osprofiler", 
                "parameters": [], 
                "title": "osprofiler content", 
                "module": "rally_openstack.embedcharts.osprofilerchart", 
                "platform": "default", 
                "returns": "", 
                "base": "Chart", 
                "schema": null, 
                "name": "OSProfiler"
            }, 
            "NovaServers.boot_server_from_volume@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and then a server.\nAssumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "True if NICs should be assigned\n", 
                        "name": "auto_assign_nic"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from volume.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume"
            }, 
            "NovaAggregates.list_aggregates@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova aggregate-list\" command performance.", 
                "parameters": [], 
                "title": "List all nova aggregates.", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.list_aggregates"
            }, 
            "cluster_templates@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates Magnum cluster template.", 
                "module": "rally_openstack.contexts.magnum.cluster_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "image_id", 
                        "external_network_id", 
                        "coe"
                    ], 
                    "type": "object", 
                    "properties": {
                        "docker_storage_driver": {
                            "type": "string"
                        }, 
                        "http_proxy": {
                            "type": "string"
                        }, 
                        "docker_volume_size": {
                            "type": "integer"
                        }, 
                        "https_proxy": {
                            "type": "string"
                        }, 
                        "no_proxy": {
                            "type": "string"
                        }, 
                        "external_network_id": {
                            "type": "string"
                        }, 
                        "labels": {
                            "type": "string"
                        }, 
                        "dns_nameserver": {
                            "type": "string"
                        }, 
                        "server_type": {
                            "type": "string"
                        }, 
                        "network_driver": {
                            "type": "string"
                        }, 
                        "fixed_network": {
                            "type": "string"
                        }, 
                        "image_id": {
                            "type": "string"
                        }, 
                        "tls_disabled": {
                            "type": "boolean"
                        }, 
                        "registry_enabled": {
                            "type": "boolean"
                        }, 
                        "coe": {
                            "type": "string"
                        }, 
                        "flavor_id": {
                            "type": "string"
                        }, 
                        "volume_driver": {
                            "type": "string"
                        }, 
                        "master_lb_enabled": {
                            "type": "boolean"
                        }, 
                        "public": {
                            "type": "boolean"
                        }, 
                        "fixed_subnet": {
                            "type": "string"
                        }, 
                        "master_flavor_id": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "cluster_templates"
            }, 
            "GlanceImages.create_image_and_boot_instances@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }, 
                    {
                        "doc": "Nova flavor to be used to launch an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "number of Nova servers to boot\n", 
                        "name": "number_instances"
                    }, 
                    {
                        "doc": "optional parameters to boot server\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional parameters to create server (deprecated)", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an image and boot several instances from it.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_image_and_boot_instances"
            }, 
            "ManilaShares.attach_security_service_to_share_network@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "type of security service to use.\nShould be one of following: 'ldap', 'kerberos' or\n'active_directory'.\n", 
                        "name": "security_service_type"
                    }
                ], 
                "title": "Attaches security service to share network.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.attach_security_service_to_share_network"
            }, 
            "monasca@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MonascaClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "monasca"
            }, 
            "HeatStacks.create_stack_and_show_output_via_API@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-show", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "the stack output key that corresponds to\nthe scaling webhook\n", 
                        "name": "output_key"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and show output by using old algorithm.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_show_output_via_API"
            }, 
            "CinderVolumes.create_and_restore_volume_backup@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "if True, the volume and the volume backup will\nbe deleted after creation.\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Restore volume backup.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_restore_volume_backup"
            }, 
            "required_clients@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of client components names\n", 
                        "name": "components"
                    }, 
                    {
                        "doc": "optional parameters:\nadmin - bool, whether to use admin clients\n", 
                        "name": "**kwargs"
                    }
                ], 
                "title": "Validator checks if specified OpenStack clients are available.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_clients"
            }, 
            "NeutronLoadbalancerV1.create_and_list_pools@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-pool-list\" command performance.\nThe scenario creates a pool for every subnet and then lists pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options", 
                        "name": "pool_create_args"
                    }
                ], 
                "title": "Create a pool(v1) and then list pools(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_list_pools"
            }, 
            "NovaFlavors.create_and_list_flavor_access@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a non-public flavor and list its access rules", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_and_list_flavor_access"
            }, 
            "CinderVolumes.create_and_get_volume@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder show\" command performance.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume and get the volume.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_get_volume"
            }, 
            "check_cleanup_resources@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "describes access level to resource", 
                        "name": "admin_required"
                    }
                ], 
                "title": "Validates that openstack resource managers exist", 
                "module": "rally_openstack.contexts.cleanup.base", 
                "platform": "default", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "check_cleanup_resources"
            }, 
            "MistralWorkbooks.create_workbook@openstack": {
                "introduced_in": null, 
                "description": "This scenario is a very useful tool to measure the\n\"mistral workbook-create\" and \"mistral workbook-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "string (yaml string) representation of given\nfile content (Mistral workbook definition)\n", 
                        "name": "definition"
                    }, 
                    {
                        "doc": "if False than it allows to check performance\nin \"create only\" mode.\n", 
                        "name": "do_delete"
                    }
                ], 
                "title": "Scenario tests workbook creation and deletion.", 
                "module": "rally_openstack.scenarios.mistral.workbooks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralWorkbooks.create_workbook"
            }, 
            "NeutronBGPVPN.create_and_list_routers_associations@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\",\n\"neutron bgpvpn-router-assoc-create\" and\n\"neutron bgpvpn-router-assoc-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a router and list routers associations.", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_list_routers_associations"
            }, 
            "NeutronLoadbalancerV2.create_and_list_loadbalancers@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lbaas-loadbalancer-list\" command performance.\nThe scenario creates a loadbalancer for every subnet and then lists\nloadbalancers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lbaas/loadbalancers\nrequest options\n", 
                        "name": "lb_create_args"
                    }
                ], 
                "title": "Create a loadbalancer(v2) and then list loadbalancers(v2).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v2", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV2.create_and_list_loadbalancers"
            }, 
            "NovaFlavors.create_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a flavor.", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_flavor"
            }, 
            "NovaImages.list_images@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova image-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the image listing\nshould contain detailed information\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Optional additional arguments for image listing", 
                        "name": "kwargs"
                    }
                ], 
                "title": "[DEPRECATED] List all images.", 
                "module": "rally_openstack.scenarios.nova.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaImages.list_images"
            }, 
            "sahara_output_data_sources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up Output Data Sources for an EDP job.", 
                "module": "rally_openstack.contexts.sahara.sahara_output_data_sources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "output_type", 
                        "output_url_prefix"
                    ], 
                    "type": "object", 
                    "properties": {
                        "output_type": {
                            "enum": [
                                "swift", 
                                "hdfs"
                            ]
                        }, 
                        "output_url_prefix": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_output_data_sources"
            }, 
            "NeutronSecurityGroup.create_and_show_security_group@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }
                ], 
                "title": "Create and show Neutron security-group.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_show_security_group"
            }, 
            "Quotas.cinder_update_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update and Delete quotas for Cinder.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.cinder_update_and_delete"
            }, 
            "SwiftObjects.create_container_and_object_then_list_objects@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int, number of objects to upload\n", 
                        "name": "objects_per_container"
                    }, 
                    {
                        "doc": "int, temporary local object size\n", 
                        "name": "object_size"
                    }, 
                    {
                        "doc": "dict, optional parameters to create container", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create container and objects then list all objects.", 
                "module": "rally_openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.create_container_and_object_then_list_objects"
            }, 
            "Quotas.nova_update_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update and delete quotas for Nova.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.nova_update_and_delete"
            }, 
            "K8sPods.create_rcs@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "manifest files use to create the rcs", 
                        "name": "manifests"
                    }
                ], 
                "title": "create rcs and wait for them to be ready.", 
                "module": "rally_openstack.scenarios.magnum.k8s_pods", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "K8sPods.create_rcs"
            }, 
            "CeilometerMeters.list_matched_meters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "count of resources in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Get meters that matched fields from context and args.", 
                "module": "rally_openstack.scenarios.ceilometer.meters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerMeters.list_matched_meters"
            }, 
            "CinderVolumes.create_and_extend_volume@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "volume new size (in GB) or\ndictionary, must contain two values:\n     min - minimum size volumes will be created as;\n     max - maximum size volumes will be created as.\nto extend.\nNotice: should be bigger volume size\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "minimum sleep time between volume extension and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between volume extension and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to extend the volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and extend a volume and then delete it.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_extend_volume"
            }, 
            "NovaServers.boot_and_rebuild_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a VM, then rebuilds that VM with a\ndifferent image.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "from_image"
                    }, 
                    {
                        "doc": "image to be used to rebuild the instance\n", 
                        "name": "to_image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Rebuild a server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_rebuild_server"
            }, 
            "DesignateBasic.create_and_delete_records@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting records\nwith different level of load.", 
                "parameters": [
                    {
                        "doc": "Records to create pr domain.", 
                        "name": "records_per_domain"
                    }
                ], 
                "title": "Create and then delete records.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_records"
            }, 
            "ec2@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for EC2Client which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "ec2"
            }, 
            "CinderVolumeTypes.create_and_get_volume_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a volume Type, then get the details of the type.", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_get_volume_type"
            }, 
            "nova_flavor@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Nova's flavor ID by name or regexp.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "nova_flavor"
            }, 
            "MuranoPackages.import_and_delete_package@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"murano import-package\" and \"murano package-delete\"\ncommands performance.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared) and deletes it.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }
                ], 
                "title": "Import Murano package and then delete it.", 
                "module": "rally_openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.import_and_delete_package"
            }, 
            "DesignateBasic.create_and_list_records@openstack": {
                "introduced_in": null, 
                "description": "If you have only 1 user in your context, you will\nadd 1 record on every iteration. So you will have more\nand more records and will be able to measure the\nperformance of the \"designate record-list\" command depending on\nthe number of domains/records owned by users.", 
                "parameters": [
                    {
                        "doc": "Records to create pr domain.", 
                        "name": "records_per_domain"
                    }
                ], 
                "title": "Create and then list records.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_records"
            }, 
            "CinderVolumeTypes.create_and_delete_volume_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create and delete a volume Type.", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_delete_volume_type"
            }, 
            "CinderVolumeTypes.create_volume_type_add_and_list_type_access@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates a private volume type, then add project\naccess and list project access to it.", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Add and list volume type access for the given project.", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_volume_type_add_and_list_type_access"
            }, 
            "CinderVolumeTypes.create_get_and_delete_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates an encryption type for a volome\ntype created in the context, then gets detailed information of\nthe created encryption type, finally deletes the created\nencryption type.", 
                "parameters": [
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }
                ], 
                "title": "Create get and delete an encryption type", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_get_and_delete_encryption_type"
            }, 
            "KeystoneBasic.get_entities@openstack": {
                "introduced_in": null, 
                "description": "An ephemeral tenant, user, and role are each created. By\ndefault, fetches the 'keystone' service. This can be\noverridden (for instance, to get the 'Identity Service'\nservice on older OpenStack), or None can be passed explicitly\nto service_name to create a new service and then query it by\nID.", 
                "parameters": [
                    {
                        "doc": "The name of the service to get by ID; or\nNone, to create an ephemeral service and\nget it by ID.\n", 
                        "name": "service_name"
                    }
                ], 
                "title": "Get instance of a tenant, user, role and service by id's.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.get_entities"
            }, 
            "CinderVolumes.create_snapshot_and_attach_volume@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Name of volume type to use\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "Volume size - dictionary, contains two values:\n   min - minimum size volumes will be created as;\n   max - maximum size volumes will be created as.\ndefault values: {\"min\": 1, \"max\": 5}\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "create_vm_params"
                    }, 
                    {
                        "doc": "Optional parameters used during volume\nsnapshot creation.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create vm, volume, snapshot and attach/detach volume.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_snapshot_and_attach_volume"
            }, 
            "watcher_strategy@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Watcher strategy ID by it's name.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "watcher_strategy"
            }, 
            "HeatStacks.create_snapshot_restore_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat stack-snapshot\nheat stack-restore\nheat stack-delete", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create, snapshot-restore and then delete a stack.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_snapshot_restore_delete_stack"
            }, 
            "NovaServers.shelve_and_unshelve_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server, shelve, unshelve and then delete it", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.shelve_and_unshelve_server"
            }, 
            "NeutronLoadbalancerV1.create_and_list_healthmonitors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-healthmonitor-list\" command performance. This\nscenario creates healthmonitors and lists them.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/healthmonitors request\noptions\n", 
                        "name": "healthmonitor_create_args"
                    }
                ], 
                "title": "Create healthmonitors(v1) and list healthmonitors(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_list_healthmonitors"
            }, 
            "CeilometerAlarms.create_and_delete_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test DELETE /v2/alarms/(alarm_id)\nInitially alarm is created and then the created alarm is deleted using\nits alarm_id. meter_name and threshold are required parameters\nfor alarm creation. kwargs stores other optional parameters like\n'ok_actions', 'project_id' etc that may be passed while alarm creation.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and delete the newly created alarm.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_delete_alarm"
            }, 
            "Quotas.nova_get@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Get quotas for nova.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.nova_get"
            }, 
            "GlanceImages.create_and_deactivate_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images", 
                        "name": "min_ram"
                    }
                ], 
                "title": "Create an image, then deactivate it.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_deactivate_image"
            }, 
            "octavia@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for OctaviaClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "octavia"
            }, 
            "senlin@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for SenlinClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "senlin"
            }, 
            "CinderVolumeTypes.create_volume_type_and_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates a volume type, then creates an encryption\ntype for the volume type.", 
                "parameters": [
                    {
                        "doc": "The encryption type specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "create_specs"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }, 
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create encryption type", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_volume_type_and_encryption_type"
            }, 
            "workbook_contains_workflow@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "parameter containing the workbook definition\n", 
                        "name": "workbook_param"
                    }, 
                    {
                        "doc": "parameter containing the workflow name", 
                        "name": "workflow_param"
                    }
                ], 
                "title": "Validate that workflow exist in workbook when workflow is passed", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "workbook_contains_workflow"
            }, 
            "NovaFlavors.create_and_delete_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create flavor and delete the flavor.", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_and_delete_flavor"
            }, 
            "quotas@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Sets OpenStack Tenants quotas.", 
                "module": "rally_openstack.contexts.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "neutron": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "subnet": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "network": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "floatingip": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "health_monitor": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_group_rule": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "vip": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_group": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "router": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "port": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "pool": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "cinder": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "backups": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "backup_gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "volumes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "snapshots": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "manila": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "snapshot_gigabytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "snapshots": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "shares": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "share_networks": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "nova": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "metadata_items": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "injected_file_content_bytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "server_group_members": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "server_groups": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "ram": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "floating_ips": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "key_pairs": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "instances": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_group_rules": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "injected_files": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "cores": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "fixed_ips": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "injected_file_path_bytes": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }, 
                                "security_groups": {
                                    "minimum": -1, 
                                    "type": "integer"
                                }
                            }
                        }, 
                        "designate": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "domains": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "domain_recordsets": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "recordset_records": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }, 
                                "domain_records": {
                                    "minimum": 1, 
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }, 
                "name": "quotas"
            }, 
            "CinderVolumeTypes.create_and_update_volume_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "if True, can update name by generating random name.\nif False, don't update name.\n", 
                        "name": "update_name"
                    }, 
                    {
                        "doc": "update Description of the volume type\n", 
                        "name": "update_description"
                    }, 
                    {
                        "doc": "update Volume type visibility", 
                        "name": "update_is_public"
                    }
                ], 
                "title": "create a volume type, then update the type.", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_update_volume_type"
            }, 
            "Authenticate.validate_nova@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Nova Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_nova"
            }, 
            "CeilometerResource.get_tenant_resources@openstack": {
                "introduced_in": null, 
                "description": "This scenario retrieves information about tenant resources using\nGET /v2/resources/(resource_id)", 
                "parameters": [], 
                "title": "Get all tenant resources.", 
                "module": "rally_openstack.scenarios.ceilometer.resources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerResource.get_tenant_resources"
            }, 
            "ec2_image@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find EC2 image ID.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "ec2_image"
            }, 
            "image_valid_on_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines which variable should be used\nto get flavor id value.\n", 
                        "name": "flavor_param"
                    }, 
                    {
                        "doc": "defines which variable should be used\nto get image id value.\n", 
                        "name": "image_param"
                    }, 
                    {
                        "doc": "flag to indicate whether to validate flavor's\ndisk. Should be True if instance is booted from\nimage. Should be False if instance is booted\nfrom volume. Default value is True.\n", 
                        "name": "validate_disk"
                    }, 
                    {
                        "doc": "flag what indicate whether to validate image\nor not.\n", 
                        "name": "fail_on_404_image"
                    }
                ], 
                "title": "Returns validator for image could be used for current flavor", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "image_valid_on_flavor"
            }, 
            "CinderVolumeTypes.create_and_set_volume_type_keys@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "A dict of key/value pairs to be set\n", 
                        "name": "volume_type_key"
                    }, 
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create and set a volume type's extra specs.", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_set_volume_type_keys"
            }, 
            "CinderVolumes.create_and_update_volume@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "dict, to be used to create volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "dict, to be used to update volume\nupdate_volume_kwargs[\"update_name\"]=True, if updating the\nname of volume.\nupdate_volume_kwargs[\"description\"]=\"desp\", if updating the\ndescription of volume.\n", 
                        "name": "update_volume_kwargs"
                    }
                ], 
                "title": "Create a volume and update its name and description.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_update_volume"
            }, 
            "CinderVolumes.create_volume_and_update_readonly_flag@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "The value to indicate whether to update volume to\nread-only access mode\n", 
                        "name": "read_only"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume and then update its readonly flag.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_and_update_readonly_flag"
            }, 
            "api_versions@openstack": {
                "introduced_in": null, 
                "description": "Some OpenStack services support several API versions. To recognize\nthe endpoints of each version, separate service types are provided in\nKeystone service catalog.\n\nRally has the map of default service names - service types. But since\nservice type is an entity, which can be configured manually by admin(\nvia keystone api) without relation to service name, such map can be\ninsufficient.\n\nAlso, Keystone service catalog does not provide a map types to name\n(this statement is true for keystone < 3.3 ).\n\nThis context was designed for not-default service types and not-default\nAPI versions usage.\n\nAn example of specifying API version:\n\n.. code-block:: json\n\n    # In this example we will launch NovaKeypair.create_and_list_keypairs\n    # scenario on 2.2 api version.\n    {\n        \"NovaKeypair.create_and_list_keypairs\": [\n            {\n                \"args\": {\n                    \"key_type\": \"x509\"\n                },\n                \"runner\": {\n                    \"type\": \"constant\",\n                    \"times\": 10,\n                    \"concurrency\": 2\n                },\n                \"context\": {\n                    \"users\": {\n                        \"tenants\": 3,\n                        \"users_per_tenant\": 2\n                    },\n                    \"api_versions\": {\n                        \"nova\": {\n                            \"version\": 2.2\n                        }\n                    }\n                }\n            }\n        ]\n    }\n\nAn example of specifying API version along with service type:\n\n.. code-block:: json\n\n    # In this example we will launch CinderVolumes.create_and_attach_volume\n    # scenario on Cinder V2\n    {\n        \"CinderVolumes.create_and_attach_volume\": [\n            {\n                \"args\": {\n                    \"size\": 10,\n                    \"image\": {\n                        \"name\": \"^cirros.*-disk$\"\n                    },\n                    \"flavor\": {\n                        \"name\": \"m1.tiny\"\n                    },\n                    \"create_volume_params\": {\n                        \"availability_zone\": \"nova\"\n                    }\n                },\n                \"runner\": {\n                    \"type\": \"constant\",\n                    \"times\": 5,\n                    \"concurrency\": 1\n                },\n                \"context\": {\n                    \"users\": {\n                        \"tenants\": 2,\n                        \"users_per_tenant\": 2\n                    },\n                    \"api_versions\": {\n                        \"cinder\": {\n                            \"version\": 2,\n                            \"service_type\": \"volumev2\"\n                        }\n                    }\n                }\n            }\n        ]\n    }\n\nAlso, it possible to use service name as an identifier of service endpoint,\nbut an admin user is required (Keystone can return map of service\nnames - types, but such API is permitted only for admin). An example:\n\n.. code-block:: json\n\n    # Similar to the previous example, but `service_name` argument is used\n    # instead of `service_type`\n    {\n        \"CinderVolumes.create_and_attach_volume\": [\n            {\n                \"args\": {\n                    \"size\": 10,\n                    \"image\": {\n                        \"name\": \"^cirros.*-disk$\"\n                    },\n                    \"flavor\": {\n                        \"name\": \"m1.tiny\"\n                    },\n                    \"create_volume_params\": {\n                        \"availability_zone\": \"nova\"\n                    }\n                },\n                \"runner\": {\n                    \"type\": \"constant\",\n                    \"times\": 5,\n                    \"concurrency\": 1\n                },\n                \"context\": {\n                    \"users\": {\n                        \"tenants\": 2,\n                        \"users_per_tenant\": 2\n                    },\n                    \"api_versions\": {\n                        \"cinder\": {\n                            \"version\": 2,\n                            \"service_name\": \"cinderv2\"\n                        }\n                    }\n                }\n            }\n        ]\n    }", 
                "parameters": [], 
                "title": "Context for specifying OpenStack clients versions and service types.", 
                "module": "rally_openstack.contexts.api_versions", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "patternProperties": {
                        "^[a-z]+$": {
                            "oneOf": [
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "version"
                                    ], 
                                    "description": "version only", 
                                    "properties": {
                                        "version": {
                                            "anyOf": [
                                                {
                                                    "type": "string", 
                                                    "description": "a string-like version."
                                                }, 
                                                {
                                                    "type": "number", 
                                                    "description": "a number-like version."
                                                }
                                            ]
                                        }
                                    }
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "service_name"
                                    ], 
                                    "description": "version and service_name", 
                                    "properties": {
                                        "service_name": {
                                            "type": "string"
                                        }, 
                                        "version": {
                                            "anyOf": [
                                                {
                                                    "type": "string", 
                                                    "description": "a string-like version."
                                                }, 
                                                {
                                                    "type": "number", 
                                                    "description": "a number-like version."
                                                }
                                            ]
                                        }
                                    }
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "service_type"
                                    ], 
                                    "description": "version and service_type", 
                                    "properties": {
                                        "service_type": {
                                            "type": "string"
                                        }, 
                                        "version": {
                                            "anyOf": [
                                                {
                                                    "type": "string", 
                                                    "description": "a string-like version."
                                                }, 
                                                {
                                                    "type": "number", 
                                                    "description": "a number-like version."
                                                }
                                            ]
                                        }
                                    }
                                }
                            ], 
                            "type": "object"
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "minProperties": 1
                }, 
                "name": "api_versions"
            }, 
            "SaharaNodeGroupTemplates.create_delete_node_group_templates@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates and deletes two most common types of\nNode Group Templates.\n\nBy default the templates are created for the vanilla Hadoop\nprovisioning plugin using the version 1.2.1", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Create and delete Sahara Node Group Templates.", 
                "module": "rally_openstack.scenarios.sahara.node_group_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SaharaNodeGroupTemplates.create_delete_node_group_templates"
            }, 
            "NovaKeypair.create_and_list_keypairs@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates a keypair and then lists all keypairs.", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keypair with random name and list keypairs.", 
                "module": "rally_openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.create_and_list_keypairs"
            }, 
            "KeystoneBasic.create_and_get_role@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for roles creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a user role and get it detailed information.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_get_role"
            }, 
            "CinderQos.create_and_list_qos@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation", 
                        "name": "read_iops_sec"
                    }
                ], 
                "title": "Create a qos, then list all qos.", 
                "module": "rally_openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_and_list_qos"
            }, 
            "GnocchiResourceType.list_resource_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List resource types.", 
                "module": "rally_openstack.scenarios.gnocchi.resource_type", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiResourceType.list_resource_type"
            }, 
            "HeatStacks.create_update_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"heat stack-create\", \"heat stack-update\"\nand \"heat stack-delete\" commands performance.", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "path to updated stack template file\n", 
                        "name": "updated_template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "parameters to use in updated heat template\nIf not specified then parameters will be\nused instead\n", 
                        "name": "updated_parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "files used in updated template. If not specified\nfiles value will be used instead\n", 
                        "name": "updated_files"
                    }, 
                    {
                        "doc": "stack environment definition\n", 
                        "name": "environment"
                    }, 
                    {
                        "doc": "environment definition for updated stack", 
                        "name": "updated_environment"
                    }
                ], 
                "title": "Create, update and then delete a stack.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_update_delete_stack"
            }, 
            "profiles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context creates a temporary profile for Senlin test.", 
                "module": "rally_openstack.contexts.senlin.profiles", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "type", 
                        "version", 
                        "properties"
                    ], 
                    "type": "object", 
                    "properties": {
                        "version": {
                            "type": "string"
                        }, 
                        "type": {
                            "type": "string"
                        }, 
                        "properties": {
                            "additionalProperties": true, 
                            "type": "object"
                        }
                    }
                }, 
                "name": "profiles"
            }, 
            "NovaServers.boot_server_and_list_interfaces@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova boot\" and \"nova interface-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "ID of the image to be used for server creation\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "ID of the flavor to be used for server creation\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional arguments for booting the instance", 
                        "name": "**kwargs"
                    }
                ], 
                "title": "Boot a server and list interfaces attached to it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_and_list_interfaces"
            }, 
            "CinderVolumes.create_and_delete_volume@openstack": {
                "introduced_in": null, 
                "description": "Good for testing a maximal bandwidth of cloud. Optional 'min_sleep'\nand 'max_sleep' parameters allow the scenario to simulate a pause\nbetween volume creation and deletion (of random duration from\n[min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "minimum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and then delete a volume.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_delete_volume"
            }, 
            "murano@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MuranoClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "murano"
            }, 
            "KeystoneBasic.create_and_delete_role@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create a user role and delete it.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_delete_role"
            }, 
            "heat_dataplane@openstack": {
                "introduced_in": null, 
                "description": "This context will create stacks by given template for each tenant and\nadd details to context. Following details will be added:\n\n* id of stack;\n* template file contents;\n* files dictionary;\n* stack parameters;\n\nHeat template should define a \"gate\" node which will interact with Rally\nby ssh and workload nodes by any protocol. To make this possible heat\ntemplate should accept the following parameters:\n\n* network_id: id of public network\n* router_id: id of external router to connect \"gate\" node\n* key_name: name of nova ssh keypair to use for \"gate\" node", 
                "parameters": [], 
                "title": "Context class for create stack by given template.", 
                "module": "rally_openstack.contexts.dataplane.heat", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "files": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "context_parameters": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "parameters": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "template": {
                            "oneOf": [
                                {
                                    "type": "string", 
                                    "description": ""
                                }, 
                                {
                                    "minItems": 2, 
                                    "items": {
                                        "type": "string"
                                    }, 
                                    "type": "array", 
                                    "description": "", 
                                    "maxItems": 2
                                }
                            ]
                        }, 
                        "stacks_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "heat_dataplane"
            }, 
            "CinderVolumes.create_volume_and_clone@openstack": {
                "introduced_in": null, 
                "description": "This creates a volume, then clone it to anothor volume,\nand then clone the new volume to next volume...\n\n   1. create source volume (from image)\n   2. clone source volume to volume1\n   3. clone volume1 to volume2\n   4. clone volume2 to volume3\n   5. ...", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create initial volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "amount of nested levels\n", 
                        "name": "nested_level"
                    }, 
                    {
                        "doc": "optional args to create volumes", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume, then clone it to another volume.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_and_clone"
            }, 
            "HeatStacks.create_and_list_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"heat stack-create\" and \"heat stack-list\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create a stack and then list all stacks.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_and_list_stack"
            }, 
            "DesignateBasic.create_and_delete_domain@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting domains\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then delete a domain.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_domain"
            }, 
            "KeystoneBasic.create_and_delete_ec2credential@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create and delete keystone ec2-credential.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_delete_ec2credential"
            }, 
            "CinderVolumes.modify_volume_metadata@openstack": {
                "introduced_in": null, 
                "description": "This requires a volume to be created with the volumes\ncontext. Additionally, ``sets * set_size`` must be greater\nthan or equal to ``deletes * delete_size``.", 
                "parameters": [
                    {
                        "doc": "how many set_metadata operations to perform\n", 
                        "name": "sets"
                    }, 
                    {
                        "doc": "number of metadata keys to set in each\nset_metadata operation\n", 
                        "name": "set_size"
                    }, 
                    {
                        "doc": "how many delete_metadata operations to perform\n", 
                        "name": "deletes"
                    }, 
                    {
                        "doc": "number of metadata keys to delete in each\ndelete_metadata operation\n", 
                        "name": "delete_size"
                    }
                ], 
                "title": "Modify a volume's metadata.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.modify_volume_metadata"
            }, 
            "KeystoneBasic.create_user@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters to create users like\n\"tenant_id\", \"enabled\".\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user with random name.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_user"
            }, 
            "glance@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for GlanceClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "glance"
            }, 
            "required_cinder_services@openstack": {
                "introduced_in": null, 
                "description": "It uses Cinder client with admin permissions to call\n'cinder service-list' call", 
                "parameters": [
                    {
                        "doc": "Cinder service name", 
                        "name": "services"
                    }
                ], 
                "title": "Validator checks that specified Cinder service is available.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_cinder_services"
            }, 
            "sahara_cluster@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up the Cluster an EDP job.", 
                "module": "rally_openstack.contexts.sahara.sahara_cluster", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "plugin_name", 
                        "hadoop_version", 
                        "workers_count", 
                        "master_flavor_id", 
                        "worker_flavor_id"
                    ], 
                    "type": "object", 
                    "properties": {
                        "workers_count": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "worker_flavor_id": {
                            "type": "string"
                        }, 
                        "use_autoconfig": {
                            "type": "boolean"
                        }, 
                        "cluster_configs": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "enable_proxy": {
                            "type": "boolean"
                        }, 
                        "plugin_name": {
                            "type": "string"
                        }, 
                        "floating_ip_pool": {
                            "type": "string"
                        }, 
                        "volumes_size": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "node_configs": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "flavor_id": {
                            "type": "string"
                        }, 
                        "volumes_per_node": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "enable_anti_affinity": {
                            "type": "boolean"
                        }, 
                        "hadoop_version": {
                            "type": "string"
                        }, 
                        "auto_security_group": {
                            "type": "boolean"
                        }, 
                        "security_groups": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "master_flavor_id": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_cluster"
            }, 
            "mistral@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MistralClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "mistral"
            }, 
            "NovaServerGroups.create_and_delete_server_group@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova server-group-create\" and \"nova server-group-delete\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "Server group policy\n", 
                        "name": "policies"
                    }, 
                    {
                        "doc": "The server group specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server group, then delete it.", 
                "module": "rally_openstack.scenarios.nova.server_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServerGroups.create_and_delete_server_group"
            }, 
            "DesignateBasic.list_domains@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the designate domain-list command by listing\nall the domains.\n\nSuppose if we have 2 users in context and each has 2 domains\nuploaded for them we will be able to test the performance of\ndesignate domain-list command in this case.", 
                "parameters": [], 
                "title": "List Designate domains.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_domains"
            }, 
            "VMTasks.dd_load_test@openstack": {
                "introduced_in": null, 
                "description": ".. note:: dd load test is prepared script by Rally team. It checks\n    writing and reading metrics from the VM.", 
                "parameters": [
                    {
                        "doc": "glance image name to use for the vm. Optional\nin case of specified \"image_command_customizer\" context\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "ssh username on server, str\n", 
                        "name": "username"
                    }, 
                    {
                        "doc": "Password on SSH authentication\n", 
                        "name": "password"
                    }, 
                    {
                        "doc": "the interpreter to execute script with dd load test\n(defaults to /bin/sh)\n", 
                        "name": "interpreter"
                    }, 
                    {
                        "doc": "DEPRECATED. use interpreter instead.\n", 
                        "name": "command"
                    }, 
                    {
                        "doc": "volume args for booting server from volume\n", 
                        "name": "volume_args"
                    }, 
                    {
                        "doc": "external network name, for floating ip\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "ssh port for SSH connection\n", 
                        "name": "port"
                    }, 
                    {
                        "doc": "bool, floating or fixed IP for SSH connection\n", 
                        "name": "use_floating_ip"
                    }, 
                    {
                        "doc": "whether to use force_delete for servers\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "whether to check connectivity on server creation\n", 
                        "name": "wait_for_ping"
                    }, 
                    {
                        "doc": "The number of tail nova console-log lines user\nwould like to retrieve\n", 
                        "name": "max_log_length"
                    }, 
                    {
                        "doc": "extra arguments for booting the server", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from a custom image and performs dd load test.", 
                "module": "rally_openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "VMTasks.dd_load_test"
            }, 
            "NeutronNetworks.create_and_list_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets and then\nlists subnets.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and a given number of subnets and list all subnets.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_subnets"
            }, 
            "NovaServers.boot_and_get_console_url@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests retrieving the console url of a server.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "type can be novnc/xvpvnc for protocol vnc;\nspice-html5 for protocol spice; rdp-html5 for\nprotocol rdp; serial for protocol serial.\nwebmks for protocol mks (since version 2.8).\n", 
                        "name": "console_type"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Retrieve a console url of a server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_get_console_url"
            }, 
            "CeilometerEvents.create_user_and_list_event_types@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all events types using GET /v2/event_types.", 
                "parameters": [], 
                "title": "Create user and fetch all event types.", 
                "module": "rally_openstack.scenarios.ceilometer.events", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerEvents.create_user_and_list_event_types"
            }, 
            "ManilaShares.create_share_then_allow_and_deny_access@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "share protocol for new share\navailable values are NFS, CIFS, CephFS, GlusterFS and HDFS.\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "represents the access type (e.g: 'ip', 'domain'...)\n", 
                        "name": "access_type"
                    }, 
                    {
                        "doc": "represents the object (e.g: '127.0.0.1'...)\n", 
                        "name": "access"
                    }, 
                    {
                        "doc": "access level to the share (e.g: 'rw', 'ro')\n", 
                        "name": "access_level"
                    }, 
                    {
                        "doc": "size in GiB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "new size of the share in GiB\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "ID of the snapshot\n", 
                        "name": "snapshot_id"
                    }, 
                    {
                        "doc": "description of a share\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "optional metadata to set on share creation\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "either instance of ShareNetwork or text with ID\n", 
                        "name": "share_network"
                    }, 
                    {
                        "doc": "either instance of ShareType or text with ID\n", 
                        "name": "share_type"
                    }, 
                    {
                        "doc": "whether to set share as public or not.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "availability zone of the share\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "ID of the share group to which the share\nshould belong\n", 
                        "name": "share_group_id"
                    }
                ], 
                "title": "Create a share and allow and deny access to it", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_share_then_allow_and_deny_access"
            }, 
            "GlanceImages.create_and_download_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create an image, then download data of the image.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_download_image"
            }, 
            "CinderVolumes.create_and_list_volume@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder volume-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 volume on every iteration. So you will have more\nand more volumes and will be able to measure the\nperformance of the \"cinder volume-list\" command depending on\nthe number of images owned by users.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "determines whether the volume listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume and list all volumes.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_list_volume"
            }, 
            "NeutronLoadbalancerV1.create_and_delete_pools@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-pool-create\" and \"neutron lb-pool-delete\"\ncommand performance. The scenario creates a pool for every subnet\nand then deletes those pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options", 
                        "name": "pool_create_args"
                    }
                ], 
                "title": "Create pools(v1) and delete pools(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_delete_pools"
            }, 
            "CeilometerMeters.list_meters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "dict with metadata fields and values\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "limit of meters in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Check all available queries for list resource request.", 
                "module": "rally_openstack.scenarios.ceilometer.meters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerMeters.list_meters"
            }, 
            "SaharaJob.create_launch_job_sequence@openstack": {
                "introduced_in": null, 
                "description": "This scenario Creates a Job entity and launches an execution on a\nCluster for every job object provided.", 
                "parameters": [
                    {
                        "doc": "list of jobs that should be executed in one context", 
                        "name": "jobs"
                    }
                ], 
                "title": "Create and execute a sequence of the Sahara EDP Jobs.", 
                "module": "rally_openstack.scenarios.sahara.jobs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaJob.create_launch_job_sequence"
            }, 
            "IronicNodes.create_and_list_node@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "The name of the driver used to manage this Node.\n", 
                        "name": "driver"
                    }, 
                    {
                        "doc": "Key/value pair describing the physical\ncharacteristics of the node.\n", 
                        "name": "properties"
                    }, 
                    {
                        "doc": "Optional argument of list request. Either a Boolean\nor a string representation of a Boolean that indicates whether to\nreturn a list of associated (True or \"True\") or unassociated\n(False or \"False\") nodes.\n", 
                        "name": "associated"
                    }, 
                    {
                        "doc": "Optional argument of list request. Either a Boolean\nor a string representation of a Boolean that indicates whether\nto return nodes in maintenance mode (True or \"True\"), or not in\nmaintenance mode (False or \"False\").\n", 
                        "name": "maintenance"
                    }, 
                    {
                        "doc": "Optional, boolean whether to return detailed\ninformation about nodes.\n", 
                        "name": "detail"
                    }, 
                    {
                        "doc": "Optional, direction of sorting, either 'asc' (the\ndefault) or 'desc'.\n", 
                        "name": "sort_dir"
                    }, 
                    {
                        "doc": "DEPRECATED since Rally 0.10.0\n", 
                        "name": "marker"
                    }, 
                    {
                        "doc": "DEPRECATED since Rally 0.10.0\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "DEPRECATED since Rally 0.10.0\n", 
                        "name": "sort_key"
                    }, 
                    {
                        "doc": "Optional additional arguments for node creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and list nodes.", 
                "module": "rally_openstack.scenarios.ironic.nodes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "IronicNodes.create_and_list_node"
            }, 
            "CeilometerSamples.list_samples@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "count of samples in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Fetch all available queries for list sample request.", 
                "module": "rally_openstack.scenarios.ceilometer.samples", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerSamples.list_samples"
            }, 
            "NeutronNetworks.create_and_delete_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets and then\ndeletes subnets.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and delete a given number of subnets.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_subnets"
            }, 
            "NovaServers.suspend_and_resume_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server, suspend, resume and then delete it", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.suspend_and_resume_server"
            }, 
            "ManilaShares.list_shares@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines either to return detailed list of\nobjects or not.\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "container of search opts such as\n\"name\", \"host\", \"share_type\", etc.\n", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Basic scenario for 'share list' operation.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.list_shares"
            }, 
            "monasca_metrics@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates Monasca Metrics.", 
                "module": "rally_openstack.contexts.monasca.metrics", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "metrics_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "value_meta": {
                            "items": {
                                "additionalProperties": false, 
                                "type": "object", 
                                "properties": {
                                    "value_meta_value": {
                                        "type": "string"
                                    }, 
                                    "value_meta_key": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }, 
                        "name": {
                            "type": "string"
                        }, 
                        "dimensions": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "url": {
                                    "type": "string"
                                }, 
                                "region": {
                                    "type": "string"
                                }, 
                                "hostname": {
                                    "type": "string"
                                }, 
                                "service": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }, 
                "name": "monasca_metrics"
            }, 
            "CeilometerAlarms.create_and_list_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test GET /v2/alarms/(alarm_id)\nInitially alarm is created and then the created alarm is fetched using\nits alarm_id. meter_name and threshold are required parameters\nfor alarm creation. kwargs stores other optional parameters like\n'ok_actions', 'project_id' etc. that may be passed while creating\nan alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and get the newly created alarm.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_list_alarm"
            }, 
            "trove@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for TroveClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "trove"
            }, 
            "SaharaClusters.create_and_delete_cluster@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a Hadoop cluster, waits until it becomes\n'Active' and deletes it.", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups. Deprecated.\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the master\ninstance of the cluster\n", 
                        "name": "master_flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the workers of\nthe cluster\n", 
                        "name": "worker_flavor"
                    }, 
                    {
                        "doc": "number of worker instances in a cluster\n", 
                        "name": "workers_count"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "floating ip pool name from which Floating\nIPs will be allocated. Sahara will determine\nautomatically how to treat this depending on\nits own configurations. Defaults to None\nbecause in some cases Sahara may work w/o\nFloating IPs.\n", 
                        "name": "floating_ip_pool"
                    }, 
                    {
                        "doc": "number of Cinder volumes that will be\nattached to every cluster node\n", 
                        "name": "volumes_per_node"
                    }, 
                    {
                        "doc": "size of each Cinder volume in GB\n", 
                        "name": "volumes_size"
                    }, 
                    {
                        "doc": "boolean value. If set to True Sahara will\ncreate a Security Group for each Node Group\nin the Cluster automatically.\n", 
                        "name": "auto_security_group"
                    }, 
                    {
                        "doc": "list of security groups that will be used\nwhile creating VMs. If auto_security_group\nis set to True, this list can be left empty.\n", 
                        "name": "security_groups"
                    }, 
                    {
                        "doc": "config dict that will be passed to each Node\nGroup\n", 
                        "name": "node_configs"
                    }, 
                    {
                        "doc": "config dict that will be passed to the\nCluster\n", 
                        "name": "cluster_configs"
                    }, 
                    {
                        "doc": "If set to true the vms will be scheduled\none per compute node.\n", 
                        "name": "enable_anti_affinity"
                    }, 
                    {
                        "doc": "Use Master Node of a Cluster as a Proxy node and\ndo not assign floating ips to workers.\n", 
                        "name": "enable_proxy"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Launch and delete a Sahara Cluster.", 
                "module": "rally_openstack.scenarios.sahara.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SaharaClusters.create_and_delete_cluster"
            }, 
            "NovaServers.boot_and_list_server@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 server on every iteration. So you will have more\nand more servers and will be able to measure the\nperformance of the \"nova list\" command depending on\nthe number of servers owned by users.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if the server listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from an image and then list all servers.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_list_server"
            }, 
            "DesignateBasic.list_records@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the designate record-list command by listing\nall the records in a domain.\n\nSuppose if we have 2 users in context and each has 2 domains\nuploaded for them we will be able to test the performance of\ndesignate record-list command in this case.", 
                "parameters": [
                    {
                        "doc": "Domain ID", 
                        "name": "domain_id"
                    }
                ], 
                "title": "List Designate records.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_records"
            }, 
            "NeutronSecurityGroup.create_and_list_security_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }
                ], 
                "title": "Create and list Neutron security-groups.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_list_security_groups"
            }, 
            "KeystoneBasic.create_and_list_roles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for\nroles create\n", 
                        "name": "create_role_kwargs"
                    }, 
                    {
                        "doc": "Optional additional arguments for roles list", 
                        "name": "list_role_kwargs"
                    }
                ], 
                "title": "Create a role, then list all roles.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_roles"
            }, 
            "NovaServers.boot_and_bounce_server@openstack": {
                "introduced_in": null, 
                "description": "Actions should be passed into the actions parameter. Available actions\nare 'hard_reboot', 'soft_reboot', 'stop_start', 'rescue_unrescue',\n'pause_unpause', 'suspend_resume', 'lock_unlock' and 'shelve_unshelve'.\nDelete server after all actions were completed.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "list of action dictionaries, where each action\ndictionary speicifes an action to be performed\nin the following format:\n{\"action_name\": <no_of_iterations>}\n", 
                        "name": "actions"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server and run specified actions against it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_bounce_server"
            }, 
            "MuranoEnvironments.create_and_delete_environment@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create environment, session and delete environment.", 
                "module": "rally_openstack.scenarios.murano.environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "MuranoEnvironments.create_and_delete_environment"
            }, 
            "ManilaShares.create_share_network_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "ID of Neutron network\n", 
                        "name": "neutron_net_id"
                    }, 
                    {
                        "doc": "ID of Neutron subnet\n", 
                        "name": "neutron_subnet_id"
                    }, 
                    {
                        "doc": "ID of Nova network\n", 
                        "name": "nova_net_id"
                    }, 
                    {
                        "doc": "share network description", 
                        "name": "description"
                    }
                ], 
                "title": "Creates share network and then deletes.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_share_network_and_delete"
            }, 
            "ec2_servers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of nova servers in each tenant uses ec2 API.", 
                "module": "rally_openstack.contexts.ec2.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "image", 
                        "flavor", 
                        "servers_per_tenant"
                    ], 
                    "type": "object", 
                    "properties": {
                        "servers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "image": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "flavor": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }, 
                "name": "ec2_servers"
            }, 
            "manila_shares@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "This context creates shares for Manila project.", 
                "module": "rally_openstack.contexts.manila.manila_shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "shares_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "share_proto": {
                            "type": "string"
                        }, 
                        "share_type": {
                            "type": "string"
                        }, 
                        "size": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "manila_shares"
            }, 
            "valid_command@openstack": {
                "introduced_in": null, 
                "description": "Ensure that the command dictionary is a proper command-specifying\ndictionary described in 'vmtasks.VMTasks.boot_runcommand_delete'\ndocstring.", 
                "parameters": [
                    {
                        "doc": "Name of parameter to validate\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "Boolean indicating that the command dictionary is\nrequired\n", 
                        "name": "required"
                    }
                ], 
                "title": "Checks that parameter is a proper command-specifying dictionary.", 
                "module": "rally_openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "valid_command"
            }, 
            "NeutronBGPVPN.create_and_update_bgpvpns@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "bool, whether or not to modify BGP VPN name\n", 
                        "name": "update_name"
                    }, 
                    {
                        "doc": "Route Targets that will be both imported\nand used for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Updated Route Targets that will be both\nimported and used for export\n", 
                        "name": "updated_route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Updated additional Route Targets that\nwill be imported\n", 
                        "name": "updated_import_targets"
                    }, 
                    {
                        "doc": "additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "Updated additional Route Targets that\nwill be used for export.\n", 
                        "name": "updated_export_targets"
                    }, 
                    {
                        "doc": "list of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "Updated list of route\ndistinguisher strings\n", 
                        "name": "updated_route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Create and Update bgpvpns", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_update_bgpvpns"
            }, 
            "NovaServers.boot_and_associate_floating_ip@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for\nfloating ip creation\n", 
                        "name": "create_floating_ip_args"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server and associate a floating IP to it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_associate_floating_ip"
            }, 
            "CinderVolumeTypes.create_and_list_volume_types@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Description of the volume type\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "Volume type visibility", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a volume Type, then list all types.", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_list_volume_types"
            }, 
            "NovaServices.list_services@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova service-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "List nova services on host\n", 
                        "name": "host"
                    }, 
                    {
                        "doc": "List nova services matching given binary", 
                        "name": "binary"
                    }
                ], 
                "title": "List all nova services.", 
                "module": "rally_openstack.scenarios.nova.services", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaServices.list_services"
            }, 
            "zaqar@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for ZaqarClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "zaqar"
            }, 
            "CinderVolumeTypes.create_and_delete_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates an encryption type for a given\nvolume type, then deletes the created encryption type.", 
                "parameters": [
                    {
                        "doc": "the encryption type specifications to add\n", 
                        "name": "create_specs"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }
                ], 
                "title": "Create and delete encryption type", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_delete_encryption_type"
            }, 
            "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\", \"neutron bgpvpn-net-assoc-create\"\nand \"neutron bgpvpn-net-assoc-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a network and disassociate it from a BGP VPN.", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_networks"
            }, 
            "NovaFlavors.create_flavor_and_add_tenant_access@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create a flavor and Add flavor access for the given tenant.", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_flavor_and_add_tenant_access"
            }, 
            "NeutronNetworks.create_and_list_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 network on every iteration. So you will have more\nand more networks and will be able to measure the\nperformance of the \"neutron net-list\" command depending on\nthe number of networks owned by users.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create a network and then list all networks.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_networks"
            }, 
            "image_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines which variable should be used\nto get image id value.\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "defines image id param is required", 
                        "name": "nullable"
                    }
                ], 
                "title": "Validator checks existed image or not", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "image_exists"
            }, 
            "stacks@openstack": {
                "introduced_in": null, 
                "description": "Stack generator allows to generate arbitrary number of stacks for\neach tenant before test scenarios. In addition, it allows to define\nnumber of resources (namely OS::Heat::RandomString) that will be created\ninside each stack. After test execution the stacks will be\nautomatically removed from heat.", 
                "parameters": [], 
                "title": "Context class for create temporary stacks with resources.", 
                "module": "rally_openstack.contexts.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "resources_per_stack": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "stacks_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "stacks"
            }, 
            "GnocchiResourceType.create_resource_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "List of attributes", 
                        "name": "attributes"
                    }
                ], 
                "title": "Create resource type.", 
                "module": "rally_openstack.scenarios.gnocchi.resource_type", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiResourceType.create_resource_type"
            }, 
            "KeystoneBasic.create_and_list_ec2credentials@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create and List all keystone ec2-credentials.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_ec2credentials"
            }, 
            "DesignateBasic.list_zones@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the openstack zone list command by listing\nall the zones.", 
                "parameters": [], 
                "title": "List Designate zones.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_zones"
            }, 
            "MuranoEnvironments.list_environments@openstack": {
                "introduced_in": null, 
                "description": "Run murano environment-list for listing all environments.", 
                "parameters": [], 
                "title": "List the murano environments.", 
                "module": "rally_openstack.scenarios.murano.environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "MuranoEnvironments.list_environments"
            }, 
            "ZaqarBasic.create_queue@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "other optional parameters to create queues like\n\"metadata\"\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a Zaqar queue with a random name.", 
                "module": "rally_openstack.scenarios.zaqar.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "ZaqarBasic.create_queue"
            }, 
            "volume_types@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Adds cinder volumes types.", 
                "module": "rally_openstack.contexts.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "items": {
                        "type": "string"
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "array"
                }, 
                "name": "volume_types"
            }, 
            "Watcher.create_audit_and_delete@openstack": {
                "introduced_in": null, 
                "description": "Create Audit, wait until whether Audit is in SUCCEEDED state or in\nFAILED and delete audit.", 
                "parameters": [], 
                "title": "Create and delete audit.", 
                "module": "rally_openstack.scenarios.watcher.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "Watcher.create_audit_and_delete"
            }, 
            "MuranoPackages.package_lifecycle@openstack": {
                "introduced_in": null, 
                "description": "Measure the Murano import, update and delete package\ncommands performance.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared), modifies it (using data from\n\"body\") and deletes.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }, 
                    {
                        "doc": "dict object that defines what package property will be\nupdated, e.g {\"tags\": [\"tag\"]} or {\"enabled\": \"true\"}\n", 
                        "name": "body"
                    }, 
                    {
                        "doc": "string object that defines the way of how package\nproperty will be updated, allowed operations are\n\"add\", \"replace\" or \"delete\".\nDefault value is \"replace\".\n", 
                        "name": "operation"
                    }
                ], 
                "title": "Import Murano package, modify it and then delete it.", 
                "module": "rally_openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.package_lifecycle"
            }, 
            "audit_templates@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates Watcher audit templates for tenants.", 
                "module": "rally_openstack.contexts.watcher.audit_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "params"
                    ], 
                    "type": "object", 
                    "properties": {
                        "audit_templates_per_admin": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "params": {
                            "minItems": 1, 
                            "uniqueItems": true, 
                            "type": "array", 
                            "items": {
                                "additionalProperties": false, 
                                "type": "object", 
                                "properties": {
                                    "goal": {
                                        "additionalProperties": false, 
                                        "type": "object", 
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            }
                                        }
                                    }, 
                                    "strategy": {
                                        "additionalProperties": false, 
                                        "type": "object", 
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }, 
                        "fill_strategy": {
                            "enum": [
                                "round_robin", 
                                "random", 
                                null
                            ]
                        }
                    }
                }, 
                "name": "audit_templates"
            }, 
            "NeutronNetworks.create_and_list_floating_ips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron floating-ip-create\" and \"neutron floating-ip-list\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "str, external network for floating IP creation\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "dict, POST /floatingips request options", 
                        "name": "floating_ip_args"
                    }
                ], 
                "title": "Create and list floating IPs.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_floating_ips"
            }, 
            "NeutronNetworks.create_and_show_ports@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron port-create\" and \"neutron port-show\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create a given number of ports and show created ports in trun.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_ports"
            }, 
            "NeutronNetworks.create_and_delete_floating_ips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron floating-ip-create\" and \"neutron\nfloating-ip-delete\" commands performance.", 
                "parameters": [
                    {
                        "doc": "str, external network for floating IP creation\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "dict, POST /floatingips request options", 
                        "name": "floating_ip_args"
                    }
                ], 
                "title": "Create and delete floating IPs.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_floating_ips"
            }, 
            "magnum@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for MagnumClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "magnum"
            }, 
            "NeutronLoadbalancerV1.create_and_delete_healthmonitors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-healthmonitor-create\" and \"neutron\nlb-healthmonitor-delete\" command performance. The scenario creates\nhealthmonitors and deletes those healthmonitors.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/healthmonitors request\noptions\n", 
                        "name": "healthmonitor_create_args"
                    }
                ], 
                "title": "Create a healthmonitor(v1) and delete healthmonitors(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_delete_healthmonitors"
            }, 
            "CeilometerEvents.create_user_and_list_events@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all events using GET /v2/events.", 
                "parameters": [], 
                "title": "Create user and fetch all events.", 
                "module": "rally_openstack.scenarios.ceilometer.events", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerEvents.create_user_and_list_events"
            }, 
            "lbaas@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates a lb-pool for every subnet created in network context.", 
                "module": "rally_openstack.contexts.neutron.lbaas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "pool": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "lbaas_version": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "lbaas"
            }, 
            "NovaHypervisors.list_and_search_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "The scenario first list all hypervisors,then find its hostname,\nthen list all servers belonging to the hypervisor\n\nMeasure the \"nova hypervisor-servers <hostname>\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all servers belonging to specific hypervisor.", 
                "module": "rally_openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_and_search_hypervisors"
            }, 
            "MuranoEnvironments.create_and_deploy_environment@openstack": {
                "introduced_in": null, 
                "description": "Create environment, create session, add app to environment\npackages_per_env times, send environment to deploy.", 
                "parameters": [
                    {
                        "doc": "number of packages per environment", 
                        "name": "packages_per_env"
                    }
                ], 
                "title": "Create environment, session and deploy environment.", 
                "module": "rally_openstack.scenarios.murano.environments", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "MuranoEnvironments.create_and_deploy_environment"
            }, 
            "watcher@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for WatcherClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "watcher"
            }, 
            "NeutronSecurityGroup.create_and_delete_security_group_rule@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-rule-create\" and \"neutron\nsecurity-group-rule-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_args"
                    }, 
                    {
                        "doc": "dict,\nPOST /v2.0/security-group-rules request options\n", 
                        "name": "security_group_rule_args"
                    }
                ], 
                "title": "Create and delete Neutron security-group-rule.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_delete_security_group_rule"
            }, 
            "HeatStacks.list_stacks_and_resources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List all resources from tenant stacks.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.list_stacks_and_resources"
            }, 
            "NeutronNetworks.create_and_list_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then list all routers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and a given number of routers and list all routers.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_routers"
            }, 
            "Authenticate.keystone@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Check Keystone Client.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.keystone"
            }, 
            "EC2Servers.boot_server@openstack": {
                "introduced_in": null, 
                "description": "Assumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server.", 
                "module": "rally_openstack.scenarios.ec2.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "EC2Servers.boot_server"
            }, 
            "CinderVolumes.create_and_accept_transfer@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder transfer-create\" and \"cinder transfer-accept\"\ncommand performace.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB)\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create initial volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume transfer, then accept it", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_accept_transfer"
            }, 
            "KeystoneBasic.create_and_list_services@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "type of the service\n", 
                        "name": "service_type"
                    }, 
                    {
                        "doc": "description of the service", 
                        "name": "description"
                    }
                ], 
                "title": "Create and list services.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_list_services"
            }, 
            "NovaAggregates.create_aggregate_add_host_and_boot_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates an aggregate, adds a compute host and metadata\nto the aggregate, adds the same metadata to the flavor and creates an\ninstance. Verifies that instance host is one of the hosts in the\naggregate.", 
                "parameters": [
                    {
                        "doc": "The image ID to boot from\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "The metadata to be set as flavor extra specs\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "The availability zone of the aggregate\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "Optional additional arguments to verify host\naggregates\n", 
                        "name": "boot_server_kwargs"
                    }
                ], 
                "title": "Scenario to create and verify an aggregate", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_aggregate_add_host_and_boot_server"
            }, 
            "volumes@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates volumes for each tenant.", 
                "module": "rally_openstack.contexts.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "size"
                    ], 
                    "type": "object", 
                    "properties": {
                        "type": {
                            "oneOf": [
                                {
                                    "type": "string", 
                                    "description": "a string-like type of volume to create."
                                }, 
                                {
                                    "type": "null", 
                                    "description": "Use default type for volume to create."
                                }
                            ]
                        }, 
                        "volumes_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "size": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "volumes"
            }, 
            "KeystoneBasic.authenticate_user_and_validate_token@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Authenticate and validate a keystone token.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.authenticate_user_and_validate_token"
            }, 
            "GlanceImages.create_and_delete_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create and then delete an image.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_delete_image"
            }, 
            "NovaFlavors.create_flavor_and_set_keys@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova flavor-key\" command performance.\nthe scenario first create a flavor,then add the extra specs to it.", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "additional arguments for flavor set keys\n", 
                        "name": "extra_specs"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create flavor and set keys to the flavor.", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_flavor_and_set_keys"
            }, 
            "flavors@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context creates a list of flavors.", 
                "module": "rally_openstack.contexts.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": {
                    "items": {
                        "additionalProperties": false, 
                        "required": [
                            "name", 
                            "ram"
                        ], 
                        "type": "object", 
                        "properties": {
                            "name": {
                                "type": "string"
                            }, 
                            "ram": {
                                "minimum": 1, 
                                "type": "integer"
                            }, 
                            "ephemeral": {
                                "minimum": 0, 
                                "type": "integer"
                            }, 
                            "vcpus": {
                                "minimum": 1, 
                                "type": "integer"
                            }, 
                            "extra_specs": {
                                "additionalProperties": {
                                    "type": "string"
                                }, 
                                "type": "object"
                            }, 
                            "swap": {
                                "minimum": 0, 
                                "type": "integer"
                            }, 
                            "disk": {
                                "minimum": 0, 
                                "type": "integer"
                            }
                        }
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "array"
                }, 
                "name": "flavors"
            }, 
            "CinderVolumes.create_nested_snapshots_and_attach_volume@openstack": {
                "introduced_in": null, 
                "description": "This scenario create vm, volume, create it's snapshot, attach volume,\nthen create new volume from existing snapshot and so on,\nwith defined nested level, after all detach and delete them.\nvolume->snapshot->volume->snapshot->volume ...", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Volume size - dictionary, contains two values:\n   min - minimum size volumes will be created as;\n   max - maximum size volumes will be created as.\ndefault values: {\"min\": 1, \"max\": 5}\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "amount of nested levels\n", 
                        "name": "nested_level"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a snapshot\n", 
                        "name": "create_snapshot_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for VM creation", 
                        "name": "create_vm_params"
                    }
                ], 
                "title": "Create a volume from snapshot and attach/detach the volume", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_nested_snapshots_and_attach_volume"
            }, 
            "NovaFlavors.create_and_get_flavor@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Memory in MB for the flavor\n", 
                        "name": "ram"
                    }, 
                    {
                        "doc": "Number of VCPUs for the flavor\n", 
                        "name": "vcpus"
                    }, 
                    {
                        "doc": "Size of local disk in GB\n", 
                        "name": "disk"
                    }, 
                    {
                        "doc": "ID for the flavor (optional). You can use the reserved\nvalue ``\"auto\"`` to have Nova generate a UUID for the\nflavor in cases where you cannot simply pass ``None``.\n", 
                        "name": "flavorid"
                    }, 
                    {
                        "doc": "Ephemeral space size in GB (default 0).\n", 
                        "name": "ephemeral"
                    }, 
                    {
                        "doc": "Swap space in MB\n", 
                        "name": "swap"
                    }, 
                    {
                        "doc": "RX/TX factor\n", 
                        "name": "rxtx_factor"
                    }, 
                    {
                        "doc": "Make flavor accessible to the public (default true).", 
                        "name": "is_public"
                    }
                ], 
                "title": "Create flavor and get detailed information of the flavor.", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.create_and_get_flavor"
            }, 
            "required_neutron_extensions@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of Neutron extensions", 
                        "name": "extensions"
                    }
                ], 
                "title": "Validator checks if the specified Neutron extension is available", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_neutron_extensions"
            }, 
            "CinderVolumeBackups.create_incremental_volume_backup@openstack": {
                "introduced_in": null, 
                "description": "The scenario first create a volume, the create a backup, the backup\nis full backup. Because Incremental backup must be based on the\nfull backup. finally create a incremental backup.", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "deletes backup and volume after creating if True\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Create a incremental volume backup.", 
                "module": "rally_openstack.scenarios.cinder.volume_backups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeBackups.create_incremental_volume_backup"
            }, 
            "NovaServers.boot_server@openstack": {
                "introduced_in": null, 
                "description": "Assumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if NICs should be assigned\n", 
                        "name": "auto_assign_nic"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server"
            }, 
            "DesignateBasic.create_and_list_servers@openstack": {
                "introduced_in": null, 
                "description": "If you have only 1 user in your context, you will\nadd 1 server on every iteration. So you will have more\nand more server and will be able to measure the\nperformance of the \"designate server-list\" command depending on\nthe number of servers owned by users.", 
                "parameters": [], 
                "title": "Create a Designate server and list all servers.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_servers"
            }, 
            "NovaAggregates.create_and_get_aggregate_details@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates an aggregate and then get details of it.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate and then get its details.", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_get_aggregate_details"
            }, 
            "KeystoneBasic.create_and_update_user@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for user\ncreation\n", 
                        "name": "create_user_kwargs"
                    }, 
                    {
                        "doc": "Optional additional arguments for user\nupdation\n", 
                        "name": "update_user_kwargs"
                    }
                ], 
                "title": "Create user and update the user.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_update_user"
            }, 
            "DesignateBasic.create_and_list_recordsets@openstack": {
                "introduced_in": null, 
                "description": "If you have only 1 user in your context, you will\nadd 1 recordset on every iteration. So you will have more\nand more recordsets and will be able to measure the\nperformance of the \"openstack recordset list\" command depending on\nthe number of zones/recordsets owned by users.", 
                "parameters": [
                    {
                        "doc": "recordsets to create pr zone.", 
                        "name": "recordsets_per_zone"
                    }
                ], 
                "title": "Create and then list recordsets.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_recordsets"
            }, 
            "NeutronLoadbalancerV1.create_and_list_vips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-vip-create\" and \"neutron lb-vip-list\" command\nperformance. The scenario creates a vip for every pool created and\nthen lists vips.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/vips request options\n", 
                        "name": "vip_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/pools request options", 
                        "name": "pool_create_args"
                    }
                ], 
                "title": "Create a vip(v1) and then list vips(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_list_vips"
            }, 
            "GnocchiMetric.create_delete_metric@openstack": {
                "introduced_in": "1.1.0", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Archive policy name\n", 
                        "name": "archive_policy_name"
                    }, 
                    {
                        "doc": "The resource ID to attach the metric to\n", 
                        "name": "resource_id"
                    }, 
                    {
                        "doc": "The unit of the metric", 
                        "name": "unit"
                    }
                ], 
                "title": "Create metric and then delete it.", 
                "module": "rally_openstack.scenarios.gnocchi.metric", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiMetric.create_delete_metric"
            }, 
            "NovaServers.boot_and_delete_multiple_servers@openstack": {
                "introduced_in": null, 
                "description": "Deletion is done in parallel with one request per server, not\nwith a single request for all servers.", 
                "parameters": [
                    {
                        "doc": "The image to boot from\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "Flavor used to boot instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Number of instances to boot\n", 
                        "name": "count"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for instance creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot multiple servers in a single request and delete them.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_delete_multiple_servers"
            }, 
            "MuranoPackages.import_and_filter_applications@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of package import and package\nfiltering commands.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared) and filters packages by some\ncriteria.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }, 
                    {
                        "doc": "dict that contains filter criteria, lately it\nwill be passed as **kwargs to filter method\ne.g. {\"category\": \"Web\"}\n", 
                        "name": "filter_query"
                    }
                ], 
                "title": "Import Murano package and then filter packages by some criteria.", 
                "module": "rally_openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.import_and_filter_applications"
            }, 
            "NeutronLoadbalancerV1.create_and_update_vips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-vip-create\" and \"neutron lb-vip-update\"\ncommand performance. The scenario creates a pool for every subnet\nand then update those pools.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options\n", 
                        "name": "pool_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/vips request options\n", 
                        "name": "vip_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/vips update options", 
                        "name": "vip_update_args"
                    }
                ], 
                "title": "Create vips(v1) and update vips(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_update_vips"
            }, 
            "NeutronNetworks.create_and_show_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then show all routers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for each network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and show a given number of routers.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_routers"
            }, 
            "KeystoneBasic.create_and_delete_service@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "type of the service\n", 
                        "name": "service_type"
                    }, 
                    {
                        "doc": "description of the service", 
                        "name": "description"
                    }
                ], 
                "title": "Create and delete service.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_and_delete_service"
            }, 
            "users@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of keystone users and tenants.", 
                "module": "rally_openstack.contexts.keystone.users", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "anyOf": [
                        {
                            "additionalProperties": false, 
                            "description": "Create new temporary users and tenants.", 
                            "properties": {
                                "user_domain": {
                                    "type": "string", 
                                    "description": "ID of domain in which users will be created."
                                }, 
                                "project_domain": {
                                    "type": "string", 
                                    "description": "ID of domain in which projects will be created."
                                }, 
                                "user_choice_method": {
                                    "$ref": "#/definitions/user_choice_method"
                                }, 
                                "users_per_tenant": {
                                    "minimum": 1, 
                                    "type": "integer", 
                                    "description": "The number of users to create per one tenant."
                                }, 
                                "tenants": {
                                    "minimum": 1, 
                                    "type": "integer", 
                                    "description": "The number of tenants to create."
                                }, 
                                "resource_management_workers": {
                                    "minimum": 1, 
                                    "type": "integer", 
                                    "description": "The number of concurrent threads to use for serving users context."
                                }
                            }
                        }, 
                        {
                            "additionalProperties": false, 
                            "description": "Use existing users and tenants.", 
                            "properties": {
                                "user_choice_method": {
                                    "$ref": "#/definitions/user_choice_method"
                                }
                            }
                        }
                    ], 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "definitions": {
                        "user_choice_method": {
                            "enum": [
                                "random", 
                                "round_robin"
                            ], 
                            "description": "The mode of balancing usage of users between scenario iterations."
                        }
                    }
                }, 
                "name": "users"
            }, 
            "ec2_flavor@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Nova's flavor Name by it's ID or regexp.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "ec2_flavor"
            }, 
            "MistralWorkbooks.list_workbooks@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the Mistral workbook-list\ncommand by listing all the workbooks.", 
                "parameters": [], 
                "title": "Scenario test mistral workbook-list command.", 
                "module": "rally_openstack.scenarios.mistral.workbooks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralWorkbooks.list_workbooks"
            }, 
            "KeystoneBasic.create_update_and_delete_tenant@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters for tenant creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create, update and delete tenant.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_update_and_delete_tenant"
            }, 
            "MistralExecutions.create_execution_from_workbook@openstack": {
                "introduced_in": null, 
                "description": "This scenario is a very useful tool to measure the\n\"mistral execution-create\" and \"mistral execution-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "string (yaml string) representation of given file\ncontent (Mistral workbook definition)\n", 
                        "name": "definition"
                    }, 
                    {
                        "doc": "string the workflow name to execute. Should be\none of the to workflows in the definition. If no\n workflow_name is passed, one of the workflows in\n the definition will be taken.\n", 
                        "name": "workflow_name"
                    }, 
                    {
                        "doc": "file containing a json string of mistral workflow\ninput\n", 
                        "name": "wf_input"
                    }, 
                    {
                        "doc": "file containing a json string of mistral params\n(the string is the place to pass the environment)\n", 
                        "name": "params"
                    }, 
                    {
                        "doc": "if False than it allows to check performance\nin \"create only\" mode.\n", 
                        "name": "do_delete"
                    }
                ], 
                "title": "Scenario tests execution creation and deletion.", 
                "module": "rally_openstack.scenarios.mistral.executions", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralExecutions.create_execution_from_workbook"
            }, 
            "ceilometer@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for CeilometerClient which returns authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "ceilometer"
            }, 
            "keystone@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for KeystoneClient which hides OpenStack auth details.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "keystone"
            }, 
            "fault_injection@openstack": {
                "introduced_in": null, 
                "description": "Configuration:\n\n* action - string that represents an action (more info in [1])\n* verify - whether to verify connection to cloud nodes or not\n\nThis plugin discovers extra config of ExistingCloud\nand looks for \"cloud_config\" field. If cloud_config is present then\nit will be used to connect to the cloud by os-faults.\n\nAnother option is to provide os-faults config file through\nOS_FAULTS_CONFIG env variable. Format of the config can\nbe found in [1].\n\n[1] http://os-faults.readthedocs.io/en/latest/usage.html", 
                "parameters": [], 
                "title": "Performs fault injection using os-faults library.", 
                "module": "rally_openstack.hook.fault_injection", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Hook Action", 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "action"
                    ], 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "type": "string"
                        }, 
                        "verify": {
                            "type": "boolean"
                        }
                    }
                }, 
                "name": "fault_injection"
            }, 
            "EC2Servers.list_servers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the EC2 API list function by listing\nall the servers.", 
                "parameters": [], 
                "title": "List all servers.", 
                "module": "rally_openstack.scenarios.ec2.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "EC2Servers.list_servers"
            }, 
            "heat@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for HeatClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "heat"
            }, 
            "GnocchiResourceType.create_delete_resource_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "List of attributes", 
                        "name": "attributes"
                    }
                ], 
                "title": "Create resource type and then delete it.", 
                "module": "rally_openstack.scenarios.gnocchi.resource_type", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiResourceType.create_delete_resource_type"
            }, 
            "NovaAvailabilityZones.list_availability_zones@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova availability-zone-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the availability-zone listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all availability zones.", 
                "module": "rally_openstack.scenarios.nova.availability_zones", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAvailabilityZones.list_availability_zones"
            }, 
            "NovaServers.boot_server_attach_created_volume_and_resize@openstack": {
                "introduced_in": null, 
                "description": "Simple test to create a VM and attach a volume, then resize the VM,\ndetach the volume then delete volume and VM.\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between attaching a volume and running resize\n(of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "True if need to confirm resize else revert resize\n", 
                        "name": "confirm"
                    }, 
                    {
                        "doc": "True if resources needs to be deleted explicitly\nelse use rally cleanup to remove resources\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation", 
                        "name": "create_volume_kwargs"
                    }
                ], 
                "title": "Create a VM from image, attach a volume to it and resize.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_attach_created_volume_and_resize"
            }, 
            "NeutronSecurityGroup.create_and_show_security_group_rule@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-rule-create\" and \"neutron\nsecurity-group-rule-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_args"
                    }, 
                    {
                        "doc": "dict,\nPOST /v2.0/security-group-rules request options\n", 
                        "name": "security_group_rule_args"
                    }
                ], 
                "title": "Create and show Neutron security-group-rule.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_show_security_group_rule"
            }, 
            "CinderVolumes.create_from_volume_and_delete_volume@openstack": {
                "introduced_in": null, 
                "description": "Scenario for testing volume clone.Optional 'min_sleep' and 'max_sleep'\nparameters allow the scenario to simulate a pause between volume\ncreation and deletion (of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "volume size (in GB), or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\nShould be equal or bigger source volume size\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "minimum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time between volume creation and\ndeletion (in seconds)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create volume from volume and then delete it.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_from_volume_and_delete_volume"
            }, 
            "DesignateBasic.create_and_list_domains@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"designate domain-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 domain on every iteration. So you will have more\nand more domain and will be able to measure the\nperformance of the \"designate domain-list\" command depending on\nthe number of domains owned by users.", 
                "parameters": [], 
                "title": "Create a domain and list all domains.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_domains"
            }, 
            "KeystoneBasic.create_delete_user@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters to create users like\n\"tenant_id\", \"enabled\".\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone user with random name and then delete it.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_delete_user"
            }, 
            "NovaServers.boot_server_and_attach_interface@openstack": {
                "introduced_in": null, 
                "description": "This scenario measures the \"nova interface-attach\" command performance.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "Optional additional arguments for\nserver creation\n", 
                        "name": "boot_server_args"
                    }
                ], 
                "title": "Create server and subnet, then attach the interface to it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_and_attach_interface"
            }, 
            "NovaServers.snapshot_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, make its snapshot and delete both.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.snapshot_server"
            }, 
            "Quotas.nova_update@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update quotas for Nova.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.nova_update"
            }, 
            "SwiftObjects.create_container_and_object_then_delete_all@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int, number of objects to upload\n", 
                        "name": "objects_per_container"
                    }, 
                    {
                        "doc": "int, temporary local object size\n", 
                        "name": "object_size"
                    }, 
                    {
                        "doc": "dict, optional parameters to create container", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create container and objects then delete everything created.", 
                "module": "rally_openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.create_container_and_object_then_delete_all"
            }, 
            "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_routers@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-create\",\n\"neutron bgpvpn-router-assoc-create\" and\n\"neutron bgpvpn-router-assoc-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Associate a router and disassociate it from a BGP VPN.", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_bgpvpn_assoc_disassoc_routers"
            }, 
            "flavor_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines which variable should be used\nto get flavor id value.\n", 
                        "name": "param_name"
                    }
                ], 
                "title": "Returns validator for flavor", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "flavor_exists"
            }, 
            "CinderVolumeTypes.create_and_update_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates a volume type, secondly creates an\nencryption type for the volume type, thirdly updates the encryption\ntype.", 
                "parameters": [
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "create_provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "create_cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "create_key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "create_control_location"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "update_provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "update_cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "update_key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "update_control_location"
                    }
                ], 
                "title": "Create and update encryption type", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_update_encryption_type"
            }, 
            "NovaKeypair.create_and_get_keypair@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keypair and get the keypair details.", 
                "module": "rally_openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.create_and_get_keypair"
            }, 
            "NeutronNetworks.create_and_update_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-create and net-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/networks update request\n", 
                        "name": "network_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create and update a network.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_networks"
            }, 
            "CeilometerTraits.create_user_and_list_trait_descriptions@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all traits for certain event type using\nGET /v2/event_types/<event_type>/traits.", 
                "parameters": [], 
                "title": "Create user and fetch all trait descriptions.", 
                "module": "rally_openstack.scenarios.ceilometer.traits", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerTraits.create_user_and_list_trait_descriptions"
            }, 
            "neutron@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for NeutronClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "neutron"
            }, 
            "VMTasks.boot_runcommand_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "glance image name to use for the vm. Optional\nin case of specified \"image_command_customizer\" context\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "ssh username on server, str\n", 
                        "name": "username"
                    }, 
                    {
                        "doc": "Password on SSH authentication\n", 
                        "name": "password"
                    }, 
                    {
                        "doc": "Command-specifying dictionary that either specifies\nremote command path via `remote_path' (can be uploaded from a\nlocal file specified by `local_path`), an inline script via\n`script_inline' or a local script file path using `script_file'.\nBoth `script_file' and `local_path' are checked to be accessible\nby the `file_exists' validator code.\n\nThe `script_inline' and `script_file' both require an `interpreter'\nvalue to specify the interpreter script should be run with.\n\nNote that any of `interpreter' and `remote_path' can be an array\nprefixed with environment variables and suffixed with args for\nthe `interpreter' command. `remote_path's last component must be\na path to a command to execute (also upload destination if a\n`local_path' is given). Uploading an interpreter is possible\nbut requires that `remote_path' and `interpreter' path do match.\n\nExamples:\n\n  .. code-block:: python\n\n    # Run a `local_script.pl' file sending it to a remote\n    # Perl interpreter\n    command = {\n        \"script_file\": \"local_script.pl\",\n        \"interpreter\": \"/usr/bin/perl\"\n    }\n\n    # Run an inline script sending it to a remote interpreter\n    command = {\n        \"script_inline\": \"echo 'Hello, World!'\",\n        \"interpreter\": \"/bin/sh\"\n    }\n\n    # Run a remote command\n    command = {\n        \"remote_path\": \"/bin/false\"\n    }\n\n    # Copy a local command and run it\n    command = {\n        \"remote_path\": \"/usr/local/bin/fio\",\n        \"local_path\": \"/home/foobar/myfiodir/bin/fio\"\n    }\n\n    # Copy a local command and run it with environment variable\n    command = {\n        \"remote_path\": [\"HOME=/root\", \"/usr/local/bin/fio\"],\n        \"local_path\": \"/home/foobar/myfiodir/bin/fio\"\n    }\n\n    # Run an inline script sending it to a remote interpreter\n    command = {\n        \"script_inline\": \"echo \"Hello, ${NAME:-World}\"\",\n        \"interpreter\": [\"NAME=Earth\", \"/bin/sh\"]\n    }\n\n    # Run an inline script sending it to an uploaded remote\n    # interpreter\n    command = {\n        \"script_inline\": \"echo \"Hello, ${NAME:-World}\"\",\n        \"interpreter\": [\"NAME=Earth\", \"/tmp/sh\"],\n        \"remote_path\": \"/tmp/sh\",\n        \"local_path\": \"/home/user/work/cve/sh-1.0/bin/sh\"\n    }\n", 
                        "name": "command"
                    }, 
                    {
                        "doc": "volume args for booting server from volume\n", 
                        "name": "volume_args"
                    }, 
                    {
                        "doc": "external network name, for floating ip\n", 
                        "name": "floating_network"
                    }, 
                    {
                        "doc": "ssh port for SSH connection\n", 
                        "name": "port"
                    }, 
                    {
                        "doc": "bool, floating or fixed IP for SSH connection\n", 
                        "name": "use_floating_ip"
                    }, 
                    {
                        "doc": "whether to use force_delete for servers\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "whether to check connectivity on server creation\n", 
                        "name": "wait_for_ping"
                    }, 
                    {
                        "doc": "The number of tail nova console-log lines user\nwould like to retrieve\n", 
                        "name": "max_log_length"
                    }, 
                    {
                        "doc": "extra arguments for booting the server", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, run script specified in command and delete server.", 
                "module": "rally_openstack.scenarios.vm.vmtasks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "VMTasks.boot_runcommand_delete"
            }, 
            "CeilometerTraits.create_user_and_list_traits@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches list of all traits for certain event type and\ntrait name using GET /v2/event_types/<event_type>/traits/<trait_name>.", 
                "parameters": [], 
                "title": "Create user and fetch all event traits.", 
                "module": "rally_openstack.scenarios.ceilometer.traits", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerTraits.create_user_and_list_traits"
            }, 
            "NeutronSecurityGroup.create_and_update_security_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }, 
                    {
                        "doc": "dict, PUT /v2.0/security-groups\nupdate options\n", 
                        "name": "security_group_update_args"
                    }
                ], 
                "title": "Create and update Neutron security-groups.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_update_security_groups"
            }, 
            "NovaServers.boot_and_get_console_output@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the nova console-log command by retrieving\nthe text console log output.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "The number of tail log lines you would like to retrieve.\nNone (default value) or -1 means unlimited length.\n", 
                        "name": "length"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Get text console output from server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "Text console log output for server", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_get_console_output"
            }, 
            "glance_image@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Glance's image ID by name or regexp.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "glance_image"
            }, 
            "NovaKeypair.boot_and_delete_server_with_keypair@openstack": {
                "introduced_in": null, 
                "description": "Plan of this scenario:\n\n- create a keypair\n- boot a VM with created keypair\n- delete server\n- delete keypair", 
                "parameters": [
                    {
                        "doc": "ID of the image to be used for server creation\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "ID of the flavor to be used for server creation\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for VM\ncreation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "Deprecated alias for boot_server_kwargs\n", 
                        "name": "server_kwargs"
                    }, 
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot and delete server with keypair.", 
                "module": "rally_openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.boot_and_delete_server_with_keypair"
            }, 
            "ironic@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for IronicClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "ironic"
            }, 
            "DesignateBasic.create_and_list_zones@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"openstack zone list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 zone on every iteration. So you will have more\nand more zone and will be able to measure the\nperformance of the \"openstack zone list\" command depending on\nthe number of zones owned by users.", 
                "parameters": [], 
                "title": "Create a zone and list all zones.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_list_zones"
            }, 
            "sahara@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for SaharaClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "sahara"
            }, 
            "swift_objects@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create containers and objects in each tenant.", 
                "module": "rally_openstack.contexts.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "object_size": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "containers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "objects_per_container": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "resource_management_workers": {
                            "minimum": 1, 
                            "type": "integer"
                        }
                    }
                }, 
                "name": "swift_objects"
            }, 
            "HeatStacks.create_and_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"heat stack-create\" and \"heat stack-delete\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create and then delete a stack.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_and_delete_stack"
            }, 
            "network@openstack": {
                "introduced_in": null, 
                "description": "This creates networks for all tenants, and optionally creates\nanother resources like subnets and routers.", 
                "parameters": [], 
                "title": "Create networking resources.", 
                "module": "rally_openstack.contexts.network.networks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "subnets_per_network": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "dualstack": {
                            "type": "boolean"
                        }, 
                        "network_create_args": {
                            "additionalProperties": true, 
                            "type": "object"
                        }, 
                        "dns_nameservers": {
                            "uniqueItems": true, 
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array"
                        }, 
                        "networks_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "router": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "properties": {
                                "external_gateway_info": {
                                    "additionalProperties": false, 
                                    "type": "object", 
                                    "description": "The external gateway information .", 
                                    "properties": {
                                        "network_id": {
                                            "type": "string"
                                        }, 
                                        "enable_snat": {
                                            "type": "boolean"
                                        }
                                    }
                                }, 
                                "external": {
                                    "type": "boolean"
                                }
                            }
                        }, 
                        "start_cidr": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "network"
            }, 
            "SaharaJob.create_launch_job_sequence_with_scaling@openstack": {
                "introduced_in": null, 
                "description": "This scenario Creates a Job entity and launches an execution on a\nCluster for every job object provided. The Cluster is scaled according\nto the deltas values and the sequence is launched again.", 
                "parameters": [
                    {
                        "doc": "list of jobs that should be executed in one context\n", 
                        "name": "jobs"
                    }, 
                    {
                        "doc": "list of integers which will be used to add or\nremove worker nodes from the cluster\n", 
                        "name": "deltas"
                    }
                ], 
                "title": "Create and execute Sahara EDP Jobs on a scaling Cluster.", 
                "module": "rally_openstack.scenarios.sahara.jobs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaJob.create_launch_job_sequence_with_scaling"
            }, 
            "gnocchi@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for GnocchiClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "gnocchi"
            }, 
            "GnocchiMetric.create_metric@openstack": {
                "introduced_in": "1.1.0", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Archive policy name\n", 
                        "name": "archive_policy_name"
                    }, 
                    {
                        "doc": "The resource ID to attach the metric to\n", 
                        "name": "resource_id"
                    }, 
                    {
                        "doc": "The unit of the metric", 
                        "name": "unit"
                    }
                ], 
                "title": "Create metric.", 
                "module": "rally_openstack.scenarios.gnocchi.metric", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiMetric.create_metric"
            }, 
            "KeystoneBasic.create_user_update_password@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create user and update password for that user.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_user_update_password"
            }, 
            "manila_share_networks@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "This context creates share networks for Manila project.", 
                "module": "rally_openstack.contexts.manila.manila_share_networks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "share_networks": {
                            "additionalProperties": true, 
                            "type": "object", 
                            "description": "\nThis context arg will be used only when context arg \"use_share_networks\" is\nset to True.\n\nIf context arg 'share_networks' has values then they will be used else share\nnetworks will be autocreated - one for each tenant network. If networks do not\nexist then will be created one share network for each tenant without network\ndata.\n\nExpected value is dict of lists where tenant Name or ID is key and list of\nshare_network Names or IDs is value. Example:\n\n   .. code-block:: json\n\n     \"context\": {\n         \"manila_share_networks\": {\n         \"use_share_networks\": true,\n         \"share_networks\": {\n             \"tenant_1_name_or_id\": [\"share_network_1_name_or_id\",\n                                     \"share_network_2_name_or_id\"],\n             \"tenant_2_name_or_id\": [\"share_network_3_name_or_id\"]}\n         }\n     }\n\nAlso, make sure that all 'existing users' in appropriate registered deployment\nhave share networks if its usage is enabled, else Rally will randomly take\nusers that does not satisfy criteria.\n"
                        }, 
                        "use_share_networks": {
                            "type": "boolean", 
                            "description": "Specifies whether manila should use share networks for share creation or not."
                        }
                    }
                }, 
                "name": "manila_share_networks"
            }, 
            "Quotas.neutron_update@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update quotas for neutron.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.neutron_update"
            }, 
            "required_services@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list with names of required services", 
                        "name": "services"
                    }
                ], 
                "title": "Validator checks if specified OpenStack services are available.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_services"
            }, 
            "manila_security_services@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "This context creates 'security services' for Manila project.", 
                "module": "rally_openstack.contexts.manila.manila_security_services", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "security_services": {
                            "items": {
                                "additionalProperties": true, 
                                "required": [
                                    "type"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "type": {
                                        "enum": [
                                            "active_directory", 
                                            "kerberos", 
                                            "ldap"
                                        ]
                                    }
                                }, 
                                "description": "Data for creation of security services. \n Example:\n\n   .. code-block:: json\n\n     {'type': 'LDAP', 'dns_ip': 'foo_ip', \n      'server': 'bar_ip', 'domain': 'quuz_domain',\n      'user': 'ololo', 'password': 'fake_password'}\n"
                            }, 
                            "type": "array", 
                            "description": "It is expected to be list of dicts with data for creation of security services."
                        }
                    }
                }, 
                "name": "manila_security_services"
            }, 
            "NovaAggregates.create_and_list_aggregates@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates a aggregate and then lists all aggregates.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create a aggregate and then list all aggregates.", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_list_aggregates"
            }, 
            "NovaAggregates.create_and_update_aggregate@openstack": {
                "introduced_in": null, 
                "description": "This scenario first creates an aggregate and then update its name and\navailability_zone", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate and then update its name and availability_zone", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_and_update_aggregate"
            }, 
            "swift@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for SwiftClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "swift"
            }, 
            "GnocchiMetric.list_metric@openstack": {
                "introduced_in": "1.1.0", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Maximum number of metrics to list", 
                        "name": "limit"
                    }
                ], 
                "title": "List metrics.", 
                "module": "rally_openstack.scenarios.gnocchi.metric", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiMetric.list_metric"
            }, 
            "SwiftObjects.list_objects_in_containers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List objects in all containers.", 
                "module": "rally_openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.list_objects_in_containers"
            }, 
            "CinderVolumeTypes.create_and_list_encryption_type@openstack": {
                "introduced_in": null, 
                "description": "This scenario firstly creates a volume type, secondly creates an\nencryption type for the volume type, thirdly lists all encryption\ntypes.", 
                "parameters": [
                    {
                        "doc": "The encryption type specifications to add.\nDEPRECATED, specify arguments explicitly.\n", 
                        "name": "create_specs"
                    }, 
                    {
                        "doc": "The class that provides encryption support. For\nexample, LuksEncryptor.\n", 
                        "name": "provider"
                    }, 
                    {
                        "doc": "The encryption algorithm or mode.\n", 
                        "name": "cipher"
                    }, 
                    {
                        "doc": "Size of encryption key, in bits.\n", 
                        "name": "key_size"
                    }, 
                    {
                        "doc": "Notional service where encryption is\nperformed. Valid values are \"front-end\"\nor \"back-end.\"\n", 
                        "name": "control_location"
                    }, 
                    {
                        "doc": "Options used when search for encryption types", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Create and list encryption type", 
                "module": "rally_openstack.scenarios.cinder.volume_types", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumeTypes.create_and_list_encryption_type"
            }, 
            "CeilometerQueries.create_and_query_alarms@openstack": {
                "introduced_in": null, 
                "description": "This scenario tests POST /v2/query/alarms\nAn alarm is first created and then fetched using the input query.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "optional filter query dictionary\n", 
                        "name": "filter"
                    }, 
                    {
                        "doc": "optional param for specifying ordering of results\n", 
                        "name": "orderby"
                    }, 
                    {
                        "doc": "optional param for maximum number of results returned\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional parameters for alarm creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm and then query it with specific parameters.", 
                "module": "rally_openstack.scenarios.ceilometer.queries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerQueries.create_and_query_alarms"
            }, 
            "ManilaShares.set_and_delete_metadata@openstack": {
                "introduced_in": null, 
                "description": "This requires a share to be created with the shares\ncontext. Additionally, ``sets * set_size`` must be greater\nthan or equal to ``deletes * delete_size``.", 
                "parameters": [
                    {
                        "doc": "how many set_metadata operations to perform\n", 
                        "name": "sets"
                    }, 
                    {
                        "doc": "number of metadata keys to set in each\nset_metadata operation\n", 
                        "name": "set_size"
                    }, 
                    {
                        "doc": "number of metadata keys to delete in each\ndelete_metadata operation\n", 
                        "name": "delete_size"
                    }, 
                    {
                        "doc": "minimal size of metadata key to set\n", 
                        "name": "key_min_length"
                    }, 
                    {
                        "doc": "maximum size of metadata key to set\n", 
                        "name": "key_max_length"
                    }, 
                    {
                        "doc": "minimal size of metadata value to set\n", 
                        "name": "value_min_length"
                    }, 
                    {
                        "doc": "maximum size of metadata value to set", 
                        "name": "value_max_length"
                    }
                ], 
                "title": "Sets and deletes share metadata.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.set_and_delete_metadata"
            }, 
            "cinder_volume_type@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Find Cinder volume type ID by name or regexp.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "cinder_volume_type"
            }, 
            "MistralExecutions.list_executions@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the Mistral execution-list\ncommand by listing all the executions.", 
                "parameters": [
                    {
                        "doc": "The last execution uuid of the previous page, displays\nlist of executions after \"marker\".\n", 
                        "name": "marker"
                    }, 
                    {
                        "doc": "number Maximum number of executions to return in a single\nresult.\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "id,description\n", 
                        "name": "sort_keys"
                    }, 
                    {
                        "doc": "[SORT_DIRS] Comma-separated list of sort directions.\nDefault: asc.\n", 
                        "name": "sort_dirs"
                    }
                ], 
                "title": "Scenario test mistral execution-list command.", 
                "module": "rally_openstack.scenarios.mistral.executions", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MistralExecutions.list_executions"
            }, 
            "CinderQos.create_qos_associate_and_disassociate_type@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation", 
                        "name": "read_iops_sec"
                    }
                ], 
                "title": "Create a qos, Associate and Disassociate the qos from volume type.", 
                "module": "rally_openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_qos_associate_and_disassociate_type"
            }, 
            "CeilometerAlarms.create_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test POST /v2/alarms.\nmeter_name and threshold are required parameters for alarm creation.\nkwargs stores other optional parameters like 'ok_actions',\n'project_id' etc that may be passed while creating an alarm.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create an alarm.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_alarm"
            }, 
            "NovaServers.boot_server_from_volume_snapshot@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and creates a\nsnapshot from this volume, then boots a server from\nthe created snapshot.\nAssumes that cleanup is done elsewhere.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "True if NICs should be assigned\n", 
                        "name": "auto_assign_nic"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from a snapshot.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_snapshot"
            }, 
            "CinderQos.create_and_set_qos@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation\n", 
                        "name": "read_iops_sec"
                    }, 
                    {
                        "doc": "update Consumer behavior\n", 
                        "name": "set_consumer"
                    }, 
                    {
                        "doc": "update random write limitation\n", 
                        "name": "set_write_iops_sec"
                    }, 
                    {
                        "doc": "update random read limitation", 
                        "name": "set_read_iops_sec"
                    }
                ], 
                "title": "Create a qos, then Add/Update keys in qos specs.", 
                "module": "rally_openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_and_set_qos"
            }, 
            "CeilometerResource.list_matched_resources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "lower bound of resource timestamp in isoformat\n", 
                        "name": "start_time"
                    }, 
                    {
                        "doc": "upper bound of resource timestamp in isoformat\n", 
                        "name": "end_time"
                    }, 
                    {
                        "doc": "count of resources in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Get resources that matched fields from context and args.", 
                "module": "rally_openstack.scenarios.ceilometer.resources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerResource.list_matched_resources"
            }, 
            "NovaServers.boot_server_from_volume_and_delete@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and then a server.\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between volume creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from volume and then delete it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_and_delete"
            }, 
            "Watcher.create_audit_template_and_delete@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "The goal audit template is based on\n", 
                        "name": "goal"
                    }, 
                    {
                        "doc": "The strategy used to provide resource optimization\nalgorithm\n", 
                        "name": "strategy"
                    }
                ], 
                "title": "Create audit template and delete it.", 
                "module": "rally_openstack.scenarios.watcher.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "Watcher.create_audit_template_and_delete"
            }, 
            "roles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for assigning roles for users.", 
                "module": "rally_openstack.contexts.keystone.roles", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "items": {
                        "type": "string", 
                        "description": "The name of role to assign to user"
                    }, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "array"
                }, 
                "name": "roles"
            }, 
            "Authenticate.validate_ceilometer@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Ceilometer Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_ceilometer"
            }, 
            "MagnumClusters.list_clusters@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"magnum clusters-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "(Optional) The maximum number of results to return\n          per request, if:\n\n1) limit > 0, the maximum number of clusters to return.\n2) limit param is NOT specified (None), the number of items\n   returned respect the maximum imposed by the Magnum API\n   (see Magnum's api.max_limit option).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional additional arguments for clusters listing", 
                        "name": "kwargs"
                    }
                ], 
                "title": "List all clusters.", 
                "module": "rally_openstack.scenarios.magnum.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MagnumClusters.list_clusters"
            }, 
            "CeilometerStats.get_stats@openstack": {
                "introduced_in": null, 
                "description": "Statistics is fetched for the using\nGET /v2/meters/(meter_name)/statistics.", 
                "parameters": [
                    {
                        "doc": "meter to take statistic for\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "the length of the time range covered by these stats\n", 
                        "name": "period"
                    }, 
                    {
                        "doc": "the fields used to group the samples\n", 
                        "name": "groupby"
                    }, 
                    {
                        "doc": "name of function for samples aggregation\n", 
                        "name": "aggregates"
                    }
                ], 
                "title": "Fetch statistics for certain meter.", 
                "module": "rally_openstack.scenarios.ceilometer.stats", 
                "platform": "openstack", 
                "returns": "list of statistics data", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerStats.get_stats"
            }, 
            "SaharaJob.create_launch_job@openstack": {
                "introduced_in": null, 
                "description": "This scenario Creates a Job entity and launches an execution on a\nCluster.", 
                "parameters": [
                    {
                        "doc": "type of the Data Processing Job\n", 
                        "name": "job_type"
                    }, 
                    {
                        "doc": "config dict that will be passed to a Job Execution\n", 
                        "name": "configs"
                    }, 
                    {
                        "doc": "index of a job in a sequence. This index will be\nused to create different atomic actions for each job\nin a sequence\n", 
                        "name": "job_idx"
                    }
                ], 
                "title": "Create and execute a Sahara EDP Job.", 
                "module": "rally_openstack.scenarios.sahara.jobs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaJob.create_launch_job"
            }, 
            "ca_certs@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates ca certs.", 
                "module": "rally_openstack.contexts.magnum.ca_certs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "directory": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "ca_certs"
            }, 
            "external_network_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "name of validated network", 
                        "name": "param_name"
                    }
                ], 
                "title": "Validator checks that external network with given name exists.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "external_network_exists"
            }, 
            "KeystoneBasic.create_tenant@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Other optional parameters", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keystone tenant with random name.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_tenant"
            }, 
            "CinderVolumes.create_and_upload_volume_to_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size (integers, in GB), or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume.\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "when set to True volume that is attached to an instance\ncould be uploaded to image\n", 
                        "name": "force"
                    }, 
                    {
                        "doc": "image container format\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "disk format for image\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "deletes image and volume after uploading if True\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and upload a volume to image.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_upload_volume_to_image"
            }, 
            "required_api_versions@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "name of required component\n", 
                        "name": "component"
                    }, 
                    {
                        "doc": "version of required component", 
                        "name": "versions"
                    }
                ], 
                "title": "Validator checks component API versions.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "required_api_versions"
            }, 
            "GnocchiArchivePolicy.create_archive_policy@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "List of definitions\n", 
                        "name": "definition"
                    }, 
                    {
                        "doc": "List of aggregation methods", 
                        "name": "aggregation_methods"
                    }
                ], 
                "title": "Create archive policy.", 
                "module": "rally_openstack.scenarios.gnocchi.archive_policy", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicy.create_archive_policy"
            }, 
            "NovaHypervisors.list_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova hypervisor-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List hypervisors.", 
                "module": "rally_openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_hypervisors"
            }, 
            "NeutronNetworks.create_and_show_network@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create a network and show network details.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_network"
            }, 
            "CeilometerAlarms.list_alarms@openstack": {
                "introduced_in": null, 
                "description": "This scenario fetches list of all alarms using GET /v2/alarms.", 
                "parameters": [], 
                "title": "Fetch all alarms.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.list_alarms"
            }, 
            "DesignateBasic.list_recordsets@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the openstack recordset list command by\nlisting all the recordsets in a zone.", 
                "parameters": [
                    {
                        "doc": "Zone ID", 
                        "name": "zone_id"
                    }
                ], 
                "title": "List Designate recordsets.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_recordsets"
            }, 
            "NovaHypervisors.list_and_get_uptime_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "The scenario first list all hypervisors,then display\nthe uptime of the listed hypervisors in turn.\n\nMeasure the \"nova hypervisor-uptime\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List hypervisors,then display the uptime of it.", 
                "module": "rally_openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_and_get_uptime_hypervisors"
            }, 
            "DesignateBasic.create_and_delete_server@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting servers\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then delete a server.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_server"
            }, 
            "NeutronSecurityGroup.create_and_list_security_group_rules@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-rule-create\" and \"neutron\nsecurity-group-rule-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_args"
                    }, 
                    {
                        "doc": "dict,\nPOST /v2.0/security-group-rules request options\n", 
                        "name": "security_group_rule_args"
                    }
                ], 
                "title": "Create and list Neutron security-group-rules.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_list_security_group_rules"
            }, 
            "NeutronNetworks.create_and_delete_networks@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron net-create\" and \"net-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request options", 
                        "name": "network_create_args"
                    }
                ], 
                "title": "Create and delete a network.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_networks"
            }, 
            "NovaServers.list_servers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario test the nova list command by listing\nall the servers.", 
                "parameters": [
                    {
                        "doc": "True if detailed information about servers\nshould be listed\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all servers.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.list_servers"
            }, 
            "CinderVolumes.create_volume@openstack": {
                "introduced_in": null, 
                "description": "Good test to check how influence amount of active volumes on\nperformance of creating new.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "image to be used to create volume\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume"
            }, 
            "NeutronBGPVPN.create_and_list_bgpvpns@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron bgpvpn-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Route Targets that will be both imported and\nused for export\n", 
                        "name": "route_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be imported\n", 
                        "name": "import_targets"
                    }, 
                    {
                        "doc": "Additional Route Targets that will be used\nfor export.\n", 
                        "name": "export_targets"
                    }, 
                    {
                        "doc": "List of route distinguisher strings\n", 
                        "name": "route_distinguishers"
                    }, 
                    {
                        "doc": "type of VPN and the technology behind it.\nAcceptable formats: l2 and l3\n", 
                        "name": "bgpvpn_type"
                    }
                ], 
                "title": "Create a bgpvpn and then list all bgpvpns", 
                "module": "rally_openstack.scenarios.neutron.bgpvpn", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NeutronBGPVPN.create_and_list_bgpvpns"
            }, 
            "router@openstack": {
                "introduced_in": null, 
                "description": "This creates router for all tenants.", 
                "parameters": [], 
                "title": "Create networking resources.", 
                "module": "rally_openstack.contexts.network.routers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "external_gateway_info": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "description": "The external gateway information .", 
                            "properties": {
                                "network_id": {
                                    "type": "string"
                                }, 
                                "enable_snat": {
                                    "type": "boolean"
                                }
                            }
                        }, 
                        "availability_zone_hints": {
                            "type": "boolean", 
                            "description": "Require router_availability_zone extension."
                        }, 
                        "network_id": {
                            "type": "string", 
                            "description": "Network ID"
                        }, 
                        "routers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "distributed": {
                            "type": "boolean", 
                            "description": "Distributed router. Require dvr extension."
                        }, 
                        "admin_state_up ": {
                            "type": "boolean", 
                            "description": "A human-readable description for the resource"
                        }, 
                        "ha": {
                            "type": "boolean", 
                            "description": "Highly-available router. Require l3-ha."
                        }, 
                        "external_fixed_ips": {
                            "items": {
                                "additionalProperties": false, 
                                "type": "object", 
                                "properties": {
                                    "subnet_id": {
                                        "type": "string"
                                    }, 
                                    "ip_address": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Ip(s) of the external gateway interface."
                        }
                    }
                }, 
                "name": "router"
            }, 
            "HeatStacks.create_check_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of the following commands:\n- heat stack-create\n- heat action-check\n- heat stack-delete", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create, check and delete a stack.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_check_delete_stack"
            }, 
            "NovaServers.boot_and_show_server@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the nova show command by retrieving\nthe server details.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Show server details.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "Server details", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_show_server"
            }, 
            "NovaServers.resize_shutoff_server@openstack": {
                "introduced_in": null, 
                "description": "This test will confirm the resize by default,\nor revert the resize if confirm is set to false.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "True if need to confirm resize else revert resize\n", 
                        "name": "confirm"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server and stop it, then resize and delete it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.resize_shutoff_server"
            }, 
            "GlanceImages.create_and_get_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create and get detailed information of an image.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_get_image"
            }, 
            "NovaAgents.list_agents@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova agent-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "List agent builds on a specific hypervisor.\nNone (default value) means list for all\nhypervisors\n", 
                        "name": "hypervisor"
                    }
                ], 
                "title": "List all builds.", 
                "module": "rally_openstack.scenarios.nova.agents", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAgents.list_agents"
            }, 
            "glance_image_args@default": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Process Glance image create options to look similar in case of V1/V2.", 
                "module": "rally_openstack.types", 
                "platform": "default", 
                "returns": "", 
                "base": "Resource Type", 
                "schema": null, 
                "name": "glance_image_args"
            }, 
            "SwiftObjects.create_container_and_object_then_download_object@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "int, number of objects to upload\n", 
                        "name": "objects_per_container"
                    }, 
                    {
                        "doc": "int, temporary local object size\n", 
                        "name": "object_size"
                    }, 
                    {
                        "doc": "dict, optional parameters to create container", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create container and objects then download all objects.", 
                "module": "rally_openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.create_container_and_object_then_download_object"
            }, 
            "ManilaShares.create_and_extend_share@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "share protocol for new share\navailable values are NFS, CIFS, CephFS, GlusterFS and HDFS.\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "size in GiB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "new size of the share in GiB\n", 
                        "name": "new_size"
                    }, 
                    {
                        "doc": "ID of the snapshot\n", 
                        "name": "snapshot_id"
                    }, 
                    {
                        "doc": "description of a share\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "optional metadata to set on share creation\n", 
                        "name": "metadata"
                    }, 
                    {
                        "doc": "either instance of ShareNetwork or text with ID\n", 
                        "name": "share_network"
                    }, 
                    {
                        "doc": "either instance of ShareType or text with ID\n", 
                        "name": "share_type"
                    }, 
                    {
                        "doc": "whether to set share as public or not.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "availability zone of the share\n", 
                        "name": "availability_zone"
                    }, 
                    {
                        "doc": "ID of the share group to which the share\nshould belong\n", 
                        "name": "share_group_id"
                    }
                ], 
                "title": "Create and extend a share", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_extend_share"
            }, 
            "CeilometerResource.list_resources@openstack": {
                "introduced_in": null, 
                "description": "This scenario fetches list of all resources using GET /v2/resources.", 
                "parameters": [
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "lower bound of resource timestamp in isoformat\n", 
                        "name": "start_time"
                    }, 
                    {
                        "doc": "upper bound of resource timestamp in isoformat\n", 
                        "name": "end_time"
                    }, 
                    {
                        "doc": "count of resources in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Check all available queries for list resource request.", 
                "module": "rally_openstack.scenarios.ceilometer.resources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerResource.list_resources"
            }, 
            "NeutronNetworks.create_and_delete_ports@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron port-create\" and \"neutron port-delete\"\ncommands performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create and delete a port.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_ports"
            }, 
            "DesignateBasic.create_and_update_domain@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and updating domains\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then update a domain.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_update_domain"
            }, 
            "sahara_image@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for adding and tagging Sahara images.", 
                "module": "rally_openstack.contexts.sahara.sahara_image", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "oneOf": [
                        {
                            "required": [
                                "image_url", 
                                "username", 
                                "plugin_name", 
                                "hadoop_version"
                            ], 
                            "description": "Create an image."
                        }, 
                        {
                            "required": [
                                "image_uuid"
                            ], 
                            "description": "Use an existing image."
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "username": {
                            "type": "string"
                        }, 
                        "image_uuid": {
                            "type": "string"
                        }, 
                        "hadoop_version": {
                            "type": "string"
                        }, 
                        "image_url": {
                            "type": "string"
                        }, 
                        "plugin_name": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_image"
            }, 
            "clusters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of Magnum clusters.", 
                "module": "rally_openstack.contexts.magnum.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "node_count": {
                            "minimum": 1, 
                            "type": "integer"
                        }, 
                        "cluster_template_uuid": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "clusters"
            }, 
            "HeatStacks.create_suspend_resume_delete_stack@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat action-suspend\nheat action-resume\nheat stack-delete", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create, suspend-resume and then delete a stack.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_suspend_resume_delete_stack"
            }, 
            "sahara_job_binaries@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up Job Binaries for an EDP job.", 
                "module": "rally_openstack.contexts.sahara.sahara_job_binaries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object", 
                    "properties": {
                        "libs": {
                            "items": {
                                "additionalProperties": false, 
                                "required": [
                                    "name", 
                                    "download_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }, 
                                    "download_url": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }, 
                        "mains": {
                            "items": {
                                "additionalProperties": false, 
                                "required": [
                                    "name", 
                                    "download_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }, 
                                    "download_url": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "name": "sahara_job_binaries"
            }, 
            "GlanceImages.create_and_update_image@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"glance image-create\" and \"glance image-update\" commands\nperformance.", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "List of property names to remove.\n(It is only supported by Glance v2.)\n", 
                        "name": "remove_props"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "create_min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "create_min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the created image\n", 
                        "name": "create_properties"
                    }, 
                    {
                        "doc": "The min disk of updated images\n", 
                        "name": "update_min_disk"
                    }, 
                    {
                        "doc": "The min ram of updated images", 
                        "name": "update_min_ram"
                    }
                ], 
                "title": "Create an image then update it.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_update_image"
            }, 
            "NovaServers.pause_and_unpause_server@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a server, pause, unpause and then delete it", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.pause_and_unpause_server"
            }, 
            "HeatStacks.create_stack_and_list_output@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-list", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and list outputs by using new algorithm.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_list_output"
            }, 
            "CinderVolumes.list_volumes@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the cinder list command by listing\nall the volumes.", 
                "parameters": [
                    {
                        "doc": "True if detailed information about volumes\nshould be listed\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List all volumes.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.list_volumes"
            }, 
            "Authenticate.validate_heat@openstack": {
                "introduced_in": null, 
                "description": "Creation of the client does not ensure validation of the token.\nWe have to do some minimal operation to make sure token gets validated.", 
                "parameters": [
                    {
                        "doc": "number of times to validate", 
                        "name": "repetitions"
                    }
                ], 
                "title": "Check Heat Client to ensure validation of token.", 
                "module": "rally_openstack.scenarios.authenticate.authenticate", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Authenticate.validate_heat"
            }, 
            "manila@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for ManilaClient which returns an authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "manila"
            }, 
            "existing_network@openstack": {
                "introduced_in": null, 
                "description": "This context should be used on a deployment with existing users.", 
                "parameters": [], 
                "title": "This context supports using existing networks in Rally.", 
                "module": "rally_openstack.contexts.network.existing_network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "type": "object"
                }, 
                "name": "existing_network"
            }, 
            "NovaServers.boot_server_from_volume_and_resize@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and then a server.\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between volume creation and deletion\n(of random duration from [min_sleep, max_sleep]).\n\nThis test will confirm the resize by default,\nor revert the resize if confirm is set to false.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "True if need to confirm resize else revert resize\n", 
                        "name": "confirm"
                    }, 
                    {
                        "doc": "True if resources needs to be deleted explicitly\nelse use rally cleanup to remove resources\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation", 
                        "name": "create_volume_kwargs"
                    }
                ], 
                "title": "Boot a server from volume, then resize and delete it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_and_resize"
            }, 
            "HeatStacks.create_stack_and_list_output_via_API@openstack": {
                "introduced_in": null, 
                "description": "Measure performance of the following commands:\nheat stack-create\nheat output-list", 
                "parameters": [
                    {
                        "doc": "path to stack template file\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition", 
                        "name": "environment"
                    }
                ], 
                "title": "Create stack and list outputs by using old algorithm.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_list_output_via_API"
            }, 
            "NovaHypervisors.list_and_get_hypervisors@openstack": {
                "introduced_in": null, 
                "description": "The scenario first lists all hypervisors, then get detailed information\nof the listed hypervisors in turn.\n\nMeasure the \"nova hypervisor-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "True if the hypervisor listing should contain\ndetailed information about all of them\n", 
                        "name": "detailed"
                    }
                ], 
                "title": "List and Get hypervisors.", 
                "module": "rally_openstack.scenarios.nova.hypervisors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaHypervisors.list_and_get_hypervisors"
            }, 
            "NovaServers.resize_server@openstack": {
                "introduced_in": null, 
                "description": "This test will confirm the resize by default,\nor revert the resize if confirm is set to false.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "flavor to be used to resize the booted instance\n", 
                        "name": "to_flavor"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server, then resize and delete it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.resize_server"
            }, 
            "CeilometerAlarms.create_and_update_alarm@openstack": {
                "introduced_in": null, 
                "description": "This scenarios test PUT /v2/alarms/(alarm_id)\nInitially alarm is created and then the created alarm is updated using\nits alarm_id. meter_name and threshold are required parameters\nfor alarm creation. kwargs stores other optional parameters like\n'ok_actions', 'project_id' etc that may be passed while alarm creation.", 
                "parameters": [
                    {
                        "doc": "specifies meter name of the alarm\n", 
                        "name": "meter_name"
                    }, 
                    {
                        "doc": "specifies alarm threshold\n", 
                        "name": "threshold"
                    }, 
                    {
                        "doc": "specifies optional arguments for alarm creation.", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and update the newly created alarm.", 
                "module": "rally_openstack.scenarios.ceilometer.alarms", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerAlarms.create_and_update_alarm"
            }, 
            "NeutronNetworks.create_and_list_ports@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/ports request options\n", 
                        "name": "port_create_args"
                    }, 
                    {
                        "doc": "int, number of ports for one network", 
                        "name": "ports_per_network"
                    }
                ], 
                "title": "Create and a given number of ports and list all ports.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_list_ports"
            }, 
            "CinderVolumes.list_types@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the cinder type-list command by listing\nall the volume types.", 
                "parameters": [
                    {
                        "doc": "Options used when search for volume types\n", 
                        "name": "search_opts"
                    }, 
                    {
                        "doc": "If query public volume type", 
                        "name": "is_public"
                    }
                ], 
                "title": "List all volume types.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.list_types"
            }, 
            "NeutronNetworks.create_and_update_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets\nand then updates the subnet. This scenario measures the\n\"neutron subnet-update\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, PUT /v2.0/subnets update options\n", 
                        "name": "subnet_update_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and update a subnet.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_update_subnets"
            }, 
            "NeutronNetworks.create_and_delete_routers@openstack": {
                "introduced_in": null, 
                "description": "Create a network, a given number of subnets and routers\nand then delete all routers.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions. Deprecated.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network\n", 
                        "name": "subnets_per_network"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/routers request options", 
                        "name": "router_create_args"
                    }
                ], 
                "title": "Create and delete a given number of routers.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "NeutronNetworks.create_and_delete_routers"
            }, 
            "GnocchiResource.create_delete_resource@openstack": {
                "introduced_in": "1.1.0", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Type of the resource", 
                        "name": "resource_type"
                    }
                ], 
                "title": "Create resource and then delete it.", 
                "module": "rally_openstack.scenarios.gnocchi.resource", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiResource.create_delete_resource"
            }, 
            "CinderVolumes.create_volume_from_snapshot@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "if True, a snapshot and a volume will\nbe deleted after creation.\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a snapshot\n", 
                        "name": "create_snapshot_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a volume-snapshot, then create a volume from this snapshot.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_from_snapshot"
            }, 
            "KeystoneBasic.create_add_and_list_user_roles@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create user role, add it and list user roles for given user.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.create_add_and_list_user_roles"
            }, 
            "NovaAggregates.create_aggregate_add_and_remove_host@openstack": {
                "introduced_in": null, 
                "description": "Measure \"nova aggregate-add-host\" and \"nova aggregate-remove-host\"\ncommand performance.", 
                "parameters": [
                    {
                        "doc": "The availability zone of the aggregate", 
                        "name": "availability_zone"
                    }
                ], 
                "title": "Create an aggregate, add a host to and remove the host from it", 
                "module": "rally_openstack.scenarios.nova.aggregates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "NovaAggregates.create_aggregate_add_and_remove_host"
            }, 
            "CinderVolumes.create_and_attach_volume@openstack": {
                "introduced_in": null, 
                "description": "Simple test to create a VM and attach a volume, then\ndetach the volume and delete volume/VM.", 
                "parameters": [
                    {
                        "doc": "volume size (integer, in GB) or\ndictionary, must contain two values:\n    min - minimum size volumes will be created as;\n    max - maximum size volumes will be created as.\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "optional arguments for volume creation\n", 
                        "name": "create_volume_params"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "create_vm_params"
                    }, 
                    {
                        "doc": "(deprecated) optional arguments for VM creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a VM and attach a volume to it.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_and_attach_volume"
            }, 
            "keypair@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create Nova KeyPair for each user.", 
                "module": "rally_openstack.contexts.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "type": "object"
                }, 
                "name": "keypair"
            }, 
            "NovaServers.boot_and_delete_server@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between volume creation and deletion\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot and delete a server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_delete_server"
            }, 
            "NovaFlavors.list_flavors@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova flavor-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "Whether flavor needs to be return with details\n(optional).\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Filter flavors with provided access type (optional).\nNone means give all flavors and only admin has query\naccess to all flavor types.\n", 
                        "name": "is_public"
                    }, 
                    {
                        "doc": "Begin returning flavors that appear later in the flavor\nlist than that represented by this flavor id (optional).\n", 
                        "name": "marker"
                    }, 
                    {
                        "doc": "Filters the flavors by a minimum disk space, in GiB.\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "Filters the flavors by a minimum RAM, in MB.\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "maximum number of flavors to return (optional).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "Flavors list sort key (optional).\n", 
                        "name": "sort_key"
                    }, 
                    {
                        "doc": "Flavors list sort direction (optional).", 
                        "name": "sort_dir"
                    }
                ], 
                "title": "List all flavors.", 
                "module": "rally_openstack.scenarios.nova.flavors", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaFlavors.list_flavors"
            }, 
            "MagnumClusterTemplates.list_cluster_templates@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"magnum cluster_template-list\" command performance.", 
                "parameters": [
                    {
                        "doc": "(Optional) The maximum number of results to return\n          per request, if:\n\n1) limit > 0, the maximum number of cluster_templates to return.\n2) limit param is NOT specified (None), the number of items\n   returned respect the maximum imposed by the Magnum API\n   (see Magnum's api.max_limit option).\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "optional additional arguments for cluster_templates\nlisting\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "List all cluster_templates.", 
                "module": "rally_openstack.scenarios.magnum.cluster_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MagnumClusterTemplates.list_cluster_templates"
            }, 
            "NeutronSecurityGroup.create_and_delete_security_groups@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron security-group-create\" and \"neutron\nsecurity-group-delete\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/security-groups\nrequest options\n", 
                        "name": "security_group_create_args"
                    }
                ], 
                "title": "Create and delete Neutron security-groups.", 
                "module": "rally_openstack.scenarios.neutron.security_groups", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronSecurityGroup.create_and_delete_security_groups"
            }, 
            "GlanceImages.create_and_list_image@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"glance image-list\" command performance.\n\nIf you have only 1 user in your context, you will\nadd 1 image on every iteration. So you will have more\nand more images and will be able to measure the\nperformance of the \"glance image-list\" command depending on\nthe number of images owned by users.", 
                "parameters": [
                    {
                        "doc": "container format of image. Acceptable\nformats: ami, ari, aki, bare, and ovf\n", 
                        "name": "container_format"
                    }, 
                    {
                        "doc": "image file location\n", 
                        "name": "image_location"
                    }, 
                    {
                        "doc": "disk format of image. Acceptable formats:\nami, ari, aki, vhd, vmdk, raw, qcow2, vdi, and iso\n", 
                        "name": "disk_format"
                    }, 
                    {
                        "doc": "The access permission for the created image\n", 
                        "name": "visibility"
                    }, 
                    {
                        "doc": "The min disk of created images\n", 
                        "name": "min_disk"
                    }, 
                    {
                        "doc": "The min ram of created images\n", 
                        "name": "min_ram"
                    }, 
                    {
                        "doc": "A dict of image metadata properties to set\non the image\n", 
                        "name": "properties"
                    }
                ], 
                "title": "Create an image and then list all images.", 
                "module": "rally_openstack.scenarios.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GlanceImages.create_and_list_image"
            }, 
            "validate_heat_template@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "list of parameters to be validated.", 
                        "name": "params"
                    }
                ], 
                "title": "Validates heat template.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "validate_heat_template"
            }, 
            "ZaqarBasic.producer_consumer@openstack": {
                "introduced_in": null, 
                "description": "Creates a Zaqar queue with random name, sends a set of messages\nand then retrieves an iterator containing those.", 
                "parameters": [
                    {
                        "doc": "min number of messages to be posted\n", 
                        "name": "min_msg_count"
                    }, 
                    {
                        "doc": "max number of messages to be posted\n", 
                        "name": "max_msg_count"
                    }, 
                    {
                        "doc": "other optional parameters to create queues like\n\"metadata\"\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Serial message producer/consumer.", 
                "module": "rally_openstack.scenarios.zaqar.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "ZaqarBasic.producer_consumer"
            }, 
            "KeystoneBasic.add_and_remove_user_role@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Create a user role add to a user and disassociate.", 
                "module": "rally_openstack.scenarios.keystone.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "KeystoneBasic.add_and_remove_user_role"
            }, 
            "allow_ssh@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Sets up security groups for all users to access VM via SSH.", 
                "module": "rally_openstack.contexts.network.allow_ssh", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "type": "null"
                }, 
                "name": "allow_ssh"
            }, 
            "CeilometerEvents.create_user_and_get_event@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates user to store new event and\nfetches one event using GET /v2/events/<message_id>.", 
                "parameters": [], 
                "title": "Create user and gets event.", 
                "module": "rally_openstack.scenarios.ceilometer.events", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CeilometerEvents.create_user_and_get_event"
            }, 
            "SwiftObjects.list_and_download_objects_in_containers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List and download objects in all containers.", 
                "module": "rally_openstack.scenarios.swift.objects", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SwiftObjects.list_and_download_objects_in_containers"
            }, 
            "GnocchiArchivePolicyRule.list_archive_policy_rule@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List archive policy rules.", 
                "module": "rally_openstack.scenarios.gnocchi.archive_policy_rule", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicyRule.list_archive_policy_rule"
            }, 
            "NovaKeypair.create_and_delete_keypair@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates a keypair and then delete that keypair.", 
                "parameters": [
                    {
                        "doc": "Optional additional arguments for keypair creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a keypair with random name and delete keypair.", 
                "module": "rally_openstack.scenarios.nova.keypairs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaKeypair.create_and_delete_keypair"
            }, 
            "ManilaShares.list_share_servers@openstack": {
                "introduced_in": null, 
                "description": "Requires admin creds.", 
                "parameters": [
                    {
                        "doc": "container of following search opts:\n\"host\", \"status\", \"share_network\" and \"project_id\".\n", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Lists share servers.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.list_share_servers"
            }, 
            "NovaServers.boot_server_from_volume_and_live_migrate@openstack": {
                "introduced_in": null, 
                "description": "The scenario first creates a volume and a server booted from\nthe volume on a compute node available in the availability zone and\nthen migrates the VM to another compute node on the same availability\nzone.\n\nOptional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between VM booting and running live migration\n(of random duration from range [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB)\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "specifies volume type when there are\nmultiple backends\n", 
                        "name": "volume_type"
                    }, 
                    {
                        "doc": "Specifies the migration type\n", 
                        "name": "block_migration"
                    }, 
                    {
                        "doc": "Specifies whether to allow overcommit\non migrated instance or not\n", 
                        "name": "disk_over_commit"
                    }, 
                    {
                        "doc": "True if force_delete should be used\n", 
                        "name": "force_delete"
                    }, 
                    {
                        "doc": "Minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "Maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Boot a server from volume and then migrate it.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_from_volume_and_live_migrate"
            }, 
            "K8sPods.list_pods@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "List all pods.", 
                "module": "rally_openstack.scenarios.magnum.k8s_pods", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "K8sPods.list_pods"
            }, 
            "CinderVolumes.list_transfers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the \"cinder transfer-list\" command by\nlisting all the volume transfers.", 
                "parameters": [
                    {
                        "doc": "If True, detailed information about volume transfer\nshould be listed\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "Search options to filter out volume transfers.", 
                        "name": "search_opts"
                    }
                ], 
                "title": "List all transfers.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.list_transfers"
            }, 
            "Quotas.cinder_update@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Max value to be updated for quota.", 
                        "name": "max_quota"
                    }
                ], 
                "title": "Update quotas for Cinder.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.cinder_update"
            }, 
            "ManilaShares.create_and_list_share@openstack": {
                "introduced_in": null, 
                "description": "Optional 'min_sleep' and 'max_sleep' parameters allow the scenario\nto simulate a pause between share creation and list\n(of random duration from [min_sleep, max_sleep]).", 
                "parameters": [
                    {
                        "doc": "share protocol, valid values are NFS, CIFS,\nGlusterFS and HDFS\n", 
                        "name": "share_proto"
                    }, 
                    {
                        "doc": "share size in GB, should be greater than 0\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "minimum sleep time in seconds (non-negative)\n", 
                        "name": "min_sleep"
                    }, 
                    {
                        "doc": "maximum sleep time in seconds (non-negative)\n", 
                        "name": "max_sleep"
                    }, 
                    {
                        "doc": "defines whether to get detailed list of shares or not\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "optional args to create a share", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a share and list all shares.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_and_list_share"
            }, 
            "MonascaMetrics.list_metrics@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "optional arguments for list query:\nname, dimensions, start_time, etc\n", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Fetch user's metrics.", 
                "module": "rally_openstack.scenarios.monasca.metrics", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MonascaMetrics.list_metrics"
            }, 
            "sahara_input_data_sources@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Context class for setting up Input Data Sources for an EDP job.", 
                "module": "rally_openstack.contexts.sahara.sahara_input_data_sources", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "required": [
                        "input_type", 
                        "input_url"
                    ], 
                    "type": "object", 
                    "properties": {
                        "input_type": {
                            "enum": [
                                "swift", 
                                "hdfs"
                            ]
                        }, 
                        "swift_files": {
                            "items": {
                                "additionalProperties": false, 
                                "required": [
                                    "name", 
                                    "download_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }, 
                                    "download_url": {
                                        "type": "string"
                                    }
                                }
                            }, 
                            "type": "array"
                        }, 
                        "input_url": {
                            "type": "string"
                        }
                    }
                }, 
                "name": "sahara_input_data_sources"
            }, 
            "CinderQos.create_and_get_qos@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Consumer behavior\n", 
                        "name": "consumer"
                    }, 
                    {
                        "doc": "random write limitation\n", 
                        "name": "write_iops_sec"
                    }, 
                    {
                        "doc": "random read limitation", 
                        "name": "read_iops_sec"
                    }
                ], 
                "title": "Create a qos, then get details of the qos.", 
                "module": "rally_openstack.scenarios.cinder.qos_specs", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "CinderQos.create_and_get_qos"
            }, 
            "HeatStacks.create_stack_and_scale@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of autoscaling webhooks.", 
                "parameters": [
                    {
                        "doc": "path to template file that includes an\nOS::Heat::AutoScalingGroup resource\n", 
                        "name": "template_path"
                    }, 
                    {
                        "doc": "the stack output key that corresponds to\nthe scaling webhook\n", 
                        "name": "output_key"
                    }, 
                    {
                        "doc": "the number of instances the stack is expected to\nchange by.\n", 
                        "name": "delta"
                    }, 
                    {
                        "doc": "parameters to use in heat template\n", 
                        "name": "parameters"
                    }, 
                    {
                        "doc": "files used in template (dict of file name to\nfile path)\n", 
                        "name": "files"
                    }, 
                    {
                        "doc": "stack environment definition (dict)", 
                        "name": "environment"
                    }
                ], 
                "title": "Create an autoscaling stack and invoke a scaling policy.", 
                "module": "rally_openstack.scenarios.heat.stacks", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "HeatStacks.create_stack_and_scale"
            }, 
            "NeutronLoadbalancerV1.create_and_delete_vips@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"neutron lb-vip-create\" and \"neutron lb-vip-delete\"\ncommand performance. The scenario creates a vip for pool and\nthen deletes those vips.", 
                "parameters": [
                    {
                        "doc": "dict, POST /lb/pools request options\n", 
                        "name": "pool_create_args"
                    }, 
                    {
                        "doc": "dict, POST /lb/vips request options", 
                        "name": "vip_create_args"
                    }
                ], 
                "title": "Create a vip(v1) and then delete vips(v1).", 
                "module": "rally_openstack.scenarios.neutron.loadbalancer_v1", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronLoadbalancerV1.create_and_delete_vips"
            }, 
            "DesignateBasic.create_and_delete_zone@openstack": {
                "introduced_in": null, 
                "description": "Measure the performance of creating and deleting zones\nwith different level of load.", 
                "parameters": [], 
                "title": "Create and then delete a zone.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.create_and_delete_zone"
            }, 
            "ManilaShares.create_share_network_and_list@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "ID of Neutron network\n", 
                        "name": "neutron_net_id"
                    }, 
                    {
                        "doc": "ID of Neutron subnet\n", 
                        "name": "neutron_subnet_id"
                    }, 
                    {
                        "doc": "ID of Nova network\n", 
                        "name": "nova_net_id"
                    }, 
                    {
                        "doc": "share network description\n", 
                        "name": "description"
                    }, 
                    {
                        "doc": "defines either to return detailed list of\nobjects or not.\n", 
                        "name": "detailed"
                    }, 
                    {
                        "doc": "container of search opts such as\n\"name\", \"nova_net_id\", \"neutron_net_id\", etc.\n", 
                        "name": "search_opts"
                    }
                ], 
                "title": "Creates share network and then lists it.", 
                "module": "rally_openstack.scenarios.manila.shares", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "ManilaShares.create_share_network_and_list"
            }, 
            "servers@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Creates specified amount of Nova Servers per each tenant.", 
                "module": "rally_openstack.contexts.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "required": [
                        "image", 
                        "flavor"
                    ], 
                    "type": "object", 
                    "properties": {
                        "servers_per_tenant": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "Number of servers to boot in each Tenant."
                        }, 
                        "image": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "description": "Name of image to boot server(s) from.", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "auto_assign_nic": {
                            "type": "boolean", 
                            "description": "True if NICs should be assigned."
                        }, 
                        "flavor": {
                            "additionalProperties": false, 
                            "type": "object", 
                            "description": "Name of flavor to boot server(s) with.", 
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            }
                        }, 
                        "nics": {
                            "minItems": 1, 
                            "items": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false, 
                                        "type": "object", 
                                        "properties": {
                                            "net-id": {
                                                "type": "string"
                                            }
                                        }, 
                                        "description": "Network ID in a format like OpenStack API expects to see."
                                    }, 
                                    {
                                        "type": "string", 
                                        "description": "Network ID."
                                    }
                                ]
                            }, 
                            "type": "array", 
                            "description": "List of networks to attach to server."
                        }
                    }
                }, 
                "name": "servers"
            }, 
            "SaharaNodeGroupTemplates.create_and_list_node_group_templates@openstack": {
                "introduced_in": null, 
                "description": "This scenario creates two Node Group Templates with different set of\nnode processes. The master Node Group Template contains Hadoop's\nmanagement processes. The worker Node Group Template contains\nHadoop's worker processes.\n\nBy default the templates are created for the vanilla Hadoop\nprovisioning plugin using the version 1.2.1\n\nAfter the templates are created the list operation is called.", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Create and list Sahara Node Group Templates.", 
                "module": "rally_openstack.scenarios.sahara.node_group_templates", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "SaharaNodeGroupTemplates.create_and_list_node_group_templates"
            }, 
            "designate@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Wrapper for DesignateClient which returns authenticated native client.", 
                "module": "rally_openstack.osclients", 
                "platform": "openstack", 
                "returns": "", 
                "base": "OS Client", 
                "schema": null, 
                "name": "designate"
            }, 
            "CeilometerSamples.list_matched_samples@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "flag for query by user_id\n", 
                        "name": "filter_by_user_id"
                    }, 
                    {
                        "doc": "flag for query by project_id\n", 
                        "name": "filter_by_project_id"
                    }, 
                    {
                        "doc": "flag for query by resource_id\n", 
                        "name": "filter_by_resource_id"
                    }, 
                    {
                        "doc": "dict with metadata fields and values for query\n", 
                        "name": "metadata_query"
                    }, 
                    {
                        "doc": "count of samples in response", 
                        "name": "limit"
                    }
                ], 
                "title": "Get list of samples that matched fields from context and args.", 
                "module": "rally_openstack.scenarios.ceilometer.samples", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerSamples.list_matched_samples"
            }, 
            "MagnumClusters.create_and_list_clusters@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "the cluster node count.\n", 
                        "name": "node_count"
                    }, 
                    {
                        "doc": "optional, if user want to use an existing\ncluster_template\n", 
                        "name": "cluster_template_uuid"
                    }, 
                    {
                        "doc": "optional additional arguments for cluster creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "create cluster and then list all clusters.", 
                "module": "rally_openstack.scenarios.magnum.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MagnumClusters.create_and_list_clusters"
            }, 
            "GnocchiResource.create_resource@openstack": {
                "introduced_in": "1.1.0", 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Type of the resource", 
                        "name": "resource_type"
                    }
                ], 
                "title": "Create resource.", 
                "module": "rally_openstack.scenarios.gnocchi.resource", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "GnocchiResource.create_resource"
            }, 
            "MuranoPackages.import_and_list_packages@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"murano import-package\" and \"murano package-list\" commands\nperformance.\nIt imports Murano package from \"package\" (if it is not a zip archive\nthen zip archive will be prepared) and gets list of imported packages.", 
                "parameters": [
                    {
                        "doc": "path to zip archive that represents Murano\napplication package or absolute path to folder with\npackage components\n", 
                        "name": "package"
                    }, 
                    {
                        "doc": "specifies whether the disabled packages will\nbe included in a the result or not.\nDefault value is False.\n", 
                        "name": "include_disabled"
                    }
                ], 
                "title": "Import Murano package and get list of packages.", 
                "module": "rally_openstack.scenarios.murano.packages", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "MuranoPackages.import_and_list_packages"
            }, 
            "existing@openstack": {
                "introduced_in": null, 
                "description": "It may be used to test any existing OpenStack API compatible cloud.", 
                "parameters": [], 
                "title": "Default plugin for OpenStack platform", 
                "module": "rally_openstack.platforms.existing", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Platform", 
                "schema": {
                    "additionalProperties": false, 
                    "definitions": {
                        "user": {
                            "oneOf": [
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "username", 
                                        "password", 
                                        "tenant_name"
                                    ], 
                                    "description": "Keystone V2.0", 
                                    "properties": {
                                        "username": {
                                            "type": "string"
                                        }, 
                                        "tenant_name": {
                                            "type": "string"
                                        }, 
                                        "password": {
                                            "type": "string"
                                        }
                                    }
                                }, 
                                {
                                    "additionalProperties": false, 
                                    "required": [
                                        "username", 
                                        "password", 
                                        "project_name"
                                    ], 
                                    "description": "Keystone V3.0", 
                                    "properties": {
                                        "username": {
                                            "type": "string"
                                        }, 
                                        "project_name": {
                                            "type": "string"
                                        }, 
                                        "user_domain_name": {
                                            "type": "string"
                                        }, 
                                        "domain_name": {
                                            "type": "string"
                                        }, 
                                        "password": {
                                            "type": "string"
                                        }, 
                                        "project_domain_name": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ], 
                            "type": "object"
                        }
                    }, 
                    "type": "object", 
                    "properties": {
                        "endpoint": {
                            "type": [
                                "string", 
                                "null"
                            ]
                        }, 
                        "region_name": {
                            "type": "string"
                        }, 
                        "https_insecure": {
                            "type": "boolean"
                        }, 
                        "profiler_hmac_key": {
                            "type": [
                                "string", 
                                "null"
                            ]
                        }, 
                        "admin": {
                            "$ref": "#/definitions/user"
                        }, 
                        "https_cacert": {
                            "type": "string"
                        }, 
                        "endpoint_type": {
                            "enum": [
                                "public", 
                                "internal", 
                                "admin", 
                                null
                            ]
                        }, 
                        "auth_url": {
                            "type": "string"
                        }, 
                        "users": {
                            "minItems": 1, 
                            "items": {
                                "$ref": "#/definitions/user"
                            }, 
                            "type": "array"
                        }, 
                        "profiler_conn_str": {
                            "type": [
                                "string", 
                                "null"
                            ]
                        }
                    }, 
                    "anyOf": [
                        {
                            "required": [
                                "admin", 
                                "auth_url"
                            ], 
                            "description": "The case when the admin is specified and the users can be created via 'users@openstack' context or 'existing_users' will be used."
                        }, 
                        {
                            "required": [
                                "users", 
                                "auth_url"
                            ], 
                            "description": "The case when the only existing users are specified."
                        }
                    ]
                }, 
                "name": "existing"
            }, 
            "Quotas.cinder_get@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"cinder quota-show\" command performance", 
                "parameters": [], 
                "title": "Get quotas for Cinder.", 
                "module": "rally_openstack.scenarios.quotas.quotas", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "Quotas.cinder_get"
            }, 
            "SaharaClusters.create_scale_delete_cluster@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a Hadoop cluster, waits until it becomes\n'Active'. Then a series of scale operations is applied. The scaling\nhappens according to numbers listed in", 
                "parameters": [
                    {
                        "doc": "Nova flavor that will be for nodes in the\ncreated node groups. Deprecated.\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the master\ninstance of the cluster\n", 
                        "name": "master_flavor"
                    }, 
                    {
                        "doc": "Nova flavor that will be used for the workers of\nthe cluster\n", 
                        "name": "worker_flavor"
                    }, 
                    {
                        "doc": "number of worker instances in a cluster\n", 
                        "name": "workers_count"
                    }, 
                    {
                        "doc": "name of a provisioning plugin\n", 
                        "name": "plugin_name"
                    }, 
                    {
                        "doc": "version of Hadoop distribution supported by\nthe specified plugin.\n", 
                        "name": "hadoop_version"
                    }, 
                    {
                        "doc": "list of integers which will be used to add or\nremove worker nodes from the cluster\n", 
                        "name": "deltas"
                    }, 
                    {
                        "doc": "floating ip pool name from which Floating\nIPs will be allocated. Sahara will determine\nautomatically how to treat this depending on\nits own configurations. Defaults to None\nbecause in some cases Sahara may work w/o\nFloating IPs.\n", 
                        "name": "floating_ip_pool"
                    }, 
                    {
                        "doc": "id of a Neutron network that will be used\nfor fixed IPs. This parameter is ignored when\nNova Network is set up.\n", 
                        "name": "neutron_net_id"
                    }, 
                    {
                        "doc": "number of Cinder volumes that will be\nattached to every cluster node\n", 
                        "name": "volumes_per_node"
                    }, 
                    {
                        "doc": "size of each Cinder volume in GB\n", 
                        "name": "volumes_size"
                    }, 
                    {
                        "doc": "boolean value. If set to True Sahara will\ncreate a Security Group for each Node Group\nin the Cluster automatically.\n", 
                        "name": "auto_security_group"
                    }, 
                    {
                        "doc": "list of security groups that will be used\nwhile creating VMs. If auto_security_group\nis set to True this list can be left empty.\n", 
                        "name": "security_groups"
                    }, 
                    {
                        "doc": "configs dict that will be passed to each Node\nGroup\n", 
                        "name": "node_configs"
                    }, 
                    {
                        "doc": "configs dict that will be passed to the\nCluster\n", 
                        "name": "cluster_configs"
                    }, 
                    {
                        "doc": "If set to true the vms will be scheduled\none per compute node.\n", 
                        "name": "enable_anti_affinity"
                    }, 
                    {
                        "doc": "Use Master Node of a Cluster as a Proxy node and\ndo not assign floating ips to workers.\n", 
                        "name": "enable_proxy"
                    }, 
                    {
                        "doc": "If True, instances of the node group will be\nautomatically configured during cluster\ncreation. If False, the configuration values\nshould be specify manually\n", 
                        "name": "use_autoconfig"
                    }
                ], 
                "title": "Launch, scale and delete a Sahara Cluster.", 
                "module": "rally_openstack.scenarios.sahara.clusters", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "schema": null, 
                "name": "SaharaClusters.create_scale_delete_cluster"
            }, 
            "NovaServers.boot_and_migrate_server@openstack": {
                "introduced_in": null, 
                "description": "This scenario launches a VM on a compute node available in\nthe availability zone, and then migrates the VM\nto another compute node on the same availability zone.", 
                "parameters": [
                    {
                        "doc": "image to be used to boot an instance\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "flavor to be used to boot an instance\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "Optional additional arguments for server creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Migrate a server.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_and_migrate_server"
            }, 
            "CinderVolumes.create_volume_backup@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "volume size in GB\n", 
                        "name": "size"
                    }, 
                    {
                        "doc": "if True, a volume and a volume backup will\nbe deleted after creation.\n", 
                        "name": "do_delete"
                    }, 
                    {
                        "doc": "optional args to create a volume\n", 
                        "name": "create_volume_kwargs"
                    }, 
                    {
                        "doc": "optional args to create a volume backup", 
                        "name": "create_backup_kwargs"
                    }
                ], 
                "title": "Create a volume backup.", 
                "module": "rally_openstack.scenarios.cinder.volumes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CinderVolumes.create_volume_backup"
            }, 
            "NeutronNetworks.create_and_show_subnets@openstack": {
                "introduced_in": null, 
                "description": "The scenario creates a network, a given number of subnets\nand show the subnet details. This scenario measures the\n\"neutron subnet-show\" command performance.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/networks request\noptions.\n", 
                        "name": "network_create_args"
                    }, 
                    {
                        "doc": "dict, POST /v2.0/subnets request options\n", 
                        "name": "subnet_create_args"
                    }, 
                    {
                        "doc": "str, start value for subnets CIDR\n", 
                        "name": "subnet_cidr_start"
                    }, 
                    {
                        "doc": "int, number of subnets for one network", 
                        "name": "subnets_per_network"
                    }
                ], 
                "title": "Create and show a subnet details.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.create_and_show_subnets"
            }, 
            "NeutronNetworks.list_agents@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the \"neutron agent-list\" command by\nlisting all the neutron agents.", 
                "parameters": [
                    {
                        "doc": "dict, POST /v2.0/agents request options", 
                        "name": "agent_args"
                    }
                ], 
                "title": "List all neutron agents.", 
                "module": "rally_openstack.scenarios.neutron.network", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NeutronNetworks.list_agents"
            }, 
            "NovaServers.boot_server_attach_volume_and_list_attachments@openstack": {
                "introduced_in": null, 
                "description": "Measure the \"nova volume-attachments\" command performance.", 
                "parameters": [
                    {
                        "doc": "Glance image name to use for the VM\n", 
                        "name": "image"
                    }, 
                    {
                        "doc": "VM flavor name\n", 
                        "name": "flavor"
                    }, 
                    {
                        "doc": "volume size (in GB), default 1G\n", 
                        "name": "volume_size"
                    }, 
                    {
                        "doc": "the num of attached volume\n", 
                        "name": "volume_num"
                    }, 
                    {
                        "doc": "optional arguments for VM creation\n", 
                        "name": "boot_server_kwargs"
                    }, 
                    {
                        "doc": "optional arguments for volume creation", 
                        "name": "create_volume_kwargs"
                    }
                ], 
                "title": "Create a VM, attach N volume to it and list server's attachemnt.", 
                "module": "rally_openstack.scenarios.nova.servers", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "NovaServers.boot_server_attach_volume_and_list_attachments"
            }, 
            "images@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [], 
                "title": "Uploads specified Glance images to every tenant.", 
                "module": "rally_openstack.contexts.glance.images", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Context", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": {
                    "additionalProperties": false, 
                    "$schema": "http://json-schema.org/draft-04/schema", 
                    "oneOf": [
                        {
                            "required": [
                                "image_url", 
                                "disk_format", 
                                "container_format"
                            ], 
                            "description": "It is been used since Rally 0.10.0"
                        }, 
                        {
                            "required": [
                                "image_url", 
                                "image_type", 
                                "container_format"
                            ], 
                            "description": "One of backward compatible way"
                        }, 
                        {
                            "required": [
                                "image_url", 
                                "disk_format", 
                                "image_container"
                            ], 
                            "description": "One of backward compatible way"
                        }, 
                        {
                            "required": [
                                "image_url", 
                                "image_type", 
                                "image_container"
                            ], 
                            "description": "One of backward compatible way"
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "image_container": {
                            "type": "string", 
                            "description": "This param is deprecated since Rally-0.10.0, use `container_format` instead."
                        }, 
                        "container_format": {
                            "enum": [
                                "aki", 
                                "ami", 
                                "ari", 
                                "bare", 
                                "docker", 
                                "ova", 
                                "ovf"
                            ], 
                            "description": "Format of the image container."
                        }, 
                        "min_ram": {
                            "minimum": 0, 
                            "type": "integer", 
                            "description": "Amount of RAM in MB"
                        }, 
                        "disk_format": {
                            "enum": [
                                "qcow2", 
                                "raw", 
                                "vhd", 
                                "vmdk", 
                                "vdi", 
                                "iso", 
                                "aki", 
                                "ari", 
                                "ami"
                            ], 
                            "description": "The format of the disk."
                        }, 
                        "image_name": {
                            "type": "string", 
                            "description": "The name of image to create. NOTE: it will be ignored in case when `images_per_tenant` is bigger then 1."
                        }, 
                        "visibility": {
                            "enum": [
                                "public", 
                                "private", 
                                "shared", 
                                "community"
                            ], 
                            "description": "Visibility for this image ('shared' and 'community' are available only in case of Glance V2)."
                        }, 
                        "images_per_tenant": {
                            "minimum": 1, 
                            "type": "integer", 
                            "description": "The number of images to create per one single tenant."
                        }, 
                        "image_url": {
                            "type": "string", 
                            "description": "Location of the source to create image from."
                        }, 
                        "image_type": {
                            "enum": [
                                "qcow2", 
                                "raw", 
                                "vhd", 
                                "vmdk", 
                                "vdi", 
                                "iso", 
                                "aki", 
                                "ari", 
                                "ami"
                            ], 
                            "description": "This param is deprecated since Rally-0.10.0, use `disk_format` instead."
                        }, 
                        "min_disk": {
                            "minimum": 0, 
                            "type": "integer", 
                            "description": "Amount of disk space in GB"
                        }, 
                        "image_args": {
                            "additionalProperties": true, 
                            "type": "object", 
                            "description": "This param is deprecated since Rally-0.10.0, specify exact arguments in a root section of context instead."
                        }
                    }
                }, 
                "name": "images"
            }, 
            "DesignateBasic.list_servers@openstack": {
                "introduced_in": null, 
                "description": "This simple scenario tests the designate server-list command by listing\nall the servers.", 
                "parameters": [], 
                "title": "List Designate servers.", 
                "module": "rally_openstack.scenarios.designate.basic", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "DesignateBasic.list_servers"
            }, 
            "GnocchiArchivePolicyRule.create_delete_archive_policy_rule@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "Pattern for matching metrics\n", 
                        "name": "metric_pattern"
                    }, 
                    {
                        "doc": "Archive policy name", 
                        "name": "archive_policy_name"
                    }
                ], 
                "title": "Create archive policy rule and then delete it.", 
                "module": "rally_openstack.scenarios.gnocchi.archive_policy_rule", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "GnocchiArchivePolicyRule.create_delete_archive_policy_rule"
            }, 
            "CeilometerQueries.create_and_query_samples@openstack": {
                "introduced_in": null, 
                "description": "This scenario tests POST /v2/query/samples\nA sample is first created and then fetched using the input query.", 
                "parameters": [
                    {
                        "doc": "specifies name of the counter\n", 
                        "name": "counter_name"
                    }, 
                    {
                        "doc": "specifies type of the counter\n", 
                        "name": "counter_type"
                    }, 
                    {
                        "doc": "specifies unit of the counter\n", 
                        "name": "counter_unit"
                    }, 
                    {
                        "doc": "specifies volume of the counter\n", 
                        "name": "counter_volume"
                    }, 
                    {
                        "doc": "specifies resource id for the sample created\n", 
                        "name": "resource_id"
                    }, 
                    {
                        "doc": "optional filter query dictionary\n", 
                        "name": "filter"
                    }, 
                    {
                        "doc": "optional param for specifying ordering of results\n", 
                        "name": "orderby"
                    }, 
                    {
                        "doc": "optional param for maximum number of results returned\n", 
                        "name": "limit"
                    }, 
                    {
                        "doc": "parameters for sample creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create a sample and then query it with specific parameters.", 
                "module": "rally_openstack.scenarios.ceilometer.queries", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "platform": "openstack", 
                        "users": true
                    }
                ], 
                "schema": null, 
                "name": "CeilometerQueries.create_and_query_samples"
            }, 
            "volume_type_exists@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "defines variable to be used as the flag to\ndetermine if volume types should be checked for\nexistence.\n", 
                        "name": "param_name"
                    }, 
                    {
                        "doc": "defines volume_type param is required", 
                        "name": "nullable"
                    }
                ], 
                "title": "Returns validator for volume types.", 
                "module": "rally_openstack.validators", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Validator", 
                "schema": null, 
                "name": "volume_type_exists"
            }, 
            "IronicNodes.create_and_delete_node@openstack": {
                "introduced_in": null, 
                "description": "", 
                "parameters": [
                    {
                        "doc": "The name of the driver used to manage this Node.\n", 
                        "name": "driver"
                    }, 
                    {
                        "doc": "Key/value pair describing the physical\ncharacteristics of the node.\n", 
                        "name": "properties"
                    }, 
                    {
                        "doc": "Optional additional arguments for node creation", 
                        "name": "kwargs"
                    }
                ], 
                "title": "Create and delete node.", 
                "module": "rally_openstack.scenarios.ironic.nodes", 
                "platform": "openstack", 
                "returns": "", 
                "base": "Scenario", 
                "required_platforms": [
                    {
                        "admin": true, 
                        "platform": "openstack"
                    }
                ], 
                "schema": null, 
                "name": "IronicNodes.create_and_delete_node"
            }
        }, 
        "options": {
            "DEFAULT": [
                {
                    "default": 180.0, 
                    "deprecated_opts": [], 
                    "type": "floating point value", 
                    "name": "openstack_client_http_timeout", 
                    "help": "HTTP timeout for any of OpenStack service in seconds"
                }
            ], 
            "openstack": [
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_create_prepoll_delay", 
                    "help": "Time to sleep after creating a resource before polling for it status"
                }, 
                {
                    "default": 600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_create_timeout", 
                    "help": "Time to wait for cinder volume to be created."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_create_poll_interval", 
                    "help": "Interval between checks when waiting for volume creation."
                }, 
                {
                    "default": 600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_delete_timeout", 
                    "help": "Time to wait for cinder volume to be deleted."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_volume_delete_poll_interval", 
                    "help": "Interval between checks when waiting for volume deletion."
                }, 
                {
                    "default": 600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_backup_restore_timeout", 
                    "help": "Time to wait for cinder backup to be restored."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "cinder_backup_restore_poll_interval", 
                    "help": "Interval between checks when waiting for backup restoring."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ec2_server_boot_prepoll_delay", 
                    "help": "Time to sleep after boot before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ec2_server_boot_timeout", 
                    "help": "Server boot timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ec2_server_boot_poll_interval", 
                    "help": "Server boot poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_create_prepoll_delay", 
                    "help": "Time(in sec) to sleep after creating a resource before polling for it status."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_create_timeout", 
                    "help": "Time(in sec) to wait for heat stack to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack creation."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_delete_timeout", 
                    "help": "Time(in sec) to wait for heat stack to be deleted."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_delete_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack deletion."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_check_timeout", 
                    "help": "Time(in sec) to wait for stack to be checked."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_check_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack checking."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_update_prepoll_delay", 
                    "help": "Time(in sec) to sleep after updating a resource before polling for it status."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_update_timeout", 
                    "help": "Time(in sec) to wait for stack to be updated."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_update_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack update."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_suspend_timeout", 
                    "help": "Time(in sec) to wait for stack to be suspended."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_suspend_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack suspend."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_resume_timeout", 
                    "help": "Time(in sec) to wait for stack to be resumed."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_resume_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack resume."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_snapshot_timeout", 
                    "help": "Time(in sec) to wait for stack snapshot to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_snapshot_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack snapshot to be created."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_restore_timeout", 
                    "help": "Time(in sec) to wait for stack to be restored from snapshot."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_restore_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for stack to be restored."
                }, 
                {
                    "default": 3600.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_scale_timeout", 
                    "help": "Time (in sec) to wait for stack to scale up or down."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "heat_stack_scale_poll_interval", 
                    "help": "Time interval (in sec) between checks when waiting for a stack to scale up or down."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_create_poll_interval", 
                    "help": "Interval(in sec) between checks when waiting for node creation."
                }, 
                {
                    "default": 300, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_create_timeout", 
                    "help": "Ironic node create timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_poll_interval", 
                    "help": "Ironic node poll interval"
                }, 
                {
                    "default": 300, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "ironic_node_delete_timeout", 
                    "help": "Ironic node create timeout"
                }, 
                {
                    "default": 5.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "magnum_cluster_create_prepoll_delay", 
                    "help": "Time(in sec) to sleep after creating a resource before polling for the status."
                }, 
                {
                    "default": 2400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "magnum_cluster_create_timeout", 
                    "help": "Time(in sec) to wait for magnum cluster to be created."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "magnum_cluster_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for cluster creation."
                }, 
                {
                    "default": 1200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_pod_create_timeout", 
                    "help": "Time(in sec) to wait for k8s pod to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_pod_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for k8s pod creation."
                }, 
                {
                    "default": 1200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_rc_create_timeout", 
                    "help": "Time(in sec) to wait for k8s rc to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "k8s_rc_create_poll_interval", 
                    "help": "Time interval(in sec) between checks when waiting for k8s rc creation."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_create_prepoll_delay", 
                    "help": "Delay between creating Manila share and polling for its status."
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_create_timeout", 
                    "help": "Timeout for Manila share creation."
                }, 
                {
                    "default": 3.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_create_poll_interval", 
                    "help": "Interval between checks when waiting for Manila share creation."
                }, 
                {
                    "default": 180.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_delete_timeout", 
                    "help": "Timeout for Manila share deletion."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_share_delete_poll_interval", 
                    "help": "Interval between checks when waiting for Manila share deletion."
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_create_timeout", 
                    "help": "Timeout for Manila access creation."
                }, 
                {
                    "default": 3.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_create_poll_interval", 
                    "help": "Interval between checks when waiting for Manila access creation."
                }, 
                {
                    "default": 180.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_delete_timeout", 
                    "help": "Timeout for Manila access deletion."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "manila_access_delete_poll_interval", 
                    "help": "Interval between checks when waiting for Manila access deletion."
                }, 
                {
                    "default": 200, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "mistral_execution_timeout", 
                    "help": "mistral execution timeout"
                }, 
                {
                    "default": 15.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "monasca_metric_create_prepoll_delay", 
                    "help": "Delay between creating Monasca metrics and polling for its elements."
                }, 
                {
                    "default": 1200, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": "deploy_environment_timeout"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "murano_deploy_environment_timeout", 
                    "help": "A timeout in seconds for an environment deploy"
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": "deploy_environment_check_interval"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "murano_deploy_environment_check_interval", 
                    "help": "Deploy environment check interval in seconds"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_start_prepoll_delay", 
                    "help": "Time to sleep after start before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_start_timeout", 
                    "help": "Server start timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_start_poll_interval", 
                    "help": "Server start poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [], 
                    "type": "floating point value", 
                    "name": "nova_server_stop_prepoll_delay", 
                    "help": "Time to sleep after stop before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_stop_timeout", 
                    "help": "Server stop timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_stop_poll_interval", 
                    "help": "Server stop poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_boot_prepoll_delay", 
                    "help": "Time to sleep after boot before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_boot_timeout", 
                    "help": "Server boot timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_boot_poll_interval", 
                    "help": "Server boot poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_delete_prepoll_delay", 
                    "help": "Time to sleep after delete before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_delete_timeout", 
                    "help": "Server delete timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_delete_poll_interval", 
                    "help": "Server delete poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_reboot_prepoll_delay", 
                    "help": "Time to sleep after reboot before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_reboot_timeout", 
                    "help": "Server reboot timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_reboot_poll_interval", 
                    "help": "Server reboot poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rebuild_prepoll_delay", 
                    "help": "Time to sleep after rebuild before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rebuild_timeout", 
                    "help": "Server rebuild timeout"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rebuild_poll_interval", 
                    "help": "Server rebuild poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rescue_prepoll_delay", 
                    "help": "Time to sleep after rescue before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rescue_timeout", 
                    "help": "Server rescue timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_rescue_poll_interval", 
                    "help": "Server rescue poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unrescue_prepoll_delay", 
                    "help": "Time to sleep after unrescue before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unrescue_timeout", 
                    "help": "Server unrescue timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unrescue_poll_interval", 
                    "help": "Server unrescue poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_suspend_prepoll_delay", 
                    "help": "Time to sleep after suspend before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_suspend_timeout", 
                    "help": "Server suspend timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_suspend_poll_interval", 
                    "help": "Server suspend poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resume_prepoll_delay", 
                    "help": "Time to sleep after resume before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resume_timeout", 
                    "help": "Server resume timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resume_poll_interval", 
                    "help": "Server resume poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_pause_prepoll_delay", 
                    "help": "Time to sleep after pause before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_pause_timeout", 
                    "help": "Server pause timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_pause_poll_interval", 
                    "help": "Server pause poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unpause_prepoll_delay", 
                    "help": "Time to sleep after unpause before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unpause_timeout", 
                    "help": "Server unpause timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unpause_poll_interval", 
                    "help": "Server unpause poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_shelve_prepoll_delay", 
                    "help": "Time to sleep after shelve before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_shelve_timeout", 
                    "help": "Server shelve timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_shelve_poll_interval", 
                    "help": "Server shelve poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unshelve_prepoll_delay", 
                    "help": "Time to sleep after unshelve before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unshelve_timeout", 
                    "help": "Server unshelve timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_unshelve_poll_interval", 
                    "help": "Server unshelve poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_create_prepoll_delay", 
                    "help": "Time to sleep after image_create before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_create_timeout", 
                    "help": "Server image_create timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_create_poll_interval", 
                    "help": "Server image_create poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_delete_prepoll_delay", 
                    "help": "Time to sleep after image_delete before polling for status"
                }, 
                {
                    "default": 300.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_delete_timeout", 
                    "help": "Server image_delete timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_image_delete_poll_interval", 
                    "help": "Server image_delete poll interval"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_prepoll_delay", 
                    "help": "Time to sleep after resize before polling for status"
                }, 
                {
                    "default": 400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_timeout", 
                    "help": "Server resize timeout"
                }, 
                {
                    "default": 5.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_poll_interval", 
                    "help": "Server resize poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_confirm_prepoll_delay", 
                    "help": "Time to sleep after resize_confirm before polling for status"
                }, 
                {
                    "default": 200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_confirm_timeout", 
                    "help": "Server resize_confirm timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_confirm_poll_interval", 
                    "help": "Server resize_confirm poll interval"
                }, 
                {
                    "default": 0.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_revert_prepoll_delay", 
                    "help": "Time to sleep after resize_revert before polling for status"
                }, 
                {
                    "default": 200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_revert_timeout", 
                    "help": "Server resize_revert timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_resize_revert_poll_interval", 
                    "help": "Server resize_revert poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_live_migrate_prepoll_delay", 
                    "help": "Time to sleep after live_migrate before polling for status"
                }, 
                {
                    "default": 400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_live_migrate_timeout", 
                    "help": "Server live_migrate timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_live_migrate_poll_interval", 
                    "help": "Server live_migrate poll interval"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_migrate_prepoll_delay", 
                    "help": "Time to sleep after migrate before polling for status"
                }, 
                {
                    "default": 400.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_migrate_timeout", 
                    "help": "Server migrate timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_server_migrate_poll_interval", 
                    "help": "Server migrate poll interval"
                }, 
                {
                    "default": 200.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_detach_volume_timeout", 
                    "help": "Nova volume detach timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "nova_detach_volume_poll_interval", 
                    "help": "Nova volume detach poll interval"
                }, 
                {
                    "default": true, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "boolean value", 
                    "name": "enable_profiler", 
                    "help": "Enable or disable osprofiler to trace the scenarios"
                }, 
                {
                    "default": 1800, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_cluster_create_timeout", 
                    "help": "A timeout in seconds for a cluster create operation"
                }, 
                {
                    "default": 900, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_cluster_delete_timeout", 
                    "help": "A timeout in seconds for a cluster delete operation"
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_cluster_check_interval", 
                    "help": "Cluster status polling interval in seconds"
                }, 
                {
                    "default": 600, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_job_execution_timeout", 
                    "help": "A timeout in seconds for a Job Execution to complete"
                }, 
                {
                    "default": 5, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_job_check_interval", 
                    "help": "Job Execution status polling interval in seconds"
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "sahara_workers_per_proxy", 
                    "help": "Amount of workers one proxy should serve to."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "vm_ping_poll_interval", 
                    "help": "Interval between checks when waiting for a VM to become pingable"
                }, 
                {
                    "default": 120.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "vm_ping_timeout", 
                    "help": "Time to wait for a VM to become pingable"
                }, 
                {
                    "default": 120.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_delete_timeout", 
                    "help": "Time to wait for glance image to be deleted."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_delete_poll_interval", 
                    "help": "Interval between checks when waiting for image deletion."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_prepoll_delay", 
                    "help": "Time to sleep after creating a resource before polling for it status"
                }, 
                {
                    "default": 120.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_timeout", 
                    "help": "Time to wait for glance image to be created."
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_poll_interval", 
                    "help": "Interval between checks when waiting for image creation."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_prepoll_delay", 
                    "help": "Time to sleep after creating a resource before polling for it status"
                }, 
                {
                    "default": 1.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "glance_image_create_poll_interval", 
                    "help": "Interval between checks when waiting for image creation."
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "watcher_audit_launch_poll_interval", 
                    "help": "Watcher audit launch interval"
                }, 
                {
                    "default": 300, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "watcher_audit_launch_timeout", 
                    "help": "Watcher audit launch timeout"
                }, 
                {
                    "default": "http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_url", 
                    "help": "image URL"
                }, 
                {
                    "default": "qcow2", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_disk_format", 
                    "help": "Image disk format to use when creating the image"
                }, 
                {
                    "default": "bare", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_container_format", 
                    "help": "Image container format to use when creating the image"
                }, 
                {
                    "default": "^.*(cirros|testvm).*$", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "img_name_regex", 
                    "help": "Regular expression for name of a public image to discover it in the cloud and use it for the tests. Note that when Rally is searching for the image, case insensitive matching is performed. Specify nothing ('img_name_regex =') if you want to disable discovering. In this case Rally will create needed resources by itself if the values for the corresponding config options are not specified in the Tempest config file"
                }, 
                {
                    "default": "Member", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "swift_operator_role", 
                    "help": "Role required for users to be able to create Swift containers"
                }, 
                {
                    "default": "ResellerAdmin", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "swift_reseller_admin_role", 
                    "help": "User role that has reseller admin"
                }, 
                {
                    "default": "heat_stack_owner", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "heat_stack_owner_role", 
                    "help": "Role required for users to be able to manage Heat stacks"
                }, 
                {
                    "default": "heat_stack_user", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "heat_stack_user_role", 
                    "help": "Role for Heat template-defined users"
                }, 
                {
                    "default": "64", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "flavor_ref_ram", 
                    "help": "Primary flavor RAM size used by most of the test cases"
                }, 
                {
                    "default": "128", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "flavor_ref_alt_ram", 
                    "help": "Alternate reference flavor RAM size used by test thatneed two flavors, like those that resize an instance"
                }, 
                {
                    "default": "64", 
                    "deprecated_opts": [
                        {
                            "group": "tempest", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "heat_instance_type_ram", 
                    "help": "RAM size flavor used for orchestration test cases"
                }, 
                {
                    "default": 30, 
                    "deprecated_opts": [
                        {
                            "group": "roles_context", 
                            "name": "resource_management_workers"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "roles_context_resource_management_workers", 
                    "help": "How many concurrent threads to use for serving roles context"
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": "resource_management_workers"
                        }
                    ], 
                    "type": "integer value", 
                    "name": "users_context_resource_management_workers", 
                    "help": "The number of concurrent threads to use for serving users context."
                }, 
                {
                    "default": "default", 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "project_domain", 
                    "help": "ID of domain in which projects will be created."
                }, 
                {
                    "default": "default", 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "user_domain", 
                    "help": "ID of domain in which users will be created."
                }, 
                {
                    "default": "member", 
                    "deprecated_opts": [
                        {
                            "group": "users_context", 
                            "name": null
                        }
                    ], 
                    "type": "string value", 
                    "name": "keystone_default_role", 
                    "help": "The default role name of the keystone to assign to users."
                }, 
                {
                    "default": 600, 
                    "deprecated_opts": [
                        {
                            "group": "cleanup", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "resource_deletion_timeout", 
                    "help": "A timeout in seconds for deleting resources"
                }, 
                {
                    "default": 20, 
                    "deprecated_opts": [
                        {
                            "group": "cleanup", 
                            "name": null
                        }
                    ], 
                    "type": "integer value", 
                    "name": "cleanup_threads", 
                    "help": "Number of cleanup threads to run"
                }, 
                {
                    "default": 3600, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "senlin_action_timeout", 
                    "help": "Time in seconds to wait for senlin action to finish."
                }, 
                {
                    "default": 500.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "neutron_create_loadbalancer_timeout", 
                    "help": "Neutron create loadbalancer timeout"
                }, 
                {
                    "default": 2.0, 
                    "deprecated_opts": [
                        {
                            "group": "benchmark", 
                            "name": null
                        }
                    ], 
                    "type": "floating point value", 
                    "name": "neutron_create_loadbalancer_poll_interval", 
                    "help": "Neutron create loadbalancer poll interval"
                }, 
                {
                    "default": false, 
                    "deprecated_opts": [], 
                    "type": "boolean value", 
                    "name": "pre_newton_neutron", 
                    "help": "Whether Neutron API is older then OpenStack Newton or not. Based in this option, some external fields for identifying resources can be applied."
                }
            ]
        }, 
        "plugins_bases": {
            "Resource Type": "", 
            "Hook Action": "Factory for hook classes.", 
            "Scenario": "This is base class for any scenario.\n\nAll Scenario Plugins should be subclass of this class.\n", 
            "Verifier Manager": "Verifier base class.\n\nThis class provides an interface for operating specific tool.\n", 
            "Chart": "Base class for charts.\n\nThis is a base for all plugins that prepare data for specific charts\nin HTML report. Each chart must at least declare chart widget and\nprepare data that is suitable for rendering by JavaScript.\n", 
            "Platform": "", 
            "Validator": "A base class for all validators.", 
            "OS Client": "Base class for openstack clients", 
            "Context": ""
        }
    }
}